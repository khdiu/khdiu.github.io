<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>audioTest</title>
      <link href="/2023/10/13/audioTest/"/>
      <url>/2023/10/13/audioTest/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="audio"><audio controls preload><source src="http://qiniu.cunzhuang.top/%E5%85%AD%E5%93%B2%20-%20%E4%BD%A0%E7%9A%84%E5%BF%83%E6%98%AF%E5%90%A6%E4%B9%9F%E6%9C%89%E6%88%91%E7%9A%84%E5%90%8D.mp3" type="audio/mp3">Your browser does not support the audio tag.</audio></div><blockquote><p>123</p></blockquote><div class="note warning"><p>123</p></div><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-danger" style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>开发</p></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JUC</title>
      <link href="/2023/05/12/JUC/"/>
      <url>/2023/05/12/JUC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JUC并发"><a href="#JUC并发" class="headerlink" title="JUC并发"></a>JUC并发</h1><h2 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h2><p>公平锁与非公平锁</p><ol><li>公平锁：先来后到</li><li>非公平锁：可以插队（默认）</li></ol><blockquote><p>Synchronized和Lock的区别</p></blockquote><ol><li>Synchronized是Java中的关键字；Lock是Java中的一个接口</li><li>Synchronized无法判断锁的状态，Lock可以是否获取到了锁</li><li>Synchronized会自动释放锁，lock必须手动解锁</li><li>Synchronized 竞争线程会一直到等待到释放；Lock锁不一定会等待下去</li><li>Synchronized 可重入锁，不可以中断，非公平；Lock，可重入锁，可以判断锁，非公平（默认，可以设置）</li><li>Synchronized 适合锁少量的代码同步问题，Lock适合锁大量的同步代码</li></ol><h2 id="生产者和消费者问题"><a href="#生产者和消费者问题" class="headerlink" title="生产者和消费者问题"></a>生产者和消费者问题</h2><p>面试：单例模式、排序算法、生产者和消费者、死锁</p><blockquote><p>生产者和消费者的Synchronized版</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pc<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Data data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        number<span class="token operator">++</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"=>"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        number<span class="token operator">--</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"=>"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>问题存在，A、B、C、D四个线程！虚假唤醒</p></blockquote><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230403170840491.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230403170840491.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230403170840491"></p><ul><li>虚假唤醒：<ul><li>if判断流水线状态为空时，线程被阻塞，这时if判断就完成了，线程被唤醒后直接执行线程剩余操作</li><li>while判断流水线状态为空时吗，线程被阻塞，这时while循环没有完成，线程被唤醒后会先进行while判断</li></ul></li></ul><blockquote><p>JUC版的生产者和消费者问题</p></blockquote><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230403172109702.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230403172109702.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230403172109702" style="zoom:50%;"><p>通过Lock找到Condition</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230403172019897.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230403172019897.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230403172019897" style="zoom:50%;"><blockquote><p>Condition 精准通知和唤醒线程</p></blockquote><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Data3 data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               data<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               data<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               data<span class="token punctuation">.</span><span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Data3</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Condition condition3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                condition1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"=>AAAAAAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            condition2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                condition2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"=>BBBBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            condition3<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                condition3<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"=>CCCCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            condition1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="8锁现象"><a href="#8锁现象" class="headerlink" title="8锁现象"></a>8锁现象</h2><p>如何判断锁是谁的！永远知道什么锁，锁到底锁的是谁</p><ol><li>普通同步与普通同步</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lock8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            phone<span class="token punctuation">.</span><span class="token function">senMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    synchronize方法锁的是方法的调用对象</span><span class="token comment" spellcheck="true">//    两个方法是同一个锁，谁先拿到谁先执行</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">senMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sendMsg..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>同类不同对象的同步方法，同步方法与不同步方法</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lock8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Phone2 phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Phone2 phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                phone1<span class="token punctuation">.</span><span class="token function">senMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Phone2</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    synchronize方法锁的是方法的调用对象</span><span class="token comment" spellcheck="true">//    两个方法是同一个锁，谁先拿到谁先执行</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">senMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sendMsg..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    没有锁，不是同步方法，不受锁的影响</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>静态同步方法</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lock8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Phone3 phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                phone1<span class="token punctuation">.</span><span class="token function">senMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            phone1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Phone3</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    synchronize方法锁的是方法的调用对象</span><span class="token comment" spellcheck="true">//    两个方法是同一个锁，谁先拿到谁先执行</span><span class="token comment" spellcheck="true">//    静态同步方法锁的是class对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">senMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sendMsg..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    没有锁，不是同步方法，不受锁的影响</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="4"><li>静态同步与普通同步</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lock8<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Phone3 phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                phone1<span class="token punctuation">.</span><span class="token function">senMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            phone1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Phone3</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    synchronize方法锁的是方法的调用对象</span><span class="token comment" spellcheck="true">//    两个方法是同一个锁，谁先拿到谁先执行</span><span class="token comment" spellcheck="true">//    静态同步方法锁的是class对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">senMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sendMsg..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    没有锁，不是同步方法，不受锁的影响</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>小结</p><p>new this 具体的某一个对象 非静态同步方法</p><p>static class 唯一的模板 静态同步方法</p></blockquote><h2 id="集合类不安全"><a href="#集合类不安全" class="headerlink" title="集合类不安全"></a>集合类不安全</h2><blockquote><p>List不安全</p></blockquote><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>unsatelist<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>pc<span class="token punctuation">.</span>C<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CopyOnWriteArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        并发下ArrayList不安全</span><span class="token comment" spellcheck="true">//        解决方案：</span><span class="token comment" spellcheck="true">//        1、List list = new Vector();</span><span class="token comment" spellcheck="true">//        2、List list = Collections.synchronizedList(new ArrayList&lt;>());</span><span class="token comment" spellcheck="true">//        CopyOnWrite 写入时复制     COW     计算机领域设计的优化策略：</span><span class="token comment" spellcheck="true">//        多个线程调用时 ，list读取的时候，固定的，写入（覆盖）</span><span class="token comment" spellcheck="true">//        在写入的时候，避免覆盖造成数据问题</span><span class="token comment" spellcheck="true">//        Vector底层犯方法都加了synchronize进行同步，而CopyOnWriteArrayList使用lock进行同步，故后者效率较高</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>Set不安全</p></blockquote><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>unsatelist<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CopyOnWriteArraySet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        并发修改问题</span><span class="token comment" spellcheck="true">//        解决方法:</span><span class="token comment" spellcheck="true">//        1.Set&lt;String> set = Collections.synchronizedSet(new HashSet&lt;>());  工具类同步</span><span class="token comment" spellcheck="true">//        Set&lt;String> set = new CopyOnWriteArraySet&lt;>();  写入时复制</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>hashSet底层就是hashMap</p><blockquote><p>HashMap 不安全</p><p>使用concurrentHashMap类</p></blockquote><h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><ol><li>可以有返回值</li><li>可以抛出异常</li><li>方法不同，run()、call()</li></ol><blockquote><p>代码测试</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>callable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallableTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FutureTask futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String s <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回线程执行结果,可能会产生阻塞    要么放在最后,要么异步执行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"谢谢"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>细节：</p><ol><li>有缓存</li><li>结果需要等待，可能会阻塞</li></ol><h2 id="常用辅助类"><a href="#常用辅助类" class="headerlink" title="常用辅助类"></a>常用辅助类</h2><h2 id><a href="#" class="headerlink" title></a></h2><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>add<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" Go out!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                计数器减一</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        等待计数器归零,然后再向下执行</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关门!!!!!!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>原理：<br>countDownLatch.countDown();  &#x2F;&#x2F;计数器减一</p><p>countDownLatch.await(); &#x2F;&#x2F;等待计数器归零,然后再向下执行</p><p>每次有线程调用countDown()减一，假设计数器变为0，countDownLatch.await就会被唤醒</p><h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><p>加法计数器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>add<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>BrokenBarrierException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CyclicBarrier<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        CyclicBarrier cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"龙珠集齐，召唤神龙，嗷嗷嗷嗷嗷嗷嗷嗷嗷嗷！！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"收集到了"</span><span class="token operator">+</span> <span class="token punctuation">(</span>finalI <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"星龙珠！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Semaephore"><a href="#Semaephore" class="headerlink" title="Semaephore"></a>Semaephore</h3><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>add<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Semaphore<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        线程数量，停车位，限流</span>        Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                acquire() 得到</span><span class="token comment" spellcheck="true">//                release() 释放</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢到车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"离开车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>ReadWriteLock</p><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>rw<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReadWriteLock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantReadWriteLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 独占锁（写锁）* 共享锁（读锁）* 都督可以共存* 读写不能共存*** */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadWriteLockDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyCacheLock myCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCacheLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                myCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>finalI<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>finalI<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                myCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>finalI<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加锁的</span><span class="token keyword">class</span> <span class="token class-name">MyCacheLock</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    读写锁，更加细粒度的控制</span>    <span class="token keyword">private</span> ReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    存，写入的时候，只能一个人往里面写</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"开始写入=>"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入完成=>"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    取</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"正在读取=>"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读取完毕=>"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//未加锁</span><span class="token keyword">class</span> <span class="token class-name">MyCache</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    存</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"开始写入=>"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"写入完成=>"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    取</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"正在读取=>"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"读取完毕=>"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><p>写入：队列满时，必须阻塞等待生产</p><p>取出：如果队列是空的，必须阻塞等待生产</p><blockquote><p>什么情况下使用阻塞队列：</p><p>多线程、线程池</p></blockquote><p>API：</p><table><thead><tr><th>方式</th><th>抛出异常</th><th>有返回值，不抛出异常</th><th>阻塞等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add</td><td>offer</td><td>put</td><td>offer(重载)</td></tr><tr><td>移除</td><td>remove</td><td>poll</td><td>take</td><td>poll(重载)</td></tr><tr><td>判断队列首</td><td>element</td><td>peek</td><td>-</td><td></td></tr></tbody></table><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*     *抛出异常     * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ArrayBlockingQueue blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(blockingQueue.add("d"));</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*    * 有返回值，不抛出异常    * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ArrayBlockingQueue arrayBlockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(arrayBlockingQueue.offer("d"));</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        出队空元素，不抛出异常</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*    * 阻塞等待    * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ArrayBlockingQueue arrayBlockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        arrayBlockingQueue.put("d");</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayBlockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>SynchronousQueue 同步队列</p></blockquote><p>没有容量，</p><p>进入一个元素，必须等到元素取出来之后，才能往里放一个元素</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>线程池：三大方法、七大参数、四种拒绝策略</p><blockquote><p>池化技术</p></blockquote><p>程序的运行，本质：占用系统资源！优化资源的使用！&#x3D;&gt;池化技术</p><p>线程池、连接池、内存池、对象池</p><p>池化技术：事先准备好一些资源，有人要使用，就来我这里拿，用完之后归还</p><p>线程池的好处：</p><ol><li>降低资源消耗</li><li>提高响应速率</li><li>方便管理</li></ol><p>线程复用、可以控制最大并发数、管理线程</p><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pool<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Executors 工具类，三大方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        ExecutorService threadPool = Executors.newFixedThreadPool(5);//创建一个固定大小的线程池</span>        ExecutorService threadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可伸缩的，遇强则强，遇弱则弱</span><span class="token comment" spellcheck="true">//        ExecutorService threadPool = Executors.newSingleThreadExecutor(); //单个线程</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        线程池用完，程序结束，关闭线程池</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>七大参数</p></blockquote><p>源码分析</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 单线程池</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 固定数量线程池</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//缓存线程池</span><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                      60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 本质 ThreadPoolExecutor</span><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//核心线程数</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//最大线程数</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//空闲线程存活时间，只对等待区有效，队核心线程无效</span>                              TimeUnit unit<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 超时单位</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//阻塞队列</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//线程工厂，创建线程</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//拒绝策略</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span>                null <span class="token operator">:</span>                AccessController<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>手动创建一个线程池</p></blockquote><pre><code>package com.pool;import java.util.concurrent.*;//Executors 工具类，三大方法public class Demo1 &#123;    public static void main(String[] args) &#123;        ExecutorService threadPool = new ThreadPoolExecutor(2,                5,                3,                TimeUnit.SECONDS,                new LinkedBlockingDeque&lt;&gt;(3),                Executors.defaultThreadFactory(),//                new ThreadPoolExecutor.AbortPolicy() //阻塞队列满，最大线程满，抛出异常//                new ThreadPoolExecutor.CallerRunsPolicy() //任务从哪个线程插入队列，就让哪个线程执行//                new ThreadPoolExecutor.DiscardPolicy()  //队列满了，丢弃任务，不会抛出异常                new ThreadPoolExecutor.DiscardOldestPolicy() //队列满了，尝试和最早进入队列的人竞争，竞争失败就丢失，成功就执行        );        try &#123;            for (int i = 0; i &lt; 12; i++) &#123;                threadPool.execute(()-&gt;&#123;                    System.out.println(Thread.currentThread().getName()+&quot; OK&quot;);                &#125;);            &#125;        &#125; catch (Exception e )&#123;            e.printStackTrace();        &#125; finally &#123;//        线程池用完，程序结束，关闭线程池            threadPool.shutdown();        &#125;    &#125;&#125;</code></pre><blockquote><p>四种拒绝策略</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//                new ThreadPoolExecutor.AbortPolicy() //阻塞队列满，最大线程满，抛出异常</span><span class="token comment" spellcheck="true">//                new ThreadPoolExecutor.CallerRunsPolicy() //任务从哪个线程插入队列，就让哪个线程执行</span><span class="token comment" spellcheck="true">//                new ThreadPoolExecutor.DiscardPolicy()  //队列满了，丢弃任务，不会抛出异常</span><span class="token comment" spellcheck="true">//               new ThreadPoolExecutor.DiscardOldestPolicy() //队列满了，尝试和最早进入队列的人竞争，竞争失败就丢失，成功就执行</span></code></pre><blockquote><p>拓展</p></blockquote><p>池的最大大小</p><ol><li><p>CPU密集型</p></li><li><p>IO密集型</p></li></ol><h2 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h2><p>新时代程序员：lambda表达式、链式编程、函数式接口、Stream流计算</p><blockquote><p>函数式接口：只有一个方法的接口</p></blockquote><p>代码测试：</p><blockquote><p>函数式接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> function <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>s<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"asd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>断定型接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Predicate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//断定型接口:有一个输入参数,返回值只能是 布尔值</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        判断字符串是否为空</span>        Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> predicate1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>String o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> predicate2 <span class="token operator">=</span> s<span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>predicate1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>predicate2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>消费型接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Consumer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 消费型接口只有输入没有返回值* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer2 <span class="token operator">=</span> s<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer1<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"asdasd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>供给性接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Supplier<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 供给型接口:只有返回值,没有接收参数* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Supplier<span class="token operator">&lt;</span>String<span class="token operator">></span> supplier1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"123213"</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Supplier<span class="token operator">&lt;</span>String<span class="token operator">></span> supplier2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token string">"213213"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>supplier2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Stream流式计算"><a href="#Stream流式计算" class="headerlink" title="Stream流式计算"></a>Stream流式计算</h2><p>大数据：存储+计算</p><p>集合、Mysql 本质就是存储东西的</p><p>计算都应该交给Stream来计算</p><h2 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h2><blockquote><p>什么是ForkJoin</p></blockquote><p>ForkJoin出现在JDK1.7，并发执行任务！提高效率。大数据量！<br>大数据：Map Reduce（把大任务拆分为小任务）</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230405140516197.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230405140516197.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230405140516197" style="zoom:50%;"><blockquote><p>ForkJoin特点：工作窃取</p></blockquote><p>这里面维护的是双端队列，当B先完成所属任务列的之后，可以从A的任务列之中取出任务进行执行</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230405140749299.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230405140749299.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230405140749299" style="zoom:50%;"><blockquote><p>ForkJoin</p></blockquote><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230405142221676.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230405142221676.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230405142221676" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230405142233368.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230405142233368.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230405142233368" style="zoom:50%;"><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>forkjoin<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>RecursiveTask<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/***  求和计算**  如何使用ForkJoinPool*  1. forkJoinPool 通过他来执行*  2. 计算任务  forkJoinPool.execute(ForkJoinTask task)*  3. 计算类需要继承ForkJoinTask类* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForkJoinDemo</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Long start<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long end<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//临界值</span>    <span class="token keyword">private</span> Long temp <span class="token operator">=</span> 10000L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ForkJoinDemo</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Long <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">&lt;</span>temp<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> sum<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//forkJoin</span>            <span class="token keyword">long</span> mi <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            ForkJoinDemo task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> mi<span class="token punctuation">)</span><span class="token punctuation">;</span>            task1<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//拆分任务, 把任务压入线程队列</span>            ForkJoinDemo task2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>mi<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            task2<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//拆分任务, 把任务压入线程队列</span>            <span class="token keyword">return</span> task1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>task2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>测试：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>forkjoin<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinPool<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinTask<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>LongStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        test1();</span><span class="token comment" spellcheck="true">//        test2();</span>        <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    普通求和</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Long sum <span class="token operator">=</span> 0L<span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> 0L<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 1_000_000_000L<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum=>"</span><span class="token operator">+</span>sum<span class="token operator">+</span><span class="token string">"花费时间:"</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    使用ForkJoin</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ForkJoinPool forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ForkJoinDemo forkTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> 10_0000_0000L<span class="token punctuation">)</span><span class="token punctuation">;</span>        ForkJoinTask<span class="token operator">&lt;</span>Long<span class="token operator">></span> submit <span class="token operator">=</span> forkJoinPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>forkTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> sum <span class="token operator">=</span> submit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum=>"</span><span class="token operator">+</span>sum<span class="token operator">+</span><span class="token string">"花费时间:"</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> sum <span class="token operator">=</span> LongStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> 10_0000_0000<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Long<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费时间:"</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><blockquote><p>Future 设计的初衷：对将来的某个事件的结果进行建模</p></blockquote><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>future<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Time<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CompletableFuture<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 异步调用: Ajax*** */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        发起一个请求</span><span class="token comment" spellcheck="true">//        没有返回值的异步回调 runAsync 异步回调</span><span class="token comment" spellcheck="true">/*        CompletableFuture&lt;Void> completableFuture = CompletableFuture.runAsync(()->&amp;#123;            try &amp;#123;                TimeUnit.SECONDS.sleep(2);            &amp;#125; catch (InterruptedException e) &amp;#123;                e.printStackTrace();            &amp;#125;            System.out.println(Thread.currentThread().getName()+"runAsync");        &amp;#125;);        System.out.println("11111111");        completableFuture.get();*/</span><span class="token comment" spellcheck="true">//        有返回值的异步回调</span>        CompletableFuture<span class="token operator">&lt;</span>Integer<span class="token operator">></span> completableFuture <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"supplyAsync=>Integer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        completableFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t=>"</span><span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正常的返回结果</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u=>"</span><span class="token operator">+</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误信息 java.util.concurrent.CompletionException: java.lang.ArithmeticException: / by zero</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">233</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取到错误的返回结果</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><blockquote><p>请你谈谈对Volatile的理解</p></blockquote><p>volatile是Java虚拟机提供的<strong>轻量级同步机制</strong></p><ol><li>保证可见性</li><li>不保证原子性</li><li>禁止指令重排</li></ol><blockquote><p>什么是JMM</p></blockquote><p>JMM：Java memory model </p><p>Java内存模型</p><p><strong>关于JMM的一些同步约定：</strong></p><ol><li>线程解锁前：必须把共享变量立刻从工作内存刷回主存</li><li>线程加锁钱：必须读取内存中的最新值道工作内存中</li><li>加锁和解锁是同一把锁</li></ol><p>问题：程序不知道主内存中的值已经被修改了</p><h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><blockquote><p>保证可见性</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>vatile<span class="token punctuation">;</span><span class="token keyword">import</span> jdk<span class="token punctuation">.</span>nashorn<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>regexp<span class="token punctuation">.</span>joni<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>TargetInfo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    不加volatile就会进入死循环</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 线程一</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>不保证原子性</p></blockquote><p>原子性：不可分割</p><p>线程A在执行任务的时候，不能被打扰，也不能分割。要么同时成功，要么同时失败</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>vatile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不保证原子性</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如果不加Lock或者Synchronized如何保证原子性</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230405155302229.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230405155302229.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230405155302229" style="zoom:50%;"><p>使用原子类来解决这个问题</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>vatile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不保证原子性</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> AtomicInteger num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//AtomicInteger + 1 方法  CAS,CPU并发原语</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这些类的底层都直接和操作系统底层挂钩！在内存中修改值！Unsafe类是一个很特殊的存在</p><blockquote><p>指令重排</p></blockquote><p>什么是指令重排：你写的程序，计算机并不是按照你写的那样去执行</p><p>原代码–》编译器优化的重排–》指令并行也可能会重排–》内存系统也会重排–》执行</p><p>处理器在进行指令重排的时候，考虑：数据之间的依赖性</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span>y <span class="token operator">=</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//4</span>我们所期望的：<span class="token number">1234</span>        但是可能执行的时候编程<span class="token number">2134</span> <span class="token number">1324</span>    但不可能是<span class="token number">4123</span></code></pre><p>volatile在计算机中通过<strong>内存屏障</strong>来保证禁止指令重排</p><p>内存屏障。CPU指令。作用：</p><ol><li>保证特定操作的执行顺序</li><li>可以保证某些变量的内存可见性（利用这些特性volatile保证了可见性）</li></ol><blockquote><p>volatile是可以保证可见性。不能保证原子性，由于内存屏障，可以保证避免指令重排的现象产生</p></blockquote><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>饿汉式、DCL懒汉式</p><blockquote><p>饿汉式</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> hungry<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//饿汉式单例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hungry</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    可能会浪费空间</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data3<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Hungry HUNGRY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Hungry <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> HUNGRY<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>懒汉式</p></blockquote><ol><li>获取方法双重检测锁保证第一个同步问题<ol><li>创建动作同步同步，一个时间只能有一个进入判断区域</li></ol></li><li>加volatile关键字保证第二个同步问题<ol><li>对象修改的同步，防止由于指令重排导致的空引用问题（见代码注释中的main方法）</li></ol></li><li>构造方法设置判断条件<ol><li>防止使用反射破环单例</li></ol></li></ol><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> hungry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lazy</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> qinjiang <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Lazy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>qinjiang <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                qinjiang <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不要试图使用反射破环异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            if (lazy != null)&amp;#123;</span><span class="token comment" spellcheck="true">//                throw new RuntimeException("不要试图使用反射破环异常");</span><span class="token comment" spellcheck="true">//            &amp;#125;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    volatile保证可见性</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Lazy lazy<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Lazy <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        双重检测锁模式的懒汉式单例 即DCL懒汉式单例</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Lazy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    lazy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lazy<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    多线程并发</span><span class="token comment" spellcheck="true">/*    public static void main(String[] args) &amp;#123;        for (int i = 0; i &lt; 10; i++) &amp;#123;            new Thread(()->&amp;#123;                Lazy.getInstance();// 不是原子性操作//                * 以下指令可能重排//                * 1. 分配内存空间//                * 2. 执行构造方法,初始化对象//                * 3. 把这个对象指向该内存空间//                *//                * 正常:123//                *//                * 异常: A线程走 132 ,在3的时候B线程进入//                *      B线程发现变量已经指向特定内存空间, 直接返回对象,但是此时A线程还没有初始化该对象//                *//                *            &amp;#125;).start();        &amp;#125;    &amp;#125;*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchFieldException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        Lazy lazy1 = Lazy.getInstance();</span>        Field qinjiang <span class="token operator">=</span> Lazy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"qinjiang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        qinjiang<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor<span class="token operator">&lt;</span>Lazy<span class="token operator">></span> constructor <span class="token operator">=</span> Lazy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Lazy lazy3 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        qinjiang<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        qinjiang<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lazy3<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Lazy lazy1 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lazy1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lazy3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lazy1 <span class="token operator">==</span> lazy3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>静态内部类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> hungry<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Holder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Holder <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> InnerClass<span class="token punctuation">.</span>HOLDER<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Holder HOLDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>单例不安全，反射破坏，使用单例</p></blockquote><p>枚举自带单例模式</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406163042447.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406163042447.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230406163042447" style="zoom:67%;"><h2 id="深入CAS"><a href="#深入CAS" class="headerlink" title="深入CAS"></a>深入CAS</h2><blockquote><p>什么是CAS</p></blockquote><p>大厂必须要深入研究底层！有所突破</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cas<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        CAS比较并交换</span>        AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        如果我期望的值到达了，那么就更行，否则不更新</span><span class="token comment" spellcheck="true">//        CAS是CPU的并发原语</span>        atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>Unsafe类</p></blockquote><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406165509611.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406165509611.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230406165509611" style="zoom: 50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406165801710.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406165801710.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230406165801710" style="zoom: 50%;"><p>CAS：比较当前工作内存中的值和主内存中的值，如果这个值是期望的，那么则执行操作，否则就一直循环</p><p>缺点：</p><ol><li>循环会耗时</li><li>一次只能保证一个变量的原子性</li><li>ABA问题</li></ol><blockquote><p>CAS：ABA问题（狸猫换太子）</p></blockquote><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406170310680.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406170310680.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230406170310680" style="zoom:67%;"><h2 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h2><blockquote><p>解决ABA问题</p></blockquote><p>带版本号的原子操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cas<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicStampedReference<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////        CAS比较并交换</span><span class="token comment" spellcheck="true">//        AtomicInteger atomicInteger = new AtomicInteger(2020);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">////        如果我期望的值到达了，那么就更行，否则不更新</span><span class="token comment" spellcheck="true">////        CAS是CPU的并发原语</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">////        捣乱线程</span><span class="token comment" spellcheck="true">//        atomicInteger.compareAndSet(2020,2021);</span><span class="token comment" spellcheck="true">//        System.out.println(atomicInteger.get());</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        atomicInteger.compareAndSet(2021,2020);</span><span class="token comment" spellcheck="true">//        System.out.println(atomicInteger.get());</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">////        期望线程</span><span class="token comment" spellcheck="true">//        atomicInteger.compareAndSet(2020,666);</span><span class="token comment" spellcheck="true">//        System.out.println(atomicInteger.get());</span><span class="token comment" spellcheck="true">//        如果是包装类，需要注意包装陷阱</span>        AtomicStampedReference atomicStampedReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获得版本号</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A1=>"</span><span class="token operator">+</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A2=>"</span><span class="token operator">+</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A3=>"</span><span class="token operator">+</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获得版本号</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B1=>"</span><span class="token operator">+</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span>stamp<span class="token punctuation">,</span>stamp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B1=>"</span><span class="token operator">+</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>注意：</strong></p><p>Integer使用了对象缓存机制，默认范围是-128~127，推荐使用静态工厂方法valueOf获取实例对象实例，而不是使用new，因为valueOf使用缓存，而new一定会创建新的对象分配新的内存空间</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406172203004.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406172203004.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230406172203004" style="zoom:67%;"><h2 id="各种锁的理解"><a href="#各种锁的理解" class="headerlink" title="各种锁的理解"></a>各种锁的理解</h2><h3 id="公平锁、非公平锁"><a href="#公平锁、非公平锁" class="headerlink" title="公平锁、非公平锁"></a>公平锁、非公平锁</h3><p>公平锁：不能插队，必须先来后到</p><p>非公平锁：可以插队（默认非公平）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 默认非公平锁</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h3><p>可重入锁（递归锁）</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406172857484.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406172857484.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230406172857484" style="zoom:67%;"><blockquote><p>Synchronized</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Synchronized</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Phone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"sms......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里也有锁</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"call......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>Lock版</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Synchronized</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Phone2 phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Phone2</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"sms......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里也有锁</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"call......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>spinLock</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406192530845.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406192530845.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230406192530845" style="zoom:50%;"><p>自定义自旋锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>vatile<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ThreadLocalBufferAllocator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReference<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 自旋锁* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpinLockDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    AtomicReference<span class="token operator">&lt;</span>Thread<span class="token operator">></span> atomicReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    加锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" =>> myLock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自旋锁</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    解锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" =>> myunLock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>测试：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>vatile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpinLock</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpinLockDemo myLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpinLockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            myLock<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                myLock<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            myLock<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                myLock<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLock<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLock<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406194228568.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406194228568.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230406194228568" style="zoom:50%;"><p>死锁测试，怎么排除死锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lock<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>pc<span class="token punctuation">.</span>B<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String lockA <span class="token operator">=</span> <span class="token string">"lockA"</span><span class="token punctuation">;</span>        String lockB <span class="token operator">=</span> <span class="token string">"lockB"</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>lockA<span class="token punctuation">,</span>lockB<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>lockB<span class="token punctuation">,</span>lockA<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String lockA<span class="token punctuation">;</span>    <span class="token keyword">private</span> String lockB<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String lockA<span class="token punctuation">,</span>String lockB<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lockA <span class="token operator">=</span> lockA<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lockB <span class="token operator">=</span> lockB<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockA<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"lock:"</span> <span class="token operator">+</span> lockA <span class="token operator">+</span> <span class="token string">"=>get"</span> <span class="token operator">+</span> lockB<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockB<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"lock:"</span> <span class="token operator">+</span> lockB <span class="token operator">+</span> <span class="token string">"=>get"</span> <span class="token operator">+</span> lockA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>解决问题</p></blockquote><ol><li>使用”jps-l”定位进程</li></ol><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406195340109.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406195340109.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230406195340109" style="zoom:50%;"><ol start="2"><li>使用”jstack pid”查看进程信息，找到死锁问题</li></ol><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406195712587.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20230406195712587.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230406195712587" style="zoom: 50%;"><p>面试，工作中！排查问题：</p><ol><li>日志</li><li>堆栈信息</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>srping auto configration</title>
      <link href="/2023/04/07/srping-auto-configration/"/>
      <url>/2023/04/07/srping-auto-configration/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h1><p>自动装配简单来说就是把第三方组件的Bean装载到IOC容器当中，不需要开发人员再去写Bean相关的一些配置</p><p>再SpringBoot应用里面只需要去加上@SpringBootApplication注解就可以实现自动装配</p><p>解是springboot启动类上的一个注解，是一个组合注解，也就是由其他注解组合起来，它的主要作用就是标记说明这个类是springboot的主配置类，springboot可以运行这个类里面的main()方法来启动程序</p><p>这个注解主要由三个子注解组成</p><ul><li>@SpringBootConfiguration</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><p>真正去实现自动装配的注解的是@EnableAutoConfiguration</p><p>自动装配的实现主要依靠三个核心技术</p><ol><li><p>引入starter</p><p>启动依赖组件时，组件里面必须要包含一个@Configuration配置类</p><p>而在@Configuration配置类中，需要通过@Bean这个注解去声明需要装配到IOC容器里面的Bean对象</p></li><li><p>配置类放在第三方jar包中</p><p>通过SpringBoot中约定优于配置的这样一个理念去把这个配置类的全路径放在classpath:&#x2F;META-INF&#x2F;spring.factories文件中，这样Springboot就可以知道第三方jar包里面这个配置类里面的位置，这个步骤主要用到了SpringFactoriesLoader来完成的</p></li><li><p>SpringBoot拿到所有第三方jar包中声明的配置类之后</p><p>通过Spring提供的ImportSelector这样一个接口来实现对这些类的动态加载，从而去完成自动装配这样一个动作</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring核心基础</title>
      <link href="/2022/03/20/spring/"/>
      <url>/2022/03/20/spring/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring核心基础"><a href="#Spring核心基础" class="headerlink" title="Spring核心基础"></a>Spring核心基础</h1><p><strong>来源： B站 楠哥教你学java</strong></p><h2 id="1-Spring框架两大核心机制（ioC、AOP）"><a href="#1-Spring框架两大核心机制（ioC、AOP）" class="headerlink" title="1. Spring框架两大核心机制（ioC、AOP）"></a>1. Spring框架两大核心机制（ioC、AOP）</h2><ul><li>ioC （Inversion of control）（控制反转）&#x2F; DI （Dependency Injection） (依赖注入)</li><li>AOP （Aspect oriented programming）（面向切面编程）</li></ul><p><strong>Spring是一个企业级开发框架，是软件设计层面的框架，优势在于可以将应用程序进行分层，开发者可以自主选择组件</strong></p><p>MVC：Strust2、SpringMVC</p><p>ORMapping：Hibernate、Mybatis、Spring Data</p><p>企业级项目特点</p><ul><li>大规模：用户数量多、数据规模大、功能模块众多</li><li>性能和安全要求高</li><li>业务复杂</li><li>灵活多变</li></ul><h3 id="1-1-spring-概述"><a href="#1-1-spring-概述" class="headerlink" title="1.1 spring 概述"></a>1.1 spring 概述</h3><ul><li>Spring是一个企业级开发框架，关注点在于软件设计层面</li><li>spring已经成为java领域的行业标准</li><li>spirng提供了各个层面的解决方案，Spring MVC、Spring Data、Spring Cloud</li><li>Spring两大核心机制：ioC（控制反转）于 AOP（面向切面编程）</li></ul><p>Spring 体系结构：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220320161239856.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220320161239856.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220320161239856" style="zoom:50%;"><p><strong>Spring的优点：</strong></p><ul><li>低侵入式设计</li><li>独立于各种应用服务器</li><li>依赖注入特性将组件关系透明化，降低了耦合度</li><li>面向切面编程特性允许将通用任务进行，集中式处理</li><li>第三方框架的良好整合</li></ul><p><strong>集中式处理示例：</strong></p><p>多个任务中统一进行日志信息设置</p><p>多个任务分别设计</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220320161921396.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220320161921396.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220320161921396" style="zoom: 33%;"><p><strong>采用AOP</strong></p><p>将三个不同代码的对应位置抽象为 <strong>对象</strong></p><p>封装为对象队多个任务进行集中式处理</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220320162229723.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220320162229723.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220320162229723" style="zoom: 25%;"><h3 id="1-2-Spring-IOC"><a href="#1-2-Spring-IOC" class="headerlink" title="1.2 Spring IOC"></a>1.2 Spring IOC</h3><ul><li><p>什么是IOC(控制反转)</p><ul><li>在传统的程序开发中， 需要调用对象时，通常由调用者来创建被调用者的实例，即对象是由调用者主队new出来</li><li>但是在Spring框架中创建对象的工作不再由调用者来完成，而是交给IoC容器来创建，在推送给调用者，整个流程完成反转，所以是控制反转</li></ul><p>ioC特点：解耦合</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220320163036471.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220320163036471.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220320163036471" style="zoom:50%;"></li></ul><h4 id="1-2-1-IOC的使用"><a href="#1-2-1-IOC的使用" class="headerlink" title="1.2.1 IOC的使用"></a>1.2.1 IOC的使用</h4><ul><li>创建Maven工程，pom.xml添加依赖</li></ul>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>latex</title>
      <link href="/2022/03/03/latex/"/>
      <url>/2022/03/03/latex/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Latex"><a href="#Latex" class="headerlink" title="Latex"></a>Latex</h1><p>Tutorial source: <a href="https://cn.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes#What_is_LaTeX.3F">Learn LaTeX in 30 minutes - Overleaf, 在线LaTeX编辑器</a></p><h2 id="What-is-latex"><a href="#What-is-latex" class="headerlink" title="What is latex"></a>What is latex</h2><p>Latex is a tool used to create professional-looking documents. It is based on the WYSIWYM(<strong>what you see is what you mean</strong>) idea, meaning you only have focus on the contents and the computer will take care of the formatting. Instead of spacing out text on a page to control formatting, as with Microsoft Word or LibreOffice Writer, users can enter and let Latex take care of the rest</p><h2 id="why-learn-Latex"><a href="#why-learn-Latex" class="headerlink" title="why learn Latex"></a>why learn Latex</h2><p><strong>Latex is used all over the world for scientific documents, books, as well as many other forms of publishing.</strong></p><ul><li>It allows users to very quickly tackle the more complicated parts of typesetting,such as <strong>inputting mathematics, creating tables of contents, referencing and creating bibliographies</strong></li><li>It has a consistent layout across all sections</li><li>With huge number of open source packages available, Latex allows users do more things, such as add footnotes, draw schematics, create tables etc.</li></ul><h2 id="Writing-your-first-piece-of-latex"><a href="#Writing-your-first-piece-of-latex" class="headerlink" title="Writing your first piece of latex"></a>Writing your first piece of latex</h2><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">&amp;</span>#123;article<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;First document. This is a simple example, with no extra parameters or packages included.<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;</code></pre><ul><li><p>The first line of code declares the type of document, know as <strong>class</strong>. The class controls the overall appearance of the document. In this case, the class is article, the simplest and most common Latex class. Other types of documents you may be working on may require different classes such as book or report</p></li><li><p>The \begin{document} and \end{document} tags is body, which means you write your content of document inside the tags</p></li></ul><h3 id="The-preamble-of-a-document"><a href="#The-preamble-of-a-document" class="headerlink" title="The preamble of a document"></a>The preamble of a document</h3><ul><li>Everything before the \begin{document} command is called the <strong>preamble.</strong></li><li>The preamble you define the type of your document</li><li>It includes the language, the package you would like to use and several other elements</li></ul><p>Example:</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>12pt, letterpaper<span class="token punctuation">]</span><span class="token punctuation">&amp;</span>#123;article<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\usepackage</span><span class="token punctuation">[</span>utf8<span class="token punctuation">]</span><span class="token punctuation">&amp;</span>#123;inputenc<span class="token punctuation">&amp;</span>#125;</code></pre><p>\documentclass[12pt, letterpaper]{article}</p><p>As said before, this defines the type of document. Some additional parameters included in the square brackets can be passed to the command. These parameters must be comma-separated. In the example, the extra parameters set the font size (<strong><code>12pt</code></strong>) and the paper size (<strong><code>letterpaper</code></strong>). Of course other font sizes (<strong><code>9pt</code></strong>, <strong><code>11pt</code></strong>, <strong><code>12pt</code></strong>) can be used, but if none is specified, the default size is <strong><code>10pt</code></strong>. As for the paper size other possible values are <strong><code>a4paper</code></strong> and <strong><code>legalpaper</code></strong>; see the article about <a href="https://cn.overleaf.com/learn/latex/Page_size_and_margins">Page size and margins</a> for more details about this.</p><p>\usepackage[utf8]{inputenc}</p><p>This is the encoding for the document. It can be omitted or changed to another encoding but utf-8 is recommended. Unless you specifically need another encoding, or if you are unsure about it, add this line to the preamble.</p><h3 id="Adding-a-title-author-and-date"><a href="#Adding-a-title-author-and-date" class="headerlink" title="Adding a title, author and date"></a>Adding a title, author and date</h3><p>To add a title, author and date to our document, you must add three lines to the <strong>preamble</strong> (NOT the main body of the document). These lines are</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\title</span><span class="token punctuation">&amp;</span>#123;First document<span class="token punctuation">&amp;</span>#125;</code></pre><p>This is the title.</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\author</span><span class="token punctuation">&amp;</span>#123;Hubert Farnsworth<span class="token punctuation">&amp;</span>#125;</code></pre><p>Here you put the name of the Author(s) and, as an optional addition, you can add the next command within the curly braces:</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\thanks</span><span class="token punctuation">&amp;</span>#123;funded by the Overleaf team<span class="token punctuation">&amp;</span>#125;</code></pre><p>This can be added after the name of the author, inside the braces of the <strong><code>author</code></strong> command. It will add a superscript and a footnote with the text inside the braces. Useful if you need to thank an institution in your article.</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\date</span><span class="token punctuation">&amp;</span>#123;February 2014<span class="token punctuation">&amp;</span>#125;</code></pre><p>You can enter the date manually or use the command <strong><code>\today</code></strong> so the date will be updated automatically at the time you compile your document</p><p>With these lines added, your preamble should look something like this</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>12pt, letterpaper, twoside<span class="token punctuation">]</span><span class="token punctuation">&amp;</span>#123;article<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\usepackage</span><span class="token punctuation">[</span>utf8<span class="token punctuation">]</span><span class="token punctuation">&amp;</span>#123;inputenc<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\title</span><span class="token punctuation">&amp;</span>#123;First document<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\author</span><span class="token punctuation">&amp;</span>#123;Hubert Farnsworth <span class="token function selector">\thanks</span><span class="token punctuation">&amp;</span>#123;funded by the Overleaf team<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\date</span><span class="token punctuation">&amp;</span>#123;February 2017<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325222621764.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325222621764.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325222621764" style="zoom: 50%;"><h3 id="Adding-comments"><a href="#Adding-comments" class="headerlink" title="Adding comments"></a>Adding comments</h3><p>As with any code you are writing, it can often be useful to include comments. Comments are pieces of text you can include in the document which will not be printed, and will not affect the document in any way. They are useful for organizing your work, taking notes, or commenting out lines&#x2F;sections when debugging. To make a comment in LATEX, simply write a <strong><code>%</code></strong> symbol at the beginning of the line as shown below:</p><pre class=" language-latex"><code class="language-latex"><span class="token comment" spellcheck="true">% This line here is a comment. It will not be printed in the document.</span></code></pre><h3 id="Bold-italics-and-underlining"><a href="#Bold-italics-and-underlining" class="headerlink" title="Bold, italics and underlining"></a>Bold, italics and underlining</h3><p>We will now look at some simple text formatting commands.</p><ul><li><strong>Bold</strong>: Bold text in LaTeX is written with the <strong><code>\textbf&#123;...&#125;</code></strong> command.</li><li><em>Italics</em>: Italicised text in LaTeX is written with the <strong><code>\textit&#123;...&#125;</code></strong> command.</li><li>Underline: Underlined text in LaTeX is written with the <strong><code>\underline&#123;...&#125;</code></strong> command.</li></ul><p>An example of each of these in action is shown below:</p><pre class=" language-latex"><code class="language-latex">Some of the <span class="token function selector">\textbf</span><span class="token punctuation">&amp;</span>#123;greatest<span class="token punctuation">&amp;</span>#125;discoveries in <span class="token function selector">\underline</span><span class="token punctuation">&amp;</span>#123;science<span class="token punctuation">&amp;</span>#125; were made by <span class="token function selector">\textbf</span><span class="token punctuation">&amp;</span>#123;<span class="token function selector">\textit</span><span class="token punctuation">&amp;</span>#123;accident<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">&amp;</span>#125;.</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325223125251.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325223125251.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325223125251" style="zoom:67%;"><p>Another very useful command is the <strong><code>\emph&#123;...&#125;</code></strong> command.</p><p>What the <strong><code>\emph</code></strong> command actually does with its argument depends on the context - inside normal text the emphasized text is italicized, but this behaviour is reversed if used inside an italicized text- see example below:</p><pre class=" language-latex"><code class="language-latex">Some of the greatest <span class="token function selector">\emph</span><span class="token punctuation">&amp;</span>#123;discoveries<span class="token punctuation">&amp;</span>#125; in science were made by accident.<span class="token function selector">\textit</span><span class="token punctuation">&amp;</span>#123;Some of the greatest <span class="token function selector">\emph</span><span class="token punctuation">&amp;</span>#123;discoveries<span class="token punctuation">&amp;</span>#125; in science were made by accident.<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\textbf</span><span class="token punctuation">&amp;</span>#123;Some of the greatest <span class="token function selector">\emph</span><span class="token punctuation">&amp;</span>#123;discoveries<span class="token punctuation">&amp;</span>#125; in science were made by accident.<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325223414435.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325223414435.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325223414435" style="zoom:67%;"><h3 id="Adding-images"><a href="#Adding-images" class="headerlink" title="Adding images"></a>Adding images</h3><p>We will now look at how to add images to a LATEX document. On Overleaf, you will first have to <a href="https://cn.overleaf.com/learn/latex/Including_images_in_ShareLaTeX">upload the images</a>.</p><p>Below is a example on how to include a picture.</p><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325223731722.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325223731722.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325223731722"></p><ul><li>LATEX can not manage images by itself, so you will need to use a <em>package</em>. Packages can be used to change the default look of your LATEX document, or to allow more functionalities. </li><li>In this case, you need to include an image in our document, so you should use the <strong><code>graphicx</code></strong> package. This package gives new commands, <strong><code>\includegraphics&#123;...&#125;</code></strong> and <strong><code>\graphicspath&#123;...&#125;</code></strong>. To use the <strong><code>graphicx</code></strong> package, include the following line in you preamble: <strong><code>\usepackage&#123;graphicx&#125;</code></strong></li><li>The command <strong><code>\graphicspath&#123; &#123;images/&#125; &#125;</code></strong> tells LATEX that the images are kept in a folder named <em>images</em> under the current directory.</li></ul><p>Attention:</p><p>The <strong><code>\includegraphics&#123;universe&#125;</code></strong> command is the one that actually included the image in the document. <strong>Here <em>universe</em> is the name of the file containing the image without the extension, then <em>universe.PNG</em> becomes <em>universe</em></strong>. The file name of the image should not contain white spaces nor multiple dots.</p><h3 id="Captions-labels-and-references"><a href="#Captions-labels-and-references" class="headerlink" title="Captions, labels and references"></a>Captions, labels and references</h3><p>Images can be captioned, labelled and referenced by means of the <strong><code>figure</code></strong> environment as shown below:</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;figure<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">[</span>h<span class="token punctuation">]</span>    <span class="token function selector">\centering</span>    <span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>width=0.25<span class="token function selector">\textwidth</span><span class="token punctuation">]</span><span class="token punctuation">&amp;</span>#123;mesh<span class="token punctuation">&amp;</span>#125;    <span class="token function selector">\caption</span><span class="token punctuation">&amp;</span>#123;a nice plot<span class="token punctuation">&amp;</span>#125;    <span class="token function selector">\label</span><span class="token punctuation">&amp;</span>#123;fig:mesh1<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;figure<span class="token punctuation">&amp;</span>#125;As you can see in the figure <span class="token function selector">\ref</span><span class="token punctuation">&amp;</span>#123;fig:mesh1<span class="token punctuation">&amp;</span>#125;, the function grows near 0. Also, in the page <span class="token function selector">\pageref</span><span class="token punctuation">&amp;</span>#123;fig:mesh1<span class="token punctuation">&amp;</span>#125; is the same example.</code></pre><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325224419082.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325224419082.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325224419082"></p><p>There are three important commands in the example:</p><ul><li><p><strong><code>\caption&#123;a nice plot&#125;</code></strong>: As you may expect this command sets the caption for the figure. If you create a list of figures this caption will be used there. You can place it above or below the figure.</p></li><li><p><strong><code>\label&#123;fig:mesh1&#125;</code></strong>: If you need to refer the image within your document, set a label with this command. The label will number the image, and combined with the next command will allow you to reference it.</p></li><li><p><strong><code>\ref&#123;fig:mesh1&#125;</code></strong>: This code will be substituted by the number corresponding to the referenced figure.</p></li></ul><p><strong><u>Attention:</u></strong></p><p>When placing images in a LATEX document, <u>we should always put them inside a <strong><code>figure</code></strong> environment</u> or similar so that LATEX will position the image in a way that fits in with the rest of your text.</p><p><u>If you are using captions and references on your own computer, you will have to compile the document twice for the references to work</u>. Overleaf will do this for you automatically.’*</p><h3 id="Creating-lists-in-LATEX"><a href="#Creating-lists-in-LATEX" class="headerlink" title="Creating lists in LATEX"></a>Creating lists in LATEX</h3><p>Lists are very simple to create in LATEX. You can create lists using different list <em>environments</em>. Environments are sections of our document that you want to present in a different way to the rest of the document. They start with a <strong><code>\begin&#123;...&#125;</code></strong> command and end with an <strong><code>\end&#123;...&#125;</code></strong> command.</p><ul><li>There are two main different types of lists, <em>ordered</em> lists and <em>unordered</em> lists. Each will use a different environment.</li></ul><h4 id="Unordered-lists"><a href="#Unordered-lists" class="headerlink" title="Unordered lists"></a>Unordered lists</h4><p>Unordered lists are produced by the <strong><code>itemize</code></strong> environment. Each entry must be preceded by the control sequence <strong><code>\item</code></strong> as shown below.</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;itemize<span class="token punctuation">&amp;</span>#125;  <span class="token function selector">\item</span> The individual entries are indicated with a black dot, a so-called bullet.  <span class="token function selector">\item</span> The text in the entries may be of any length.<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;itemize<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325225202690.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325225202690.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325225202690" style="zoom:67%;"><p>By default the individual entries are indicated with a black dot, so-called bullet. The text in the entries may be of any length.</p><h4 id="Ordered-lists"><a href="#Ordered-lists" class="headerlink" title="Ordered lists"></a>Ordered lists</h4><p>Ordered list have the same syntax inside a different environment. We make ordered lists using the <strong><code>enumerate</code></strong> environment:</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;enumerate<span class="token punctuation">&amp;</span>#125;  <span class="token function selector">\item</span> This is the first entry in our list  <span class="token function selector">\item</span> The list numbers increase with each entry we add<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;enumerate<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325225630900.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325225630900.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325225630900" style="zoom:67%;"><p>As with unordered lists, <u>each entry must be preceded by the control sequence <strong><code>\item</code></strong></u>, which will automatically generate the number labelling the item. The enumerate labels consists of sequential numbers starting at one.</p><p>List example:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325225455614.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325225455614.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325225455614" style="zoom:80%;"><h3 id="Adding-math-to-LATEX"><a href="#Adding-math-to-LATEX" class="headerlink" title="Adding math to LATEX"></a>Adding math to LATEX</h3><ul><li><p>One of the main advantages of LATEX is the ease at which mathematical expressions can be written. </p></li><li><p>LATEX allows two writing modes for mathematical expressions: the <strong>inline</strong> mode and the <strong>display</strong> mode.</p><ol><li>The first one is used to write formulas that are part of a text</li><li>The second one is used to write expressions that are not part of a text or paragraph, and are therefore put on separate lines.</li></ol></li><li><p>Let’s see an example of the <strong>inline</strong> mode:</p></li></ul><pre class=" language-latex"><code class="language-latex">In physics, the mass-energy equivalence is stated by the equation <span class="token equation string">$E=mc^2$</span>, discovered in 1905 by Albert Einstein.</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325230111988.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325230111988.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325230111988" style="zoom:67%;"><p>To put your equations in <em>inline</em> mode use one of these delimiters: <strong><code>\( ... \)</code></strong>, <strong><code>$ ... $</code></strong> or <strong><code>\begin&#123;math&#125; ... \end&#123;math&#125;</code></strong>. They all work and the choice is a matter of taste.</p><ul><li>The <em>displayed</em> mode has two versions: numbered and unnumbered.</li></ul><pre class=" language-latex"><code class="language-latex">The mass-energy equivalence is described by the famous equation<span class="token equation string">\[ E=mc^2 \]</span>discovered in 1905 by Albert Einstein. In natural units (<span class="token equation string">$c = 1$</span>), the formula expresses the identity<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;equation<span class="token punctuation">&amp;</span>#125;E=m<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;equation<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325230250463.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325230250463.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325230250463" style="zoom:50%;"><p>To print your equations in <em>display</em> mode use one of these delimiters: <strong><code>\[ ... \]</code></strong>, <strong><code>\begin&#123;displaymath&#125; ... \end&#123;displaymath&#125;</code></strong> or <strong><code>\begin&#123;equation&#125; ... \end&#123;equation&#125;</code></strong>. <code>$$ ... $$</code> is <strong><a href="https://texfaq.org/FAQ-dolldoll">discouraged</a></strong> as it can give inconsistent spacing, and may not work well with some math packages.</p><p>This is a example:</p><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325230733686.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325230733686.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325230733686"></p><p>Many math mode commands require the <strong><code>amsmath</code></strong> package, so be sure to include it when writing math. An example is shown below of some basic math mode commands.</p><pre class=" language-latex"><code class="language-latex">Subscripts in math mode are written as <span class="token equation string">$a_b$</span> and superscripts are written as <span class="token equation string">$a^b$</span>. These can be combined an nested to write expressions such as<span class="token equation string">\[ T^&amp;#123;i_1 i_2 <span class="token equation-command regex">\dots</span> i_p&amp;#125;_&amp;#123;j_1 j_2 <span class="token equation-command regex">\dots</span> j_q&amp;#125; = T(x^&amp;#123;i_1&amp;#125;,<span class="token equation-command regex">\dots</span>,x^&amp;#123;i_p&amp;#125;,e_&amp;#123;j_1&amp;#125;,<span class="token equation-command regex">\dots</span>,e_&amp;#123;j_q&amp;#125;) \]</span> We write integrals using <span class="token equation string">$<span class="token equation-command regex">\int</span>$</span> and fractions using <span class="token equation string">$<span class="token equation-command regex">\frac</span>&amp;#123;a&amp;#125;&amp;#123;b&amp;#125;$</span>. Limits are placed on integrals using superscripts and subscripts:<span class="token equation string">\[ <span class="token equation-command regex">\int</span>_0^1 <span class="token equation-command regex">\frac</span>&amp;#123;dx&amp;#125;&amp;#123;e^x&amp;#125; =  <span class="token equation-command regex">\frac</span>&amp;#123;e-1&amp;#125;&amp;#123;e&amp;#125; \]</span>Lower case Greek letters are written as <span class="token equation string">$<span class="token equation-command regex">\omega</span>$</span> <span class="token equation string">$<span class="token equation-command regex">\delta</span>$</span> etc. while upper case Greek letters are written as <span class="token equation string">$<span class="token equation-command regex">\Omega</span>$</span> <span class="token equation string">$<span class="token equation-command regex">\Delta</span>$</span>.Mathematical operators are prefixed with a backslash as <span class="token equation string">$<span class="token equation-command regex">\sin</span>(<span class="token equation-command regex">\beta</span>)$</span>, <span class="token equation string">$<span class="token equation-command regex">\cos</span>(<span class="token equation-command regex">\alpha</span>)$</span>, <span class="token equation string">$<span class="token equation-command regex">\log</span>(x)$</span> etc.</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325231048986.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325231048986.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325231048986" style="zoom:50%;"><p>This is a example:</p><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325231127103.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220325231127103.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220325231127103"></p><h4 id="Mathematical-expressions"><a href="#Mathematical-expressions" class="headerlink" title="Mathematical expressions"></a>Mathematical expressions</h4><p>Writing basic equations in LaTeX is straightforward, for example:</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">&amp;</span>#123;article<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;The well known Pythagorean theorem <span class="token equation string">\(x^2 + y^2 = z^2\)</span> was proved to be invalid for other exponents. Meaning the next equation has no integer solutions:<span class="token equation string">\[ x^n + y^n = z^n \]</span><span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326103609962.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326103609962.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326103609962" style="zoom:67%;"><p>As you see, the way the equations are displayed depends on the delimiter, in this case <code>\[...\]</code> and <code>\(...\)</code>.</p><h5 id="Mathematical-modes"><a href="#Mathematical-modes" class="headerlink" title="Mathematical modes"></a>Mathematical modes</h5><p>LATEX allows two writing modes for mathematical expressions: the <em>inline</em> math mode and <em>display</em> math mode:</p><ul><li><em>inline</em> math mode is used to write formulas that are part of a paragraph</li><li><em>display</em> math mode is used to write expressions that are not part of a paragraph, and are therefore put on separate lines</li></ul><h6 id="Inline-math-mode"><a href="#Inline-math-mode" class="headerlink" title="Inline math mode"></a>Inline math mode</h6><p>You can use any of these “delimiters” to typeset your math in inline mode:</p><ul><li><code>\(...\)</code></li><li><code>$...$</code></li><li><code>\begin&#123;math&#125;...\end&#123;math&#125;</code>.</li></ul><h6 id="Display-math-modes"><a href="#Display-math-modes" class="headerlink" title="Display math modes"></a>Display math modes</h6><p>Use one of these constructions to typeset maths in display mode:</p><ul><li><code>\[...\]</code></li><li><code>\begin&#123;displaymath&#125;...\end&#123;displaymath&#125;</code></li><li><code>\begin&#123;equation&#125;...\end&#123;equation&#125;</code></li></ul><h5 id="Reference-guide"><a href="#Reference-guide" class="headerlink" title="Reference guide"></a>Reference guide</h5><p>Below is a table with some common maths symbols. For a more complete list see the <a href="https://cn.overleaf.com/learn/latex/List_of_Greek_letters_and_math_symbols">List of Greek letters and math symbols</a></p><p><img src="/2022/03/03/latex/Users/khdiu\AppData\Roaming\Typora\typora-user-images\image-20220326110644346.png" class="lazyload placeholder" data-srcset="/2022/03/03/latex/Users/khdiu\AppData\Roaming\Typora\typora-user-images\image-20220326110644346.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326110644346"></p><h4 id="Subscripts-and-superscripts"><a href="#Subscripts-and-superscripts" class="headerlink" title="Subscripts and superscripts"></a>Subscripts and superscripts</h4><p>The use of superscripts and subscripts is very common in mathematical expressions involving exponents, indexes, and in some special operators. This article explains how to write superscripts and subscripts in simple expressions, integrals, summations and so forth.</p><h5 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h5><p>Definite integrals are some of the most common mathematical expressions, so let’s see an example:</p><pre class=" language-latex"><code class="language-latex"><span class="token equation string">\[ <span class="token equation-command regex">\int</span><span class="token equation-command regex">\limits</span>_0^1 x^2 + y^2 <span class="token equation-command regex">\ </span>dx \]</span></code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326104555170.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326104555170.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326104555170" style="zoom:50%;"><ul><li>By convention, superscripts and subscripts in LATEX are created using the characters <code>^</code> and <code>_</code> respectively</li><li>The integral (<code>\int</code>) included in the example above where <code>_</code> is used to set the lower limit and the <code>^</code> for the upper limit.</li></ul><h5 id="Operators-using-subscripts-and-superscriptss"><a href="#Operators-using-subscripts-and-superscriptss" class="headerlink" title="Operators using subscripts and superscriptss"></a>Operators using subscripts and superscriptss</h5><p>Some mathematical operators may require subscripts and superscripts. The most frequent cases are those of the integral <code>\int</code> (check the <a href="https://cn.overleaf.com/learn/latex/Subscripts_and_superscripts#Introduction">introduction</a>) and the summation (<code>\sum</code>) operators, whose bounds are typeset precisely with subscripts and superscripts.</p><pre class=" language-latex"><code class="language-latex"><span class="token equation string">\[ <span class="token equation-command regex">\sum</span>_&amp;#123;i=1&amp;#125;^&amp;#123;<span class="token equation-command regex">\infty</span>&amp;#125; <span class="token equation-command regex">\frac</span>&amp;#123;1&amp;#125;&amp;#123;n^s&amp;#125; = <span class="token equation-command regex">\prod</span>_p <span class="token equation-command regex">\frac</span>&amp;#123;1&amp;#125;&amp;#123;1 - p^&amp;#123;-s&amp;#125;&amp;#125; \]</span></code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326105250810.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326105250810.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326105250810" style="zoom:67%;"><p>This is a example:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326105531564.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326105531564.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326105531564" style="zoom:80%;"><h5 id="Reference-guide-1"><a href="#Reference-guide-1" class="headerlink" title="Reference guide"></a>Reference guide</h5><img src="/2022/03/03/latex/Users/khdiu\AppData\Roaming\Typora\typora-user-images\image-20220326111618554.png" class="lazyload placeholder" data-srcset="/2022/03/03/latex/Users/khdiu\AppData\Roaming\Typora\typora-user-images\image-20220326111618554.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326111618554" style="zoom:67%;"><p>See official documentation for details</p><h4 id="Brackets-and-Parentheses"><a href="#Brackets-and-Parentheses" class="headerlink" title="Brackets and Parentheses"></a>Brackets and Parentheses</h4><h5 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h5><p>Parentheses and brackets are very common in mathematical formulas. You can easily control the size and style of brackets in LATEX; this article explains how.</p><p>Here’s an table of listing some common math braces and parentheses used in LATEX:</p><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326112502038.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326112502038.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326112502038"></p><h5 id="Reference-guide-2"><a href="#Reference-guide-2" class="headerlink" title="Reference guide"></a>Reference guide</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326112754891.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326112754891.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326112754891" style="zoom: 50%;"><h4 id="Fractions-and-Binomials"><a href="#Fractions-and-Binomials" class="headerlink" title="Fractions and Binomials"></a>Fractions and Binomials</h4><h5 id="Introduction-2"><a href="#Introduction-2" class="headerlink" title="Introduction"></a>Introduction</h5><p>Using fractions and binomial coefficients in an expression is straightforward.</p><pre class=" language-latex"><code class="language-latex">The binomial coefficient is defined by the next expression:<span class="token equation string">\[    <span class="token equation-command regex">\binom</span>&amp;#123;n&amp;#125;&amp;#123;k&amp;#125; = <span class="token equation-command regex">\frac</span>&amp;#123;n!&amp;#125;&amp;#123;k!(n-k)!&amp;#125;\]</span></code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326113133474.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326113133474.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326113133474" style="zoom:67%;"><p><u>For these commands to work you must import the package <strong>amsmath</strong> by adding the next line to the preamble of your file</u></p><h5 id="Displaying-fractions"><a href="#Displaying-fractions" class="headerlink" title="Displaying fractions"></a>Displaying fractions</h5><p>The appearance of the fraction may change depending on the context</p><pre class=" language-latex"><code class="language-latex">Fractions can be used alongside the text, for example <span class="token equation string">\( <span class="token equation-command regex">\frac</span>&amp;#123;1&amp;#125;&amp;#123;2&amp;#125; \)</span>, and in a mathematical display style like the one below:<span class="token equation string">\[<span class="token equation-command regex">\frac</span>&amp;#123;1&amp;#125;&amp;#123;2&amp;#125;\]</span></code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326113335523.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326113335523.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326113335523" style="zoom:67%;"><h5 id="Continued-fractions"><a href="#Continued-fractions" class="headerlink" title="Continued fractions"></a>Continued fractions</h5><p>The usage of fractions is quite flexible, they can be nested to obtain more complex expressions.</p><pre class=" language-latex"><code class="language-latex">The fractions can be nested<span class="token equation string">\[ <span class="token equation-command regex">\frac</span>&amp;#123;1+<span class="token equation-command regex">\frac</span>&amp;#123;a&amp;#125;&amp;#123;b&amp;#125;&amp;#125;&amp;#123;1+<span class="token equation-command regex">\frac</span>&amp;#123;1&amp;#125;&amp;#123;1+<span class="token equation-command regex">\frac</span>&amp;#123;1&amp;#125;&amp;#123;a&amp;#125;&amp;#125;&amp;#125; \]</span>Now a wild example<span class="token equation string">\[  a_0+<span class="token equation-command regex">\cfrac</span>&amp;#123;1&amp;#125;&amp;#123;a_1+<span class="token equation-command regex">\cfrac</span>&amp;#123;1&amp;#125;&amp;#123;a_2+<span class="token equation-command regex">\cfrac</span>&amp;#123;1&amp;#125;&amp;#123;a_3+<span class="token equation-command regex">\cdots</span>&amp;#125;&amp;#125;&amp;#125;\]</span></code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326113510982.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326113510982.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326113510982" style="zoom:67%;"><ul><li>The second fraction displayed in the previous example uses the command <code>\cfrac&#123;&#125;&#123;&#125;</code> provided by the package <strong>amsmath</strong> (see the <a href="https://cn.overleaf.com/learn/latex/Fractions_and_Binomials#Introduction">introduction</a>), this command displays nested fractions without changing the size of the font.</li></ul><h5 id="Binomial-coefficients"><a href="#Binomial-coefficients" class="headerlink" title="Binomial coefficients"></a>Binomial coefficients</h5><p>Binomial coefficients are common elements in mathematical expressions, the command to display them in LATEX is very similar to the one used for fractions.</p><pre class=" language-latex"><code class="language-latex">The binomial coefficient is defined by the next expression:<span class="token equation string">\[    <span class="token equation-command regex">\binom</span>&amp;#123;n&amp;#125;&amp;#123;k&amp;#125; = <span class="token equation-command regex">\frac</span>&amp;#123;n!&amp;#125;&amp;#123;k!(n-k)!&amp;#125;\]</span>And of course this command can be included in the normal text flow <span class="token equation string">\(<span class="token equation-command regex">\binom</span>&amp;#123;n&amp;#125;&amp;#123;k&amp;#125;\)</span>.</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326113745679.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326113745679.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326113745679" style="zoom: 50%;"><h4 id="Aligning-equations-with-amsmath"><a href="#Aligning-equations-with-amsmath" class="headerlink" title="Aligning equations with amsmath"></a>Aligning equations with amsmath</h4><h5 id="Introduction-3"><a href="#Introduction-3" class="headerlink" title="Introduction"></a>Introduction</h5><p>The <code>amsmath</code> package provides a handful of options for displaying equations. You can choose the layout that better suits your document, even if the equations are really long, or if you have to include several equations in the same line.</p><p>The standard LaTeX tools for equations may lack some flexibility, causing overlapping or even trimming part of the equation when it’s too long. We can surpass such difficulties by using the <code>amsmath</code> package, which can be added to preamble of your document using <code>\usepackage&#123;amsmath&#125;</code>.</p><p>Let’s start with a basic example:</p><pre class=" language-latex"><code class="language-latex"> <span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;equation<span class="token punctuation">&amp;</span>#125; <span class="token function selector">\label</span><span class="token punctuation">&amp;</span>#123;eq1<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;split<span class="token punctuation">&amp;</span>#125;A <span class="token punctuation">&amp;</span> = <span class="token function selector">\frac</span><span class="token punctuation">&amp;</span>#123;<span class="token function selector">\pi</span> r^2<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">&amp;</span>#123;2<span class="token punctuation">&amp;</span>#125; <span class="token function selector">\\</span> <span class="token punctuation">&amp;</span> = <span class="token function selector">\frac</span><span class="token punctuation">&amp;</span>#123;1<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">&amp;</span>#123;2<span class="token punctuation">&amp;</span>#125; <span class="token function selector">\pi</span> r^2<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;split<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;equation<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326114257357.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326114257357.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326114257357" style="zoom: 67%;"><ul><li>You have to wrap your equation in the <code>equation</code> environment if you want it to be numbered, use <code>equation*</code> (with an asterisk) otherwise.</li><li>Inside the <code>equation</code> environment, use the <code>split</code> environment to split the equations into smaller pieces, these smaller pieces will be aligned accordingly.</li><li>The double backslash works as a newline character. Use the ampersand character <code>&amp;</code>, to set the points where the equations are vertically aligned.</li></ul><h5 id="Writing-a-single-equation"><a href="#Writing-a-single-equation" class="headerlink" title="Writing a single equation"></a>Writing a single equation</h5><p>To display a single equation, as mentioned in the introduction, <strong>you have to use the <code>equation*</code> or <code>equation</code> environment, depending on <u>whether you want the equation to be numbered or not</u></strong>. Additionally, you might add a label for future reference within the document.</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;equation<span class="token punctuation">&amp;</span>#125; <span class="token function selector">\label</span><span class="token punctuation">&amp;</span>#123;eu_eqn<span class="token punctuation">&amp;</span>#125;e^<span class="token punctuation">&amp;</span>#123;<span class="token function selector">\pi</span> i<span class="token punctuation">&amp;</span>#125; + 1 = 0<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;equation<span class="token punctuation">&amp;</span>#125;The beautiful equation <span class="token function selector">\ref</span><span class="token punctuation">&amp;</span>#123;eu_eqn<span class="token punctuation">&amp;</span>#125; is known as the Euler equation.</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326114601063.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326114601063.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326114601063" style="zoom:67%;"><h5 id="Displaying-long-equations"><a href="#Displaying-long-equations" class="headerlink" title="Displaying long equations"></a>Displaying long equations</h5><p>For equations longer than a line use the <code>multline</code> environment. Insert a double backslash to set a point for the equation to be broken. The first part will be aligned to the left and the second part will be displayed in the next line and aligned to the right.</p><p><strong><u>Again, the use of an asterisk * in the environment name determines whether the equation is numbered or not.</u></strong></p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;multline*<span class="token punctuation">&amp;</span>#125;p(x) = 3x^6 + 14x^5y + 590x^4y^2 + 19x^3y^3<span class="token function selector">\\</span> - 12x^2y^4 - 12xy^5 + 2y^6 - a^3b^3<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;multline*<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326115024271.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326115024271.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326115024271" style="zoom:67%;"><h5 id="Splitting-and-aligning-an-equation"><a href="#Splitting-and-aligning-an-equation" class="headerlink" title="Splitting and aligning an equation"></a>Splitting and aligning an equation</h5><p><em>Split</em> is very similar to <em>multline</em>. Use the <em>split</em> environment to break an equation and to align it in columns, just as if the parts of the equation were in a table. This environment must be used inside an <em>equation</em> environment. For an example check the introduction of this document.</p><h5 id="Aligning-several-equations"><a href="#Aligning-several-equations" class="headerlink" title="Aligning several equations"></a>Aligning several equations</h5><p>If there are several equations that you need to align vertically, the <em>align</em> environment will do it:</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;align*<span class="token punctuation">&amp;</span>#125; 2x - 5y <span class="token punctuation">&amp;</span>=  8 <span class="token function selector">\\</span> 3x + 9y <span class="token punctuation">&amp;</span>=  -12<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;align*<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326115218776.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326115218776.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326115218776" style="zoom:67%;"><p>Usually the binary operators (<code>&gt;</code>, <code>&lt;</code> and <code>=</code>) are the ones aligned for a nice-looking document.</p><p>As mentioned before, the ampersand character <code>&amp;</code> determines where the equations align. Let’s check a more complex example:</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;align*<span class="token punctuation">&amp;</span>#125;x<span class="token punctuation">&amp;</span>=y           <span class="token punctuation">&amp;</span>  w <span class="token punctuation">&amp;</span>=z              <span class="token punctuation">&amp;</span>  a<span class="token punctuation">&amp;</span>=b+c<span class="token function selector">\\</span>2x<span class="token punctuation">&amp;</span>=-y         <span class="token punctuation">&amp;</span>  3w<span class="token punctuation">&amp;</span>=<span class="token function selector">\frac</span><span class="token punctuation">&amp;</span>#123;1<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">&amp;</span>#123;2<span class="token punctuation">&amp;</span>#125;z   <span class="token punctuation">&amp;</span>  a<span class="token punctuation">&amp;</span>=b<span class="token function selector">\\</span>-4 + 5x<span class="token punctuation">&amp;</span>=2+y   <span class="token punctuation">&amp;</span>  w+2<span class="token punctuation">&amp;</span>=-1+w          <span class="token punctuation">&amp;</span>  ab<span class="token punctuation">&amp;</span>=cb<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;align*<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326115341639.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326115341639.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326115341639" style="zoom:67%;"><p>Here we arrange the equations in three columns. LaTeX assumes that each equation consists of two parts separated by an <code>&amp;</code> and that each equation is separated from the one before by an <code>&amp;</code>.</p><p><strong><u>Again, use * to toggle the equation numbering. When numbering is allowed, you can label each row individually.</u></strong></p><h5 id="Grouping-and-centering-equations"><a href="#Grouping-and-centering-equations" class="headerlink" title="Grouping and centering equations"></a>Grouping and centering equations</h5><p>If you just need to display a set of consecutive equations, centered and with no alignment whatsoever, use the <code>gather</code> environment. The asterisk trick to set&#x2F;unset the numbering of equations also works here.</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;gather*<span class="token punctuation">&amp;</span>#125; 2x - 5y =  8 <span class="token function selector">\\</span> 3x^2 + 9y =  3a + c<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;gather*<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326115604652.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326115604652.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326115604652" style="zoom:67%;"><h5 id="Complete-example"><a href="#Complete-example" class="headerlink" title="Complete example"></a>Complete example</h5><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326115711140.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326115711140.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326115711140"></p><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326115735254.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326115735254.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326115735254"></p><h4 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h4><p>Characters in mathematical mode are usually shown in italics, but sometimes certain function names require different formatting which can be accomplished by using operators defined in LATEX.</p><h5 id="Introduction-4"><a href="#Introduction-4" class="headerlink" title="Introduction"></a>Introduction</h5><p>Trigonometrical functions, logarithms, and others can be written in a document by means of some special commands, as demonstrated in the following example:</p><pre class=" language-latex"><code class="language-latex">Examples of mathematical operators:<span class="token equation string">\[    <span class="token equation-command regex">\sin</span>(a + b) = <span class="token equation-command regex">\sin</span> a <span class="token equation-command regex">\cos</span> b + <span class="token equation-command regex">\cos</span> b <span class="token equation-command regex">\sin</span> a.\]</span></code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326135505371.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326135505371.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326135505371" style="zoom:67%;"><h5 id="Operators-in-different-contexts"><a href="#Operators-in-different-contexts" class="headerlink" title="Operators in different contexts"></a>Operators in different contexts</h5><p>Some operators can take parameters that are handled in a special way, for instance, limits.</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">&amp;</span>#123;article<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\usepackage</span><span class="token punctuation">&amp;</span>#123;amsmath<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;Testing notation for limits<span class="token equation string">\[    <span class="token equation-command regex">\lim</span>_&amp;#123;h <span class="token equation-command regex">\to</span> 0 &amp;#125; <span class="token equation-command regex">\frac</span>&amp;#123;f(x+h)-f(x)&amp;#125;&amp;#123;h&amp;#125;.\]</span>This operator changes when used alongside text <span class="token equation string">\( <span class="token equation-command regex">\lim</span>_&amp;#123;h <span class="token equation-command regex">\to</span> 0&amp;#125; (x-h) \)</span>.<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326135822885.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326135822885.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326135822885" style="zoom:67%;"><ul><li>The package <code>amsmath</code> is needed for the macro <code>\to</code>; without this package, <code>\rightarrow</code> has to be used.</li><li>Notice how the limit declaration can include a subscript. See the <a href="https://cn.overleaf.com/learn/latex/Operators#Reference_guide">reference guide</a> for a complete list of available operators.</li></ul><h5 id="Defining-your-own-operators"><a href="#Defining-your-own-operators" class="headerlink" title="Defining your own operators"></a>Defining your own operators</h5><p>If you need to add a personalized operator to be displayed in Roman font instead of italics use <code>\DeclareMathOperator</code></p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">&amp;</span>#123;article<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\usepackage</span><span class="token punctuation">&amp;</span>#123;amsmath<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\DeclareMathOperator</span><span class="token punctuation">&amp;</span>#123;<span class="token function selector">\arctg</span><span class="token punctuation">&amp;</span>#125;<span class="token punctuation">&amp;</span>#123;arctg<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;User-defined operator for arctangent:<span class="token equation string">\[    <span class="token equation-command regex">\arctg</span> <span class="token equation-command regex">\frac</span>&amp;#123;<span class="token equation-command regex">\pi</span>&amp;#125;&amp;#123;3&amp;#125; = <span class="token equation-command regex">\sqrt</span>&amp;#123;3&amp;#125;.\]</span><span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326140134834.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326140134834.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326140134834" style="zoom:67%;"><ul><li>The command <code>\DeclareMathOperator</code> takes two parameters, the first one is the name of the new operator and the second one is the text to be displayed. For this command to work you have to import the package <strong>amsmath</strong> in the preamble with</li></ul><h5 id="Reference-Guide"><a href="#Reference-Guide" class="headerlink" title="Reference Guide"></a>Reference Guide</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326140741007.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326140741007.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326140741007" style="zoom: 33%;"><h4 id="Spacing-in-math-mode"><a href="#Spacing-in-math-mode" class="headerlink" title="Spacing in math mode"></a>Spacing in math mode</h4><p>This article explains how to insert spaces of different widths in math mode.</p><h5 id="Introduction-5"><a href="#Introduction-5" class="headerlink" title="Introduction"></a>Introduction</h5><p>Adjusting (La)TeX’s default math mode spacing can be useful in certain situations; let’s see an example:</p><pre class=" language-latex"><code class="language-latex"> <span class="token function selector">\documentclass</span><span class="token punctuation">&amp;</span>#123;article<span class="token punctuation">&amp;</span>#125; <span class="token function selector">\usepackage</span><span class="token punctuation">&amp;</span>#123;amssymb<span class="token punctuation">&amp;</span>#125; <span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125; Assume we have the next sets <span class="token equation string">\[ S = <span class="token equation-command regex">\&amp;</span>#123; z <span class="token equation-command regex">\in</span> <span class="token equation-command regex">\mathbb</span>&amp;#123;C&amp;#125;<span class="token equation-command regex">\,</span> |<span class="token equation-command regex">\,</span> |z| &lt; 1 <span class="token equation-command regex">\&amp;</span>#125; <span class="token equation-command regex">\quad</span> <span class="token equation-command regex">\textrm</span>&amp;#123;and&amp;#125; <span class="token equation-command regex">\quad</span> S_2=<span class="token equation-command regex">\partial</span>&amp;#123;S&amp;#125; \]</span> <span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326140933191.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326140933191.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326140933191" style="zoom:67%;"><h5 id="Spaces"><a href="#Spaces" class="headerlink" title="Spaces"></a>Spaces</h5><p>The example below contains a complete list of spaces inserted using various commands and demonstrates their effect on the typeset math.</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">&amp;</span>#123;article<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\usepackage</span><span class="token punctuation">&amp;</span>#123;amsmath<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;Spaces in mathematical mode.<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;align*<span class="token punctuation">&amp;</span>#125;f(x) <span class="token punctuation">&amp;</span>= x^2<span class="token function selector">\!</span> +3x<span class="token function selector">\!</span> +2 <span class="token function selector">\\</span>f(x) <span class="token punctuation">&amp;</span>= x^2+3x+2 <span class="token function selector">\\</span>f(x) <span class="token punctuation">&amp;</span>= x^2<span class="token function selector">\,</span> +3x<span class="token function selector">\,</span> +2 <span class="token function selector">\\</span>f(x) <span class="token punctuation">&amp;</span>= x^2<span class="token function selector">\:</span> +3x<span class="token function selector">\:</span> +2 <span class="token function selector">\\</span>f(x) <span class="token punctuation">&amp;</span>= x^2<span class="token function selector">\;</span> +3x<span class="token function selector">\;</span> +2 <span class="token function selector">\\</span>f(x) <span class="token punctuation">&amp;</span>= x^2<span class="token function selector">\ </span>+3x<span class="token function selector">\ </span>+2 <span class="token function selector">\\</span>f(x) <span class="token punctuation">&amp;</span>= x^2<span class="token function selector">\quad</span> +3x<span class="token function selector">\quad</span> +2 <span class="token function selector">\\</span>f(x) <span class="token punctuation">&amp;</span>= x^2<span class="token function selector">\qquad</span> +3x<span class="token function selector">\qquad</span> +2<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;align*<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326141213786.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326141213786.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326141213786" style="zoom:67%;"><h5 id="Operators-spacing"><a href="#Operators-spacing" class="headerlink" title="Operators spacing"></a>Operators spacing</h5><p>Spacing around operators and relations in math mode are governed by specific skip widths:</p><ul><li><code>\thinmuskip</code> (by default it is equal to 3 mu)</li><li><code>\medmuskip</code> (by default it is equal to 4 mu)</li><li><code>\thickmuskip</code> (by default it is equal to 5 mu)</li></ul><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;align*<span class="token punctuation">&amp;</span>#125;3ax+4by=5cz<span class="token function selector">\\</span>3ax&lt;4by+5cz<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;align*<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326141528497.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326141528497.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326141528497" style="zoom:67%;"><p><strong>For relational operators, such as &lt;&lt;, &gt;&gt; and &#x3D;&#x3D;, LATEX establishes <code>\thickmuskip</code> space. But for binary operators such as ++, −− and ××, the <code>\medmuskip</code> space is set. The difference is almost unnoticeable.</strong></p><h5 id="User-defined-binary-and-relational-operators"><a href="#User-defined-binary-and-relational-operators" class="headerlink" title="User-defined binary and relational operators"></a>User-defined binary and relational operators</h5><p>You can force the spacing used in binary or relational operators, so you can <a href="https://cn.overleaf.com/learn/latex/Commands">define your own</a>.</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;align*<span class="token punctuation">&amp;</span>#125;34x^2a <span class="token function selector">\mathbin</span><span class="token punctuation">&amp;</span>#123;<span class="token function selector">\#</span><span class="token punctuation">&amp;</span>#125; 13bc <span class="token function selector">\\</span>34x^2a <span class="token function selector">\mathrel</span><span class="token punctuation">&amp;</span>#123;<span class="token function selector">\#</span><span class="token punctuation">&amp;</span>#125; 13bc<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;align*<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326141658804.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326141658804.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326141658804" style="zoom:67%;"><p>The previous example sets a particular spacing before and after <code>#</code> by using <code>\mathrel</code> (relational) and <code>\mathbin</code> (binary) commands.</p><h5 id="Reference-guide-3"><a href="#Reference-guide-3" class="headerlink" title="Reference guide"></a>Reference guide</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326141802010.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326141802010.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326141802010" style="zoom:67%;"><h4 id="Integrals-sums-and-limits"><a href="#Integrals-sums-and-limits" class="headerlink" title="Integrals, sums and limits"></a>Integrals, sums and limits</h4><h5 id="Integrals"><a href="#Integrals" class="headerlink" title="Integrals"></a>Integrals</h5><p>Integral expression can be added using the <code>\int_&#123;lower&#125;^&#123;upper&#125;</code> command.</p><p>Note, that integral expression may seems a little different in inline and display math mode.</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326141955355.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326141955355.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326141955355" style="zoom:50%;"><h5 id="Multiple-integrals"><a href="#Multiple-integrals" class="headerlink" title="Multiple integrals"></a>Multiple integrals</h5><p>To obtain double&#x2F;triple&#x2F;multiple integrals and cyclic integrals you must use <code>amsmath</code> and <code>esint</code> (for cyclic integrals) packages.</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326142031479.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326142031479.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326142031479" style="zoom:50%;"><h5 id="Sums-and-products"><a href="#Sums-and-products" class="headerlink" title="Sums and products"></a>Sums and products</h5><p>Like integral, sum expression can be added using the <code>\sum_&#123;lower&#125;^&#123;upper&#125;</code> command.</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326142134014.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326142134014.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326142134014" style="zoom:50%;"><h5 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h5><p>Limit expression can be added using the <code>\lim_&#123;lower&#125;</code> command.</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326142514566.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326142514566.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326142514566" style="zoom:67%;"><h4 id="List-of-Greek-letters-and-math-symbols"><a href="#List-of-Greek-letters-and-math-symbols" class="headerlink" title="List of Greek letters and math symbols"></a>List of Greek letters and math symbols</h4><h5 id="Greek-letters"><a href="#Greek-letters" class="headerlink" title="Greek letters"></a>Greek letters</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326143237666.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326143237666.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326143237666" style="zoom:67%;"><h5 id="Arrows"><a href="#Arrows" class="headerlink" title="Arrows"></a>Arrows</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326143323358.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326143323358.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326143323358" style="zoom: 67%;"><h5 id="Miscellaneous-symbols"><a href="#Miscellaneous-symbols" class="headerlink" title="Miscellaneous symbols"></a>Miscellaneous symbols</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326143344870.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326143344870.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326143344870" style="zoom:67%;"><h5 id="Binary-Operation-x2F-Relation-Symbols"><a href="#Binary-Operation-x2F-Relation-Symbols" class="headerlink" title="Binary Operation&#x2F;Relation Symbols"></a>Binary Operation&#x2F;Relation Symbols</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326143406653.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326143406653.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326143406653" style="zoom:50%;"><h4 id="Mathematical-fonts"><a href="#Mathematical-fonts" class="headerlink" title="Mathematical fonts"></a>Mathematical fonts</h4><h5 id="Introduction-6"><a href="#Introduction-6" class="headerlink" title="Introduction"></a>Introduction</h5><ul><li><p>Some mathematical elements need to be typeset using fonts containing characters&#x2F;symbols of a certain style;</p></li><li><p>For example, it is customary to represent real numbers with a blackboard bold font (such as RR), or topological spaces with calligraphic font (such as (TT). </p></li><li><p>This article shows how to use different font styles when typesetting mathematics, starting with the following example:</p></li></ul><pre class=" language-latex"><code class="language-latex">Let <span class="token equation string">\( <span class="token equation-command regex">\mathcal</span>&amp;#123;T&amp;#125; \)</span> be a topological space, a basis is defined as<span class="token equation string">\[ <span class="token equation-command regex">\mathcal</span>&amp;#123;B&amp;#125; = <span class="token equation-command regex">\&amp;</span>#123;B_&amp;#123;<span class="token equation-command regex">\alpha</span>&amp;#125; <span class="token equation-command regex">\in</span> <span class="token equation-command regex">\mathcal</span>&amp;#123;T&amp;#125;<span class="token equation-command regex">\,</span> |<span class="token equation-command regex">\,</span>  U = <span class="token equation-command regex">\bigcup</span> B_&amp;#123;<span class="token equation-command regex">\alpha</span>&amp;#125; <span class="token equation-command regex">\forall</span> U <span class="token equation-command regex">\in</span> <span class="token equation-command regex">\mathcal</span>&amp;#123;T&amp;#125; <span class="token equation-command regex">\&amp;</span>#125;\]</span></code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326143630035.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326143630035.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326143630035" style="zoom:67%;"><p>Use of some math font styles requires the line <code>\usepackage&#123;amssymb&#125;</code> to be added to the document preamble: see the <a href="https://ctan.org/pkg/amsfonts"><code>amsfonts</code> package</a> for further information.</p><h5 id="Capital-letters-only-font-typefaces"><a href="#Capital-letters-only-font-typefaces" class="headerlink" title="Capital letters-only font typefaces"></a>Capital letters-only font typefaces</h5><p>There are some font typefaces which support only a limited number of characters; these fonts usually denote some special sets. For instance, to display the R in blackboard bold typeface you can use <code>\(\mathbb&#123;R&#125;\)</code> to produce RR. The following example shows calligraphic, fraktur and blackboard bold typefaces:</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">&amp;</span>#123;article<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\usepackage</span><span class="token punctuation">&amp;</span>#123;amsmath<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\usepackage</span><span class="token punctuation">&amp;</span>#123;amssymb<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;align*<span class="token punctuation">&amp;</span>#125;RQSZ <span class="token function selector">\\</span><span class="token function selector">\mathcal</span><span class="token punctuation">&amp;</span>#123;RQSZ<span class="token punctuation">&amp;</span>#125; <span class="token function selector">\\</span><span class="token function selector">\mathfrak</span><span class="token punctuation">&amp;</span>#123;RQSZ<span class="token punctuation">&amp;</span>#125; <span class="token function selector">\\</span><span class="token function selector">\mathbb</span><span class="token punctuation">&amp;</span>#123;RQSZ<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;align*<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326143808843.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326143808843.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326143808843" style="zoom:50%;"><h3 id="Basic-Formatting"><a href="#Basic-Formatting" class="headerlink" title="Basic Formatting"></a>Basic Formatting</h3><p>We will now look at how to write abstracts, as well as how to format a LATEX document into different chapters, sections and paragraphs.</p><h4 id="Abstracts"><a href="#Abstracts" class="headerlink" title="Abstracts"></a>Abstracts</h4><ul><li><p>In scientific documents it’s a common practice to include a brief overview of the main subject of the paper. </p></li><li><p>In LATEX there’s the <strong><code>abstract</code></strong> environment for this. The <strong><code>abstract</code></strong> environment will put the text in a special format at the top of your document.</p></li></ul><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;abstract<span class="token punctuation">&amp;</span>#125;This is a simple paragraph at the beginning of the document. A brief introduction about the main subject.<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;abstract<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326144135203.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326144135203.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326144135203" style="zoom:67%;"><h4 id="Paragraphs-and-newlines"><a href="#Paragraphs-and-newlines" class="headerlink" title="Paragraphs and newlines"></a>Paragraphs and newlines</h4><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;abstract<span class="token punctuation">&amp;</span>#125;This is a simple paragraph at the beginning of the document. A brief introduction about the main subject.<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;abstract<span class="token punctuation">&amp;</span>#125; Now that we have written our abstract, we can begin writing our first paragraph. This line will start a second Paragraph.<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326144335705.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326144335705.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326144335705" style="zoom:50%;"><ul><li>When writing the contents of your document, if you need to start a new paragraph you must hit the “Enter” key twice (to insert a double blank line). Notice that LATEX automatically indents paragraphs.</li><li>To start a new line without actually starting a new paragraph insert a <em>break line</em> point, this can be done by <strong><code>\\</code></strong> (a double backslash as in the example) or the <strong><code>\newline</code></strong> command.</li><li>Care should be taken that multiple <code>\\</code> or <code>\newline</code>s are not used to “simulate” paragraphs with larger spacing between them, as this can interfere with LATEX’s typesetting algorithms. The recommended method to do so is to keep using double blank lines to create new paragraphs without any <code>\\</code>, and then add <strong><code>\usepackage&#123;parskip&#125;</code></strong> to the preamble.</li></ul><p>See official documents for more details</p><p><a href="https://cn.overleaf.com/learn/latex/Paragraphs_and_new_lines">Paragraphs and new lines</a></p><h3 id="Chapters-and-Sections"><a href="#Chapters-and-Sections" class="headerlink" title="Chapters and Sections"></a>Chapters and Sections</h3><p>Commands to organize a document vary depending on the document type, the simplest form of organization is the sectioning, available in all formats.</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\chapter</span><span class="token punctuation">&amp;</span>#123;First Chapter<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\section</span><span class="token punctuation">&amp;</span>#123;Introduction<span class="token punctuation">&amp;</span>#125;This is the first section.Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et neque pharetra sollicitudin.  Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...<span class="token function selector">\section</span><span class="token punctuation">&amp;</span>#123;Second Section<span class="token punctuation">&amp;</span>#125;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra sollicitudin.  Praesent imperdiet mi necante...<span class="token function selector">\subsection</span><span class="token punctuation">&amp;</span>#123;First Subsection<span class="token punctuation">&amp;</span>#125;Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...<span class="token function selector">\section*</span><span class="token punctuation">&amp;</span>#123;Unnumbered Section<span class="token punctuation">&amp;</span>#125;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Etiam lobortis facilisissem</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326144944551.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326144944551.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326144944551" style="zoom:67%;"><ul><li>The command <strong><code>\section&#123;&#125;</code></strong> marks the beginning of a new section, inside the braces is set the title. </li><li>Section numbering is automatic and can be disabled by including a <strong><code>\*</code></strong> in the section command as <strong><code>\section\*&#123;&#125;</code></strong>. </li><li>We can also have **<code>\subsection&#123;&#125;</code>**s, and indeed **<code>\subsubsection&#123;&#125;</code>**s. The basic levels of depth are listed below:</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326145056758.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326145056758.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326145056758" style="zoom:67%;"><p>Note that <strong><code>\part</code></strong> and <strong><code>\chapter</code></strong> are only available in <em>report</em> and <em>book</em> document classes.</p><p>For a more complete discussion about the document structure see the <a href="https://cn.overleaf.com/learn/latex/Sections_and_chapters">article about sections and chapters</a>.</p><h3 id="Creating-tables"><a href="#Creating-tables" class="headerlink" title="Creating tables"></a>Creating tables</h3><h4 id="Creating-a-simple-table-in-LATEX"><a href="#Creating-a-simple-table-in-LATEX" class="headerlink" title="Creating a simple table in LATEX"></a>Creating a simple table in LATEX</h4><p>Below you can see the simplest working example of a table</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;center<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;tabular<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">&amp;</span>#123; c c c <span class="token punctuation">&amp;</span>#125; cell1 <span class="token punctuation">&amp;</span> cell2 <span class="token punctuation">&amp;</span> cell3 <span class="token function selector">\\</span>  cell4 <span class="token punctuation">&amp;</span> cell5 <span class="token punctuation">&amp;</span> cell6 <span class="token function selector">\\</span>   cell7 <span class="token punctuation">&amp;</span> cell8 <span class="token punctuation">&amp;</span> cell9    <span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;tabular<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;center<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326145206465.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326145206465.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326145206465" style="zoom:67%;"><ul><li>The <strong><code>tabular</code></strong> environment is the default LATEX method to create tables. </li><li>You must specify a parameter to this environment, in this case <strong><code>&#123;c c c&#125;</code></strong>. This tells LATEX that there will be three columns and that the text inside each one of them must be centred. </li><li>You can also use <strong><code>r</code></strong> to align the text to the right and <strong><code>l</code></strong> for left alignment. The alignment symbol <strong><code>&amp;</code></strong> is used to specify the breaks in the table entries. <strong><u>There must always be one less alignment symbol in each line than the number of columns.</u></strong></li><li>To go to the next line of your table, we use the <em>new line</em> command <strong><code>\\</code></strong>. We wrap the entire table inside the <strong><code>center</code></strong> environment so that it will appear in the center of the page.</li></ul><h4 id="Adding-borders"><a href="#Adding-borders" class="headerlink" title="Adding borders"></a>Adding borders</h4><p>The <em>tabular</em> environment is more flexible, you can put separator lines in between each column.</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;center<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;tabular<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">&amp;</span>#123; |c|c|c| <span class="token punctuation">&amp;</span>#125;  <span class="token function selector">\hline</span> cell1 <span class="token punctuation">&amp;</span> cell2 <span class="token punctuation">&amp;</span> cell3 <span class="token function selector">\\</span>  cell4 <span class="token punctuation">&amp;</span> cell5 <span class="token punctuation">&amp;</span> cell6 <span class="token function selector">\\</span>  cell7 <span class="token punctuation">&amp;</span> cell8 <span class="token punctuation">&amp;</span> cell9 <span class="token function selector">\\</span>  <span class="token function selector">\hline</span><span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;tabular<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;center<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326145515176.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326145515176.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326145515176" style="zoom:67%;"><p>You can add borders using the horizontal line command <strong><code>\hline</code></strong> and the vertical line parameter <strong><code>|</code></strong>.</p><ul><li><p><strong><code>&#123; |c|c|c| &#125;</code></strong>: This declares that three columns, separated by a vertical line, are going to be used in the table. The <strong><code>|</code></strong> symbol specifies that these columns should be separated by a vertical line.</p></li><li><p><strong><code>\hline</code></strong>: This will insert a horizontal line. We have included horizontal lines at the top and bottom of the table here. There is no restriction on the number of times you can use <strong><code>\hline</code></strong>.</p></li></ul><p>Below you can see a second example.</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;center<span class="token punctuation">&amp;</span>#125; <span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;tabular<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">&amp;</span>#123;||c c c c||<span class="token punctuation">&amp;</span>#125;  <span class="token function selector">\hline</span> Col1 <span class="token punctuation">&amp;</span> Col2 <span class="token punctuation">&amp;</span> Col2 <span class="token punctuation">&amp;</span> Col3 <span class="token function selector">\\</span> <span class="token punctuation">[</span>0.5ex<span class="token punctuation">]</span>  <span class="token function selector">\hline</span><span class="token function selector">\hline</span> 1 <span class="token punctuation">&amp;</span> 6 <span class="token punctuation">&amp;</span> 87837 <span class="token punctuation">&amp;</span> 787 <span class="token function selector">\\</span>  <span class="token function selector">\hline</span> 2 <span class="token punctuation">&amp;</span> 7 <span class="token punctuation">&amp;</span> 78 <span class="token punctuation">&amp;</span> 5415 <span class="token function selector">\\</span> <span class="token function selector">\hline</span> 3 <span class="token punctuation">&amp;</span> 545 <span class="token punctuation">&amp;</span> 778 <span class="token punctuation">&amp;</span> 7507 <span class="token function selector">\\</span> <span class="token function selector">\hline</span> 4 <span class="token punctuation">&amp;</span> 545 <span class="token punctuation">&amp;</span> 18744 <span class="token punctuation">&amp;</span> 7560 <span class="token function selector">\\</span> <span class="token function selector">\hline</span> 5 <span class="token punctuation">&amp;</span> 88 <span class="token punctuation">&amp;</span> 788 <span class="token punctuation">&amp;</span> 6344 <span class="token function selector">\\</span> <span class="token punctuation">[</span>1ex<span class="token punctuation">]</span>  <span class="token function selector">\hline</span><span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;tabular<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;center<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326145638833.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326145638833.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326145638833" style="zoom:67%;"><ul><li>Creating tables in LATEX can be a bit tricky sometimes, so you may want to use the <a href="https://www.tablesgenerator.com/">TablesGenerator.com</a> </li><li>online tool to export LATEX code for tabulars. <strong><u>The <em>File &gt; Paste table data</em> option lets you copy and paste data from spreadsheet applications.</u></strong></li></ul><h3 id="Captions-labels-and-references-1"><a href="#Captions-labels-and-references-1" class="headerlink" title="Captions, labels and references"></a>Captions, labels and references</h3><p>You can caption and reference tables in much the same way as images. The only difference is that instead of the <strong><code>figure</code></strong> environment, you use the <strong><code>table</code></strong> environment.</p><pre class=" language-latex"><code class="language-latex">Table <span class="token function selector">\ref</span><span class="token punctuation">&amp;</span>#123;table:data<span class="token punctuation">&amp;</span>#125; is an example of referenced <span class="token function selector">\LaTeX</span><span class="token punctuation">&amp;</span>#123;<span class="token punctuation">&amp;</span>#125; elements.<span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;table<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">[</span>h!<span class="token punctuation">]</span><span class="token function selector">\centering</span><span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;tabular<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">&amp;</span>#123;||c c c c||<span class="token punctuation">&amp;</span>#125;  <span class="token function selector">\hline</span> Col1 <span class="token punctuation">&amp;</span> Col2 <span class="token punctuation">&amp;</span> Col2 <span class="token punctuation">&amp;</span> Col3 <span class="token function selector">\\</span> <span class="token punctuation">[</span>0.5ex<span class="token punctuation">]</span>  <span class="token function selector">\hline</span><span class="token function selector">\hline</span> 1 <span class="token punctuation">&amp;</span> 6 <span class="token punctuation">&amp;</span> 87837 <span class="token punctuation">&amp;</span> 787 <span class="token function selector">\\</span>  2 <span class="token punctuation">&amp;</span> 7 <span class="token punctuation">&amp;</span> 78 <span class="token punctuation">&amp;</span> 5415 <span class="token function selector">\\</span> 3 <span class="token punctuation">&amp;</span> 545 <span class="token punctuation">&amp;</span> 778 <span class="token punctuation">&amp;</span> 7507 <span class="token function selector">\\</span> 4 <span class="token punctuation">&amp;</span> 545 <span class="token punctuation">&amp;</span> 18744 <span class="token punctuation">&amp;</span> 7560 <span class="token function selector">\\</span> 5 <span class="token punctuation">&amp;</span> 88 <span class="token punctuation">&amp;</span> 788 <span class="token punctuation">&amp;</span> 6344 <span class="token function selector">\\</span> <span class="token punctuation">[</span>1ex<span class="token punctuation">]</span>  <span class="token function selector">\hline</span><span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;tabular<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\caption</span><span class="token punctuation">&amp;</span>#123;Table to test captions and labels<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\label</span><span class="token punctuation">&amp;</span>#123;table:data<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;table<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326150029813.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326150029813.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326150029813" style="zoom: 50%;"><p><em>Note: If you are using captions and references on your own computer, you will have to compile the document twice for the references to work. Overleaf will do this for you automatically.’</em></p><h3 id="Adding-a-Table-of-Contents"><a href="#Adding-a-Table-of-Contents" class="headerlink" title="Adding a Table of Contents"></a>Adding a Table of Contents</h3><p>To create the table of contents is straightforward, the command <strong><code>\tableofcontents</code></strong> does all the work for you:</p><pre class=" language-latex"><code class="language-latex"><span class="token function selector">\documentclass</span><span class="token punctuation">&amp;</span>#123;article<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\usepackage</span><span class="token punctuation">[</span>utf8<span class="token punctuation">]</span><span class="token punctuation">&amp;</span>#123;inputenc<span class="token punctuation">&amp;</span>#125; <span class="token function selector">\title</span><span class="token punctuation">&amp;</span>#123;Sections and Chapters<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\author</span><span class="token punctuation">&amp;</span>#123;Gubert Farnsworth<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\date</span><span class="token punctuation">&amp;</span>#123; <span class="token punctuation">&amp;</span>#125;  <span class="token function selector">\begin</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;  <span class="token function selector">\maketitle</span>  <span class="token function selector">\tableofcontents</span><span class="token function selector">\section</span><span class="token punctuation">&amp;</span>#123;Introduction<span class="token punctuation">&amp;</span>#125;   This is the first section.      Lorem  ipsum  dolor  sit  amet,  consectetuer  adipiscing  elit.   Etiam  lobortisfacilisis sem.  Nullam nec mi et neque pharetra sollicitudin.  Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales...       <span class="token function selector">\section*</span><span class="token punctuation">&amp;</span>#123;Unnumbered Section<span class="token punctuation">&amp;</span>#125;<span class="token function selector">\addcontentsline</span><span class="token punctuation">&amp;</span>#123;toc<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">&amp;</span>#123;section<span class="token punctuation">&amp;</span>#125;<span class="token punctuation">&amp;</span>#123;Unnumbered Section<span class="token punctuation">&amp;</span>#125;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra sollicitudin.  Praesent imperdiet mi necante...<span class="token function selector">\section</span><span class="token punctuation">&amp;</span>#123;Second Section<span class="token punctuation">&amp;</span>#125;       Lorem ipsum dolor sit amet, consectetuer adipiscing elit.  Etiam lobortis facilisissem.  Nullam nec mi et neque pharetra sollicitudin.  Praesent imperdiet mi necante...         <span class="token function selector">\end</span><span class="token punctuation">&amp;</span>#123;document<span class="token punctuation">&amp;</span>#125;</code></pre><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326150254843.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326150254843.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326150254843" style="zoom:50%;"><p>Sections, subsections and chapters are automatically included in the table of contents. To manually add entries, for example when you want an unnumbered section, use the command <strong><code>\addcontentsline</code></strong> as shown in the example.</p>]]></content>
      
      
      <categories>
          
          <category> latex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database system(C2)</title>
      <link href="/2022/03/03/Database-system-C2/"/>
      <url>/2022/03/03/Database-system-C2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="chapter2-Introduction-to-relation-model"><a href="#chapter2-Introduction-to-relation-model" class="headerlink" title="chapter2 Introduction to relation model"></a>chapter2 Introduction to relation model</h1><h2 id="outline"><a href="#outline" class="headerlink" title="outline"></a>outline</h2><ul><li>Structure of Relation Database</li><li>Database Schema</li><li>keys, integrity constrains</li><li>Schema Diagram</li><li>Relational Query Languages</li><li>The Relational Algebra</li></ul><h3 id="Data-model"><a href="#Data-model" class="headerlink" title="Data model"></a>Data model</h3><p>Purpose: To represent data in an understandable way</p><p>Define: Integrated collection of concepts for describing data, relationships between data, and constraints on the data in an organization</p><p><strong>Data Model comprises:</strong></p><ul><li>A structural part</li><li>Possibly a set of integrity rules</li><li>a manipulative part</li></ul><h2 id="Relational-Model"><a href="#Relational-Model" class="headerlink" title="Relational Model"></a>Relational Model</h2><h3 id="Mathematical-Definition-of-Relation"><a href="#Mathematical-Definition-of-Relation" class="headerlink" title="Mathematical Definition of Relation"></a>Mathematical Definition of Relation</h3><ul><li><p>Formally, given sets D1, D2, …Dn</p><p>A relation r is a subset of D1*D2…*Dn</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>database system(W2)</title>
      <link href="/2022/03/03/database-system-C1/"/>
      <url>/2022/03/03/database-system-C1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Database-system"><a href="#Database-system" class="headerlink" title="Database system"></a>Database system</h1><h3 id="preview"><a href="#preview" class="headerlink" title="preview"></a>preview</h3><p>The benefits of database: </p><ul><li>control redundancy</li><li>share</li><li>maintain data integrity</li><li>allow data independence</li><li>perform automatic query optimization</li><li>allow concurrency</li><li>provide for backup and recovery</li><li>control security</li></ul><h3 id="Abstract-model"><a href="#Abstract-model" class="headerlink" title="Abstract model"></a>Abstract model</h3><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220303091944959.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220303091944959.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220303091944959" style="zoom: 33%;"><p><strong>Conceptual model(information model for DB design):</strong></p><ul><li>Entity-Relationship data model (mainly for database design)</li></ul><p><strong>Machine model(include logical and physical model)</strong></p><ul><li>logical model:<ul><li>Network model<ul><li>Hierarchical model</li></ul></li><li>relational model</li><li>Object-based data models(Object-oriented and Object-relational)</li><li>Semistructured data model</li><li>Unstructured model</li></ul></li><li>physical model:</li><li>Describe how data is stored and accessed in the system</li></ul><h2 id="3-chapter3-Introduction-to-SQL"><a href="#3-chapter3-Introduction-to-SQL" class="headerlink" title="3.chapter3 Introduction to SQL"></a>3.chapter3 Introduction to SQL</h2><h3 id="Preview"><a href="#Preview" class="headerlink" title="Preview:"></a>Preview:</h3><ul><li>Overview of SQL Query Language</li><li>Data Definition Language(DDL)</li><li>Data manipulation Language<ul><li>Modification of the Database</li><li>Basic Query Structure</li><li>Additional Basic Operations </li><li>Set Operationals</li><li>Null values</li><li>Aggregate Functions</li><li>Nested Subqueries</li></ul></li></ul><h3 id="1-Overview-of-SQL"><a href="#1-Overview-of-SQL" class="headerlink" title="1 Overview of SQL"></a>1 Overview of SQL</h3><h4 id="1-1-History"><a href="#1-1-History" class="headerlink" title="1.1 History"></a>1.1 History</h4><ul><li>IBM Sequel language developed as part of system R project at the IBM San Jose Research Laboratory</li><li>Renamed Structured Query Language(SQL)</li><li>ANSI and ISO standard SQL<ul><li>SQL-86, SQL-89, SQL-92</li><li>SQL:1999, SQL:2003, SQL:2008</li><li>Commercial systems offer most, if not all, SQL-92 features plus varying feature sets from later standards and special proprietary festures</li></ul></li></ul><h4 id="1-2-SQL-Parts"><a href="#1-2-SQL-Parts" class="headerlink" title="1.2 SQL Parts"></a>1.2 SQL Parts</h4><ul><li>DDL: allows the specification of information about relations schema</li><li>DML: provide the ability to query information from the database and to insert tuples into, delete tuples from, and modify tuples in the database</li><li>integrity: the DDL includes commands for specifying integrity constraints</li><li>View definitionL The DDl includes commands for defining views</li><li>Autorization: includes commands for specifying accsee rights to relations and views</li><li>Embedded SQL and dynamic SQL: define how SQL statements can be embedded within general-purpose programming languages</li><li>Transaction control: includes commands for specifying the beginning and ending of transactions</li></ul><h3 id="2-Data-Definition-language"><a href="#2-Data-Definition-language" class="headerlink" title="2. Data Definition language"></a>2. Data Definition language</h3><h4 id="2-1-Definition"><a href="#2-1-Definition" class="headerlink" title="2.1 Definition"></a>2.1 Definition</h4><p><strong>The SQL data-definition language(DDL) allows the specification of information about relations</strong></p><p>including:</p><ul><li>The domain of values associated with each attribute</li><li>The schema for each relation</li><li>Integrity constrains</li><li>And as we will see later, also other information such as<ul><li>Security and authorization information for each relation</li><li>The set of indices to be maintained for each relations</li><li>The physical storage structure of each relation on disk</li></ul></li></ul><p>Use DDL to create schemas of a database</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313170857633.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313170857633.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220313170857633" style="zoom: 33%;"><h4 id="2-2-Domain-Types-in-SQL"><a href="#2-2-Domain-Types-in-SQL" class="headerlink" title="2.2 Domain Types in SQL"></a>2.2 Domain Types in SQL</h4><ul><li>char: Fixed length character string, with user-specified length n.</li><li>varchar: variable length character strings with user-specified maximum length n</li><li>int: Integer(A finite subset of the integers that is machine dependent)</li><li>smallint: Small integer</li><li>numeric(p,d): Fixed point number, with user-specified precision of <strong>p</strong> digits, with <strong>n</strong> digits to the right of decimal point</li><li>real, double precision: Flaoting poinit and double-precision floating point numbers, with machine-dependent precision</li><li>float</li></ul><p>Example:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313171704249.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313171704249.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220313171704249" style="zoom: 33%;"><h4 id="2-3-Operate-Table-Construct"><a href="#2-3-Operate-Table-Construct" class="headerlink" title="2.3 Operate Table Construct"></a>2.3 Operate Table Construct</h4><p><strong>Create the table</strong></p><ul><li>An SQL relation is defined using the create table command</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313171905177.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313171905177.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220313171905177" style="zoom:33%;"><ul><li>r is the name of the relation</li><li>each Ai is an attribute name in the schema of relation r</li><li>Di is the data type of values in the domain of attribute Ai</li></ul><p>Integrity constraint in create Table</p><ul><li>primary key(A1…AN)</li><li>foreign key(Am…An) reference r</li><li>not NULL</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313172630484.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313172630484.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220313172630484" style="zoom: 33%;"><p><strong>Drop and alter Table Constructs</strong></p><ul><li><p>drop table </p><p>Delete the table and its contents</p></li><li><p>alter table R</p><p>alter table r add A D</p><ul><li>where A is the name of the attribute to be added to relation r and D is the domain of A</li><li>All tuples in the relation are assigned null as the value for the new attribute</li></ul></li><li><p>alter table r drop A</p><ul><li>where A is the name of an attribute of relation r</li><li>Dropping of attributes not supported by many database</li></ul></li></ul><h3 id="3-Data-Manipulation-language-DML"><a href="#3-Data-Manipulation-language-DML" class="headerlink" title="3. Data Manipulation language(DML)"></a>3. Data Manipulation language(DML)</h3><h4 id="3-1-Definition"><a href="#3-1-Definition" class="headerlink" title="3.1 Definition"></a>3.1 Definition</h4><ul><li><p>The SQL data-manipulation language(DML) provides the ability to </p><p>**Insert, delete and update tuples **</p><ul><li>Insertion of new tuples into a given relation</li><li>Deletion of tuples from a given relation</li><li>Updating values in some tuples in a given relation</li></ul></li><li><p>query information</p><ul><li>Basic Query Structure</li><li>Additional Basic Operations</li><li>NULL values</li><li>Aggregate function</li><li>Nested Subqueries</li></ul></li></ul><h4 id="3-2-Modification-of-the-Database"><a href="#3-2-Modification-of-the-Database" class="headerlink" title="3.2 Modification of the Database"></a>3.2 Modification of the Database</h4><p>Insertion:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313173957807.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313173957807.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220313173957807" style="zoom: 33%;"><p>Deletion</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313174020882.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313174020882.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220313174020882" style="zoom: 33%;"><p>Updates:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313174046457.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313174046457.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220313174046457" style="zoom: 33%;"><h4 id="3-3-Basic-Query-structure"><a href="#3-3-Basic-Query-structure" class="headerlink" title="3.3 Basic Query structure"></a>3.3 Basic Query structure</h4><p>A typical SQL query has the form:</p><p>​          SELECT A1,A2,…,An</p><p>​          FROM r1,r2,…,rn</p><p>​          WHERE P</p><ul><li>Ai represents an attribute</li><li>Ri represents a relation</li><li>P is a predicate</li></ul><p>The result of an SQL query is a relation</p><p>Basic Clause:</p><ul><li>select clause</li><li>where clause</li><li>from clause</li></ul><p>Cartesian Product:</p><ul><li>joins</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313174954622.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313174954622.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220313174954622" style="zoom:33%;"><ul><li>Natural join</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313175026668.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313175026668.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220313175026668" style="zoom:33%;"><p><strong>String Operations:</strong></p><p>SQL includes a string-matching operator for comparisons on character strings. The operator “like” uses patterns that are described using two special characters</p><ul><li>percent(%) The % character matches any character.</li><li>underscore(_) The _ character matches any character</li></ul><p>Examples:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313175900987.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313175900987.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220313175900987" style="zoom:33%;"><h4 id="3-4-Set-Operations"><a href="#3-4-Set-Operations" class="headerlink" title="3.4 Set Operations"></a>3.4 Set Operations</h4><ul><li><p>Set operations union, intersect, and execpt</p><ul><li>Each of the above operations automatically eliminates duplicates</li></ul></li><li><p>To retain duplicates use the corresponding multiset version union all, intersect all and except all .</p><p>Suppose a tuple occurs m times, and n times in s, then, it occurs:</p><ul><li>m+n times in r union all s</li><li>min{m,n} times in r intersect all s</li><li>max{0,m-n} times in r except all s</li></ul></li></ul><h4 id="3-5-NULL-values"><a href="#3-5-NULL-values" class="headerlink" title="3.5 NULL values"></a>3.5 NULL values</h4><ul><li>It is possible for tuples to have null value, denoted by null for some of their attributes</li><li><strong>null</strong> signifies an unknown value or that a value does not exist</li><li>The result of any arithmetic expression involving null is null: 5+null&#x3D;null</li><li><strong>The predicate is null can be used to check for null values</strong></li><li><strong>The predicate is not null succeeds if the value on which it is applied is not null</strong></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313181006727.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313181006727.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220313181006727" style="zoom:33%;"><ul><li><p>SQL treats as unknown the result of any comparison involving a null value(other than predicates is null and is not null)</p><p>5&lt;null or null&lt;&gt;null or null&#x3D;null</p></li><li><p>The predicate in a where clause an involve Boolean operations(and,or,not); Thus the definitions of the Boolean operations need to be extended to deal with the value unknown</p></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313181441902.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220313181441902.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220313181441902" style="zoom:33%;"><h4 id="3-6-Aggregate-Functions"><a href="#3-6-Aggregate-Functions" class="headerlink" title="3.6 Aggregate Functions"></a>3.6 Aggregate Functions</h4><ul><li><p>These functions</p><p>operate on the multiset of values of a column of a relation and return a value</p><ol><li>count: number of values</li><li>avg: average of value</li><li>sum: sum of values</li><li>min minimum value</li><li>max: maximum value</li></ol></li></ul><p>Example:</p><ul><li>Find the total number of instructors who teach a course in the spring 2010 semester</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>distinctID<span class="token punctuation">)</span><span class="token keyword">from</span> teaches<span class="token keyword">where</span> semester <span class="token operator">=</span> <span class="token string">"spring"</span> <span class="token operator">and</span> year <span class="token operator">=</span><span class="token number">2017</span></code></pre><ul><li>Find the number of tuples in the course relation</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token keyword">from</span> course</code></pre><p>Add: sql is not allowed in the count(*) with a “distinct”</p><h5 id="Aggregate-functions-Group-by"><a href="#Aggregate-functions-Group-by" class="headerlink" title="Aggregate functions - Group by"></a>Aggregate functions - Group by</h5><p>Find the average salary of instructions in each department</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> dept_name<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>salar<span class="token punctuation">)</span>form instructor<span class="token keyword">group</span> <span class="token keyword">by</span> dept_name</code></pre><p>Note1: departments with no instructor will not appear in result</p><p>note2: Attributes in <strong>select</strong> clause outside of aggregate functions must appear in <strong>group by</strong> list</p><p>Aggregate Functions - Having clause</p><ul><li>Find the names and average salaries of all departments whose average salary is greater than 42000</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> dept_name<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>salar<span class="token punctuation">)</span><span class="token keyword">from</span> instructor <span class="token keyword">group</span> <span class="token keyword">by</span> dept_name<span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">42000</span></code></pre><p>Note:</p><p><strong>Predicates in the having clause are applied after the formation of group</strong></p><p>Whereas predicates in the where clause are applied before forming groups</p><h5 id="Aggregate-Functions-NULL"><a href="#Aggregate-Functions-NULL" class="headerlink" title="Aggregate Functions - NULL"></a>Aggregate Functions - NULL</h5><ul><li>Aggregation function according to the following principles to handle null<ul><li>In addition to the count of every other aggregation function ignore</li></ul></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> dept_name<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>form instruuctor <span class="token keyword">where</span> salary <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">or</span> dept_name <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token keyword">group</span> <span class="token keyword">by</span> dept_name<span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">42000</span>    </code></pre><ul><li>If attending the operation input values is null<ul><li>Count(null): return 0</li><li>Other aggregate functions: return null</li></ul></li></ul><h2 id="4-chapter4-Intermediate-SQL–1"><a href="#4-chapter4-Intermediate-SQL–1" class="headerlink" title="4. chapter4 Intermediate SQL–1"></a>4. chapter4 Intermediate SQL–1</h2><h3 id="outline"><a href="#outline" class="headerlink" title="outline"></a>outline</h3><ul><li>join Expressions</li><li>views</li><li>transactions</li><li>Integrity constraints</li><li>SQL Data Types and schemas</li><li>Index Definition in SQL</li><li>Authorization</li></ul><h3 id="1-join-Expressions"><a href="#1-join-Expressions" class="headerlink" title="1 join Expressions"></a>1 join Expressions</h3><h3 id="2-views"><a href="#2-views" class="headerlink" title="2 views"></a>2 views</h3><h4 id="2-1-Why-views"><a href="#2-1-Why-views" class="headerlink" title="2.1 Why views?"></a>2.1 Why views?</h4><ul><li>In some cases, it is not desirable for all users to see the entire logical model(conceptual schema)(that is, all the actual relations stored in the database)</li><li>Any relation that is not of the conceptual model, but is made visible to a user as a “virtual relation”</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220331091403832.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220331091403832.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220331091403832" style="zoom: 50%;"><h4 id="2-2-view-Definition"><a href="#2-2-view-Definition" class="headerlink" title="2.2 view Definition"></a>2.2 view Definition</h4><ul><li><p>A view  is defined using the create view statement which has the form</p><p>create view name as (query expression)</p><ul><li>where (query expression) is any legal SQL expression</li></ul></li><li><p>Once a view is defined, the view name can be used to refer to “the virtual relation” that view generates</p></li><li><p>view definition is not the same as creating a new relation by evaluating the query expression</p><ul><li>The database stores only the definition of the view</li><li>view the virtual relationship is not calculated in advance and store data, only when use calculated(data appear)</li></ul></li></ul><h5 id="View-Definition-and-use"><a href="#View-Definition-and-use" class="headerlink" title="View Definition and use"></a>View Definition and use</h5><ul><li><p>Definition</p><p>A view of instructions without their salary</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> faculty <span class="token keyword">as</span> <span class="token keyword">select</span> ID<span class="token punctuation">,</span> name<span class="token punctuation">,</span> dept_name<span class="token keyword">from</span> instructor</code></pre></li><li><p>Use</p><p>Find all instructors in the Biology department from view faculty</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> name<span class="token keyword">from</span> faculty<span class="token keyword">where</span> dept_name <span class="token operator">=</span> <span class="token string">"Biology"</span></code></pre></li></ul><h5 id="Views-Defined-using-Other-Views"><a href="#Views-Defined-using-Other-Views" class="headerlink" title="Views Defined using Other Views"></a>Views Defined using Other Views</h5><ul><li><p>One view may be used in the expression defining another view</p></li><li><p>A view relation v1 is said to depend directly on a view relation v2 if v2 is used in the expression defining v1</p></li><li><p>A view relation v1 is said to depend on view relation v2 if either v1 depends directly to v2 or there is a path of dependencies form v1 to v2</p><p>Example:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> physics_fall_2017 <span class="token keyword">as</span><span class="token keyword">select</span> course<span class="token punctuation">.</span>course<span class="token punctuation">.</span>id<span class="token punctuation">,</span> sec_id<span class="token punctuation">,</span> building<span class="token punctuation">,</span> room_numberform course<span class="token punctuation">,</span> section<span class="token keyword">where</span> course<span class="token punctuation">.</span>course_id <span class="token operator">=</span> section<span class="token punctuation">.</span>course<span class="token punctuation">.</span>id      <span class="token operator">and</span> course<span class="token punctuation">.</span>dept_name <span class="token operator">=</span> <span class="token string">"Physics"</span>      <span class="token operator">and</span> section<span class="token punctuation">.</span>semester <span class="token operator">=</span> <span class="token string">"Fall"</span>      <span class="token operator">and</span> section<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token string">"2017"</span>     <span class="token keyword">create</span> <span class="token keyword">view</span> physics_fall_2017_watson <span class="token keyword">as</span><span class="token keyword">select</span> course_id<span class="token punctuation">,</span> room_number<span class="token keyword">from</span> physics_fall_2017<span class="token keyword">where</span> buliding <span class="token operator">=</span> <span class="token string">"watson"</span></code></pre></li></ul><h4 id="2-3-Materialized-views"><a href="#2-3-Materialized-views" class="headerlink" title="2.3 Materialized views"></a>2.3 Materialized views</h4><ul><li>certain database systems allow view relations to be physically stored<ul><li>Physical copy created when the view is defined. Such views are called Materialized view</li><li>Materialized view much faster by using the precomputed view result instead of recomputing it</li><li>If relations used in the query are updated, the materialized view result becomes out of date<ul><li>Need to maintain the view, by updating the view whenever the underlying relations are updated</li></ul></li></ul></li></ul><h4 id="2-4-view-updates-in-SQL"><a href="#2-4-view-updates-in-SQL" class="headerlink" title="2.4 view updates in SQL"></a>2.4 view updates in SQL</h4><ul><li>Most SQL implementations allows updates only on “simple views”<ul><li>The from clause has only one database relation</li><li>The select clause contains only attribute names of the relation, and does not have any expressions, aggregates, or distinct specification.</li><li>Any attribute not listed in the select clause can be set to null</li><li>The query does not have a group by or having clause</li></ul></li></ul><h3 id="3-transaction"><a href="#3-transaction" class="headerlink" title="3. transaction"></a>3. transaction</h3><ul><li>A transaction consists of a sequence of “query and&#x2F;or update statements” and is a unit of work</li><li>The SQL standard specifies that<ul><li>A transaction begins implicitly<ul><li>when an SQL statement is executed</li></ul></li><li>The transaction must end with one of the following statements:<ul><li>commit work: The updates performed by the transaction become permanent in the database.</li><li>rollback work. All the updates performed by the SQL statements in the transaction are undone</li></ul></li></ul></li></ul><h5 id="ACID-of-transaction"><a href="#ACID-of-transaction" class="headerlink" title="ACID of transaction"></a>ACID of transaction</h5><ul><li><p>Atomic </p><ul><li>either fully executed or rolled back as if it never occurred</li><li>Either all operation of the transaction are reflected properly in the database, or none are.</li></ul></li><li><p>Isolation </p><ul><li><p>Even though multiple transactions may execute concurrently the system guarantees that</p><ul><li><p>for every pair of transactions Ti and Tj, it appears to Ti that</p><p>either Tj finished execution before Ti started</p><p>or Tj started execution after Ti finished</p></li></ul></li></ul></li><li><p>consistency </p><ul><li>Execution of a transaction in isolation(with no other transaction executing concurrently) preserves the consistency of the database</li></ul></li><li><p>Durability</p><ul><li>After a transaction completes successfully, the changes it has made to the database persist, even if there are system failures</li></ul></li></ul><h3 id="4-Integrity-contraints"><a href="#4-Integrity-contraints" class="headerlink" title="4.Integrity contraints"></a>4.Integrity contraints</h3><ul><li>Integrity constraints guard against accidental damage to the database, by ensuring that authorized changes to the database do not result in a loss of the data consistency</li></ul><p>example:</p><ul><li>A checking account must have a balance greater than $10000000</li><li>A salary of a bank employee must be at least $400 an hour</li><li>A customer must have a(non-null) phone number</li></ul><h4 id="4-1-constraints-on-a-single-relation"><a href="#4-1-constraints-on-a-single-relation" class="headerlink" title="4.1 constraints on a single relation"></a>4.1 constraints on a single relation</h4><ul><li><p>not null </p><ul><li><p>Declare name and budget to be bull </p><p>name varchar(20) not null</p><p>budget numeric(12,2) not null</p></li></ul></li><li><p>primary key</p><ul><li>ID varchar(8) primary key</li></ul></li><li><p>unique(A1,A2,…,Am)</p><ul><li>The unique specification states that the attributes A1,A2,…,Am from a candidate key</li><li>Candidate keys are permitted to be null (in contrast to primary keys)</li></ul></li></ul><p>The check clause</p><p>The check(P) clause specifies a predicate P that must be satisfied by every tuple in a relayion</p><p>Example:</p><p>Ensure that semester is one of fall, winter spring or summer</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> section<span class="token punctuation">(</span>course_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sec_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>semester <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>year <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>building <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>room_number <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>time_slot id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>course_id<span class="token punctuation">,</span>sec_id<span class="token punctuation">,</span>semester<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">check</span><span class="token punctuation">(</span>semester <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">"Fall"</span><span class="token punctuation">,</span><span class="token string">"Winter"</span><span class="token punctuation">,</span><span class="token string">"spring"</span><span class="token punctuation">,</span><span class="token string">"summer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="4-2-Reference-integrity"><a href="#4-2-Reference-integrity" class="headerlink" title="4.2 Reference integrity"></a>4.2 Reference integrity</h4><ul><li><p>Ensures that value that appears in one relation for given set of attributes, also appears for a certain set of attributes in another relation</p></li><li><p>Foreign keys can be specified as part of the SQL create table statement</p><p>foreign key(dept_name) references department</p></li><li><p>By default, a foreign key references the primary_key attributes of the referenced table</p></li><li><p>SQL allow a list of attributes of the referenced relation to be specified explicitly</p><p>foreign key(building, room_number)</p><p>​     references classroom(building, room_number)</p></li></ul><h5 id="Cascading-Actions-in-Referential-Integrity"><a href="#Cascading-Actions-in-Referential-Integrity" class="headerlink" title="Cascading Actions in Referential Integrity"></a>Cascading Actions in Referential Integrity</h5><p>cascade: Update&#x2F;delete records on the parent table, synchronous update&#x2F;delete child table</p><ul><li><p>When a referential-integrity constraint is violated</p><ul><li>The normal procedure is to reject the action that caused the violation</li><li>An alternative, in case of delete or update is to cascade</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> course<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>dept_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>dept_name<span class="token punctuation">)</span> <span class="token keyword">references</span> department                       <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span>                       <span class="token keyword">on</span> uodate <span class="token keyword">cascade</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>In stead of cascade we can use: set null or set default</li></ul></li></ul><h5 id="violation"><a href="#violation" class="headerlink" title="violation"></a>violation</h5><p>Integrity constraint violation During transactions</p><p>Example: consider relation</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220331110358762.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220331110358762.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220331110358762" style="zoom:50%;"><ul><li>How to insert  a tuple without causing constraint violation?<ul><li>Insert father and mother of a person before inserting person</li><li>OR, set father and mother to mull initially, update after inserting all persons (not possible if father and mother attributes declared to be not null)</li><li>OR, defer constraint checking</li></ul></li></ul><h5 id="Assertion"><a href="#Assertion" class="headerlink" title="Assertion"></a>Assertion</h5><ul><li><p>An assertion is a predicate expressing a condition that we wish the database always to satisfy.</p></li><li><p>An assertion in SQL takes the form:</p><p>create assertion (assertion-name) check (<predicate>)</predicate></p></li><li><p>Example(ref book)</p><ul><li>For each tuple in the student relation, the value of the attribute tot_cred must equal the sum of credits of courses that student has completed successfully</li></ul></li><li><p>Using “trigger” instead of assertion</p></li></ul><h3 id="5-SQL-Data-Types-and-Schemas"><a href="#5-SQL-Data-Types-and-Schemas" class="headerlink" title="5. SQL Data Types and Schemas"></a>5. SQL Data Types and Schemas</h3><h4 id="5-1-Built-in-Data-Types-in-SQL"><a href="#5-1-Built-in-Data-Types-in-SQL" class="headerlink" title="5.1 Built-in Data Types in SQL"></a>5.1 Built-in Data Types in SQL</h4><ul><li><p>data: Date, containing a(4 digit) year, month and date</p><p>date ‘2005-7-27’</p></li><li><p>time: Time of day, in hours, minutes and seconds</p><p>time ‘09:00:30’ time “09:00:30.75”</p></li><li><p>Timestamp: date plus time of day</p><p>timestamp ‘2005-7-27 09:00:30.75’</p></li><li><p>Interval: period of time</p><ul><li>example: interval ‘1’ day</li><li>subtracting a data&#x2F;time&#x2F;timestamp value from another gives an interval value</li><li>interval values can be added to data&#x2F;time&#x2F;timestamp values</li></ul></li></ul><h4 id="5-2-large-object-types"><a href="#5-2-large-object-types" class="headerlink" title="5.2 large-object types"></a>5.2 large-object types</h4><ul><li>large objects(photo, video, CAD files, etc.) are stored as a large object<ul><li>blob: binary large object –object is a large collection of uninterpreted binary data(whose interpretation is left to an application outside of tthe database system)</li><li>clob: character large object – object is a large collection of character data</li><li>when a query returns a large object, a pointer is return rather than the large object itself</li></ul></li></ul><h4 id="5-3-user-Defined-Types"><a href="#5-3-user-Defined-Types" class="headerlink" title="5.3 user-Defined Types"></a>5.3 user-Defined Types</h4><ul><li><p>Create type constraints in SQL creates user-defined type</p><p>create type Dollars as numeric(12,2) final</p></li></ul><h4 id="5-4-Domains"><a href="#5-4-Domains" class="headerlink" title="5.4 Domains"></a>5.4 Domains</h4><ul><li><p>Create domain construct in SQL-92 creates user-defined domain types</p><p><strong>create domain person_name char(20 not null)</strong> </p></li><li><p>Domain can have constraints, such as not null specified on them</p></li></ul><h3 id="6-Index-Definition-in-SQL"><a href="#6-Index-Definition-in-SQL" class="headerlink" title="6. Index Definition in SQL"></a>6. Index Definition in SQL</h3><h4 id="6-1-Index-Creation"><a href="#6-1-Index-Creation" class="headerlink" title="6.1 Index Creation"></a>6.1 Index Creation</h4><ul><li><p>Problem: It is inefficient for </p><ul><li>The system to read every record to find a record with particular value</li></ul></li><li><p>Resolution: An index on an attribute a relation</p><ul><li>A data structure that allows the database system to find those tuples in the relation that have a specified value for that attribute efficiently, without scanning through all the tuples of the relation</li></ul></li><li><p>Do create an index with the create index command</p><p>create index(name) on (relation-name) (attribute)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件开发环境与工具</title>
      <link href="/2022/03/01/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/01/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="软件开发环境与工具"><a href="#软件开发环境与工具" class="headerlink" title="软件开发环境与工具"></a>软件开发环境与工具</h1><h2 id="第一章-软件开发环境与工具相关概念"><a href="#第一章-软件开发环境与工具相关概念" class="headerlink" title="第一章 软件开发环境与工具相关概念"></a>第一章 软件开发环境与工具相关概念</h2><ul><li>在软件工程学中，方法和工具是一个问题的两个方面</li><li><strong>方法</strong>是工具研制的先导</li><li><strong>工具</strong>是方法的具体体现</li><li>软件工程方法的研究成果需要转化为最终实现的软件工具和系统</li><li>软件开发环境是由工具构成的</li></ul><h3 id="1-1软件开发工具"><a href="#1-1软件开发工具" class="headerlink" title="1.1软件开发工具"></a>1.1软件开发工具</h3><ul><li><p>软件开发工具是用于辅助软件生命周期过程的基于计算机的工具</p></li><li><p>软件工具是指为支持计算机软件的开发、维护、模拟、移植或管理而研制的程序系统</p></li><li><p>软件工具通常由三部分组成：工具，工具接口，工具用户接口</p></li></ul><p><strong>软件开发工具的发展特点</strong></p><ol><li>软件开发工具由单个工具向多个工具集成化方向发展</li><li>重视用户界面的设计</li><li>不断采用新理论和新技术</li><li>软件工具的商品化推动了软件产业的发展，软件产业的发展，又反过来促进了软件工具的发展</li></ol><p><strong>软件开发工具5个方面的功能需求</strong></p><ol><li>认识与描述客观系统：<u>需求阶段</u></li><li>存储及管理开发过程中的信息：如配置管理，<strong>核心：</strong>保持数据的一致性</li><li>代码的编写和生成：编辑、编译、链接，<strong>核心</strong>：通过代码自动生成方式及软件重用提高效率</li><li>文档的编制与生成：World工具，<strong>核心：</strong>保持文档与软件的一致性</li><li>软件项目管理：为管理人员提供支持</li></ol><p>对应：需求工具、配置管理工具、编程工具、设计&#x2F;测试工具以及项目管理工具</p><p><strong>软件开发工具5个方面的性能要求</strong></p><ol><li>表达能力和描述能力</li><li>保持信息一致性的能力</li><li>使用的方便程度</li><li>工具的可靠程度</li><li>对硬件和软件环境的要求</li></ol><h3 id="1-2CASE工具概述"><a href="#1-2CASE工具概述" class="headerlink" title="1.2CASE工具概述"></a>1.2CASE工具概述</h3><p>CASE(Computer-Aided Software Engineering): 是一组工具和方法的集合，可以辅助软件开发生成周期各阶段进行软件开发，是软件工程发展的产物，例如：</p><ul><li>设计：Visio，Power Designer</li><li>版本管理：Clear case</li><li>集成开发环境：Visual Studio 2010</li></ul><h4 id="CASE工具要达到以下目标："><a href="#CASE工具要达到以下目标：" class="headerlink" title="CASE工具要达到以下目标："></a><strong>CASE工具要达到以下目标：</strong></h4><ol><li>高效及时完成开发工作</li><li>降低开发成本</li><li>达到软件的功能要求</li><li>取得较好的软件性能</li><li>降低软件维护费用</li></ol><p>核心：<strong>提高生产率，提高质量</strong></p><h4 id="CASE的作用："><a href="#CASE的作用：" class="headerlink" title="CASE的作用："></a><strong>CASE的作用：</strong></h4><ol><li>提供一个具有快速响应、早期查错功能的交互式开发环境</li><li>对软件的开发和维护过程中的许多环节实现自动化</li><li>通过一个强有力的图形接口，实现直观的程序设计</li></ol><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301143045412.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301143045412.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220301143045412" style="zoom:67%;"><h4 id="CASE工具的分类："><a href="#CASE工具的分类：" class="headerlink" title="CASE工具的分类："></a><strong>CASE工具的分类：</strong></h4><ol><li>支持单个过程任务的工具，比如：编译器、连接器等</li><li>工作台支持某一过程某些活动或所有活动，比如C语言集成开发环境</li><li>环境支持软件过程大部分活动或所有活动</li></ol><h4 id="CASE工具台："><a href="#CASE工具台：" class="headerlink" title="CASE工具台："></a><strong>CASE工具台：</strong></h4><p>一个CASE工作台是一组工具集，支持图形化设计、编码实现或测试等特定的软件开发阶段，可以分为：</p><ol><li>分析和设计工作台（上游CASE工具）</li><li>程序设计工作台（下游CASE工具）</li><li>测试工作台</li></ol><h4 id="CASE软件的特点："><a href="#CASE软件的特点：" class="headerlink" title="CASE软件的特点："></a>CASE软件的特点：</h4><ol><li>将软件生存期各个阶段的工作连接在一起</li><li>收集和连接软件系统中从最初需求到软件维护各个阶段的所有信息</li><li>用人工智能技术实现软件开发和维护工作的自动化</li></ol><h4 id="方法的发展："><a href="#方法的发展：" class="headerlink" title="方法的发展："></a>方法的发展：</h4><ol><li>20世纪70年代  结构化方法</li><li>20世纪80年代  面向对象方法</li><li>20世纪90年代  快速原型法</li></ol><h4 id="CASE的集成化工具发展趋势"><a href="#CASE的集成化工具发展趋势" class="headerlink" title="CASE的集成化工具发展趋势"></a>CASE的集成化工具发展趋势</h4><ol><li>界面集成</li><li>数据集成</li><li>控制集成</li><li>过程集成</li></ol><h5 id="CASE工具的界面集成"><a href="#CASE工具的界面集成" class="headerlink" title="CASE工具的界面集成"></a>CASE工具的界面集成</h5><ul><li><p>界面集成是指一个系统中的工具使用共同的风格，以及采用共同的用户交互标准</p></li><li><p>界面集成的目的是通过减轻用户的认知负担而提高用户使用环境的效率和效果</p></li><li><p>如：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301151538584.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301151538584.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom: 50%;"></li></ul><h5 id="CASE工具的数据集成"><a href="#CASE工具的数据集成" class="headerlink" title="CASE工具的数据集成"></a>CASE工具的数据集成</h5><ul><li>数据集成是指不同软件工程能相互交换数据</li><li>数据集成的目的是确认开发环境中的所有信息都作为一个整体数据被各部分操作或转换</li><li>数据集成包括：通用性、非冗余性、一致性、同步性和交换性五个方面属性</li></ul><h5 id="CASE工具的控制集成"><a href="#CASE工具的控制集成" class="headerlink" title="CASE工具的控制集成"></a>CASE工具的控制集成</h5><ul><li>控制集成支持工作台或环境中一个工具对系统中其它工具的访问</li><li>控制集成的目的是为了让工具共享功能</li><li>工具之间的控制关系包括：<ol><li>供给：一个工具被别的工具使用</li><li>使用：一个工具使用其他工具</li></ol></li></ul><h5 id="CASE的过程集成"><a href="#CASE的过程集成" class="headerlink" title="CASE的过程集成"></a>CASE的过程集成</h5><ul><li><p>过程是指开发软件所需要的阶段、任务活动序列，许多工具都服务于一定过程</p></li><li><p>过程集成是指CASE系统嵌入了关于过程活动、阶段、约束和支持这些活动所需要的工具的知识</p></li><li><p>过程集成属性包括：</p><ol><li>构成块</li><li>事件</li><li>约束</li></ol></li><li><p>如：vs</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301152150468.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301152150468.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom:50%;"></li></ul><h3 id="1-3软件开发环境简介："><a href="#1-3软件开发环境简介：" class="headerlink" title="1.3软件开发环境简介："></a>1.3软件开发环境简介：</h3><ul><li>软件开发环境的发展</li><li>软件开发环境的要求</li><li>软件开发环境的特性</li><li>软件开发环境的分类</li></ul><p><strong><u>软件开发环境</u>是指在计算机的基础软件（比如操作系统）上，为了支持软件的开发而提供的一组工具软件系统</strong></p><h4 id="1-3-1软件开发环境的组成"><a href="#1-3-1软件开发环境的组成" class="headerlink" title="1.3.1软件开发环境的组成"></a>1.3.1软件开发环境的组成</h4><ol><li>人机接口 ——软件工具环境的重要质量标志</li><li>软件环境数据库—— 软件开发环境的核心</li><li>软件开发工具——完成具体的工作</li></ol><h4 id="1-3-2软件开发环境的数据库组成"><a href="#1-3-2软件开发环境的数据库组成" class="headerlink" title="1.3.2软件开发环境的数据库组成"></a>1.3.2软件开发环境的数据库组成</h4><ol><li>通用子程序数据库（比如函数库）</li><li>可重组的程序加工信息库（编译环境）</li><li>模块描述与接口信息库（接口，.h文件）</li><li>软件测试与纠错依据信息库（调试信息）</li><li>可行性和需求信息档案（需求文档）</li><li>阶段设计详细档案（设计文档）</li><li>测试驱动数据库（测试案例）</li><li>软件维护档案等（维护文档）</li></ol><p>示例：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301154646824.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301154646824.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom:50%;"><h4 id="1-3-3软件开发环境的分层"><a href="#1-3-3软件开发环境的分层" class="headerlink" title="1.3.3软件开发环境的分层"></a>1.3.3软件开发环境的分层</h4><p><strong>通常分为以下四层：</strong></p><ol><li>宿主层</li><li>核心层</li><li>基本层</li><li>应用层</li></ol><h5 id="宿主层："><a href="#宿主层：" class="headerlink" title="宿主层："></a>宿主层：</h5><p>宿主层是软件开发环境依赖的计算机基础，包括：</p><ol><li>基本宿主硬件，如计算机、工作站、服务器等</li><li>基本宿主软件，如操作系统</li></ol><h5 id="核心层："><a href="#核心层：" class="headerlink" title="核心层："></a>核心层：</h5><p>核心层是软件开发环境本身的支持基础，比如：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301155909076.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301155909076.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom:50%;"><ol><li>C#的CLR( Common Language Runtime)</li><li>Java的虚拟机JVM等</li></ol><h5 id="基本层："><a href="#基本层：" class="headerlink" title="基本层："></a>基本层：</h5><ul><li>基本层是软件开发工具的工作工具集，包括</li><li>最少限度的一组工具，比如：<ol><li>编译工具</li><li>连接工具</li><li>调试工具等</li></ol></li><li>这些工具由核心层支持</li></ul><h5 id="应用层："><a href="#应用层：" class="headerlink" title="应用层："></a>应用层：</h5><p>应用层是以特定的基本层为基础而引入的配套补充工具，比如：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301155836294.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301155836294.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom:67%;"><ol><li>界面生成器</li><li>版本管理器</li><li>性能分析器等</li></ol><h4 id="1-3-4软件开发环境的发展"><a href="#1-3-4软件开发环境的发展" class="headerlink" title="1.3.4软件开发环境的发展"></a>1.3.4软件开发环境的发展</h4><p>软件开发环境的发展依赖于软件开发方法的发展</p><ul><li>20世纪70年代：结构化开发方法，主要是<strong>高级语言开发工具</strong>的发展</li><li>20世纪80年代：面向对象方法，主要是<strong>面向对象开发工具</strong>的发展</li><li>20世纪90年代：系统集成方法，CASE<strong>集成开发环境</strong>开始出现</li></ul><h5 id="结构化的开发方法和工具"><a href="#结构化的开发方法和工具" class="headerlink" title="结构化的开发方法和工具"></a>结构化的开发方法和工具</h5><ul><li>20世纪70年代：结构化开发方法，主要是结构化高级语言开发工具的发展</li><li>结构化程序设计方法又称为“自顶向下”或“逐步求精”法</li></ul><p><strong>结构化程序设计方法是按照模块划分原则以提高程序可读性和易维护性、可调性和可扩充性为目标的一种程序设计方法。</strong></p><p>在结构化的程序设计中，只允许三种基本的程序结构形式：</p><ol><li>顺序结构</li><li>分支结构</li><li>循环结构</li></ol><p><strong>这三种基本结构的共同特点是只允许有一个流动入口和一个出口，仅有这三种基本结构组成的程序称为<u>结构化程序</u></strong></p><h5 id="面向对象开发方法和工具："><a href="#面向对象开发方法和工具：" class="headerlink" title="面向对象开发方法和工具："></a>面向对象开发方法和工具：</h5><ul><li>20世纪80年代：面向对象方法，主要是面向对象开发工具的发展</li><li>面向对象编程的基础是类，三大机制： “封装、继承、多态”</li></ul><p>面向对象程序设计（Object Oriented Programming，OOP）是一种计算机编程架构。</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301161046444.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301161046444.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220301161046444" style="zoom:50%;"><p><strong>OOP的一条基本原则是计算机程序由单个能够起到子程序作用的单元或对象组合而成。</strong></p><p>OOP达到了软件工程的三个主要目标：重用性、灵活性和扩展性。</p><p>OOP&#x3D;对象+类+继承+多态+消息，其中核心概念是类和对象。</p><h5 id="集成化开发方法和工具："><a href="#集成化开发方法和工具：" class="headerlink" title="集成化开发方法和工具："></a>集成化开发方法和工具：</h5><ul><li>20世纪90年代：系统集成方法，CASE集成开发环境开始出现</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301161425599.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301161425599.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom:50%;"><h4 id="1-3-5软件开发环境的要求"><a href="#1-3-5软件开发环境的要求" class="headerlink" title="1.3.5软件开发环境的要求"></a>1.3.5软件开发环境的要求</h4><ol><li>高度集成化的系统</li><li>具有高度的通用性</li><li>易于定制，具有高度的适应性和灵活性</li><li>具有易用性</li><li>具有半自动或自动化的开发能力</li></ol><h5 id="高度集成化的系统"><a href="#高度集成化的系统" class="headerlink" title="高度集成化的系统"></a>高度集成化的系统</h5><p><strong>支持软件生存周期各个阶段的活动，包括：需求分析、系统设计、编码、调试以及维护等</strong></p><ul><li>支持软件生存周期各个阶段的管理和开发两方面的工作</li><li>协调一致地支持各阶段和各方面的工作，具有统一的内部数据表示</li><li>具有一致性的用户接口</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301161823472.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301161823472.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom:50%;"><h5 id="高度的通用性："><a href="#高度的通用性：" class="headerlink" title="高度的通用性："></a>高度的通用性：</h5><ol><li>能适应最常用的几种语言</li><li>能适应和支持不同的开发方法</li><li>能适应不同的计算机硬件及其系统软件</li><li>能适应开发不同类型的软件</li><li>能适应并考虑到不同用户的需要（如程序员、系统分析员、项目经理、质量保证人员等）</li></ol><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301161951991.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301161951991.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom:50%;"><h5 id="易于定制，裁剪和扩充"><a href="#易于定制，裁剪和扩充" class="headerlink" title="易于定制，裁剪和扩充"></a>易于定制，裁剪和扩充</h5><ul><li>定制是指软件开发环境应能符合项目特征、过程和用户的爱好</li><li>裁剪是指环境能按照用户需求建立好子环境</li><li>扩充是指环境能向上扩展，能根据用户新的需求或软件技术的新发展对原有的环境进行更新或扩充（Eclipse插件）</li></ul><h5 id="易学易用，经济高效"><a href="#易学易用，经济高效" class="headerlink" title="易学易用，经济高效"></a>易学易用，经济高效</h5><ul><li>易学、易用、响应时间合理和用户喜爱</li><li>能支持自然语言处理</li><li>能支持交互式和分布式软件开发</li><li>降低用户和环境的资源花费</li></ul><h5 id="具有半自动或自动化能力"><a href="#具有半自动或自动化能力" class="headerlink" title="具有半自动或自动化能力"></a>具有半自动或自动化能力</h5><ul><li>各个阶段的文档之间要能半自动或自动地变换和跟踪（Rational Rose UML)</li><li>应注重使用形式化技术</li><li>不同程度地、逐步采用“软件构件”的集成组装技术，并建立软件构件库</li><li>采用人工智能技术，逐步包含支持软件开发的专家系统</li></ul><h4 id="1-3-6软件开发环境的特性"><a href="#1-3-6软件开发环境的特性" class="headerlink" title="1.3.6软件开发环境的特性"></a>1.3.6软件开发环境的特性</h4><p>软件开发环境的特性包括：</p><ul><li>可用性</li><li>自动化程度</li><li>公共性</li><li>集成化程度</li><li>适应性</li></ul><h5 id="软件开发环境的分类："><a href="#软件开发环境的分类：" class="headerlink" title="软件开发环境的分类："></a>软件开发环境的分类：</h5><p>软件开发环境与软件生存期、软件开发方法、软件处理模型紧密相关，有多种分类方法：</p><ul><li>按问题分类</li><li>按软件开发环境的演变趋势分类</li><li>按集成化程度分类</li></ul><h5 id="按照问题分类："><a href="#按照问题分类：" class="headerlink" title="按照问题分类："></a>按照问题分类：</h5><h6 id="程序设计环境："><a href="#程序设计环境：" class="headerlink" title="程序设计环境："></a>程序设计环境：</h6><p>解决如何将规范说明（软件需求规格说明书）转换成可工作的程序（代码和运行程序）的问题，包括两个部分：方法和工具</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301163206591.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301163206591.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220301163206591" style="zoom:67%;"><h6 id="系统合成环境-："><a href="#系统合成环境-：" class="headerlink" title="系统合成环境 ："></a>系统合成环境 ：</h6><p><strong>主要考虑把很多子系统集成为一个大系统的问题</strong></p><p>所有大型软件都有两个基本特点：</p><ol><li>由一些小的、较易理解的子系统组成</li><li>需要有一个系统合成环境来辅助控制系统及其向大系统的集成（基于组件的开发）</li></ol><p>如：原生插件调用</p><ul><li><p>二维码扫描</p></li><li><p>地理定位</p></li><li><p>摄像头拍照及录像</p></li><li><p>音频录制及播放</p></li><li><p>微信支付、支付宝支</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301163426274.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301163426274.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220301163426274" style="zoom:50%;"></li></ul><h6 id="项目管理环境："><a href="#项目管理环境：" class="headerlink" title="项目管理环境："></a>项目管理环境：</h6><ul><li>大型软件系统的开发和维护必然会有很多人员在同一时间段内协同工作，需要对人与人之间的交流和合作进行管理</li><li>项目管理环境 的责任是解决由于软件产品的规模大、生存期长、人们的交往多而造成的问题</li></ul><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301163641467.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301163641467.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220301163641467"></p><h3 id="1-4总结："><a href="#1-4总结：" class="headerlink" title="1.4总结："></a>1.4总结：</h3><p><strong>软件开发工具、环境和CASE之间的关系</strong></p><ul><li>工具是一款具体的开发软件</li><li>CASE是计算机软件工程的辅助工具</li><li>环境是开发工具的集合</li></ul><p>工具学习流程： 了解+掌握+应用</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301164114766.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301164114766.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220301164114766" style="zoom:50%;"><h2 id="第二章-软件开发工具结构与分类"><a href="#第二章-软件开发工具结构与分类" class="headerlink" title="第二章 软件开发工具结构与分类"></a>第二章 软件开发工具结构与分类</h2><ul><li>软件开发工具的功能</li><li>软件开发工具的结构</li><li>软件开发工具的分类<ul><li>基于软件开发过程的工具</li><li>基于应用的软件开发工具</li><li>数据库设计工具介绍</li></ul></li></ul><h3 id="1-软件开发工具的功能"><a href="#1-软件开发工具的功能" class="headerlink" title="1.软件开发工具的功能"></a>1.软件开发工具的功能</h3><ul><li>软件开发工具种类繁多</li><li>有些工具只针对软件开发过程的一个方面，如语言工具，数据库工具</li><li>有些工具对软件开发的整个过程进行支持，如软件开发环境</li><li>功能不同，结构不同</li></ul><h4 id="1-1软件开发工具的基本功能"><a href="#1-1软件开发工具的基本功能" class="headerlink" title="1.1软件开发工具的基本功能"></a>1.1软件开发工具的基本功能</h4><h5 id="软件开发工具具有以下五方面基本功能："><a href="#软件开发工具具有以下五方面基本功能：" class="headerlink" title="软件开发工具具有以下五方面基本功能："></a><strong>软件开发工具具有以下五方面基本功能：</strong></h5><ol><li>描述软件状况及开发过程概念模式</li><li>提供存贮和管理有关信息的机制和手段</li><li>帮助使用者编制、生成文档</li><li>生成代码</li><li>对历史信息进行跨生命周期的管理</li></ol><h5 id="软件开发过程概念模式："><a href="#软件开发过程概念模式：" class="headerlink" title="软件开发过程概念模式："></a>软件开发过程概念模式：</h5><p><strong>软件开发工具都内置了自己的开发过程概念模式，帮助开发人员认识软件工作的环境、管理软件的开发过程</strong></p><p>概念模式的内容：</p><ol><li>对软件应用环境的认识和理解</li><li>对预期产生的软件产品的认识和理解</li><li>对软件开发过程的认识和理解</li></ol><h3 id="2-软件开发工具的一般结构"><a href="#2-软件开发工具的一般结构" class="headerlink" title="2.软件开发工具的一般结构"></a>2.软件开发工具的一般结构</h3><p><strong>软件开发工具一般由四个部分构成：</strong></p><ul><li>总控及人机界面</li><li>信息库及其管理</li><li>代码及文档生成</li><li>版本管理及项目管理</li></ul><h4 id="2-1软件开发环境的一般结构图"><a href="#2-1软件开发环境的一般结构图" class="headerlink" title="2.1软件开发环境的一般结构图"></a>2.1软件开发环境的一般结构图</h4><h6 id><a href="#" class="headerlink" title></a><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308140845300.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308140845300.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308140845300" style="zoom:50%;"></h6><h4 id="2-2总控部分和人机界面"><a href="#2-2总控部分和人机界面" class="headerlink" title="2.2总控部分和人机界面"></a>2.2总控部分和人机界面</h4><p>总控部分及人机界面是使用者和工具之间信息交流的桥梁</p><p><strong>人机界面应该遵循以下3条原则：</strong></p><ol><li>面向用户的原则</li><li>保证各部分之间信息的准确传递</li><li>保证系统的开放性和灵活性</li></ol><h5 id="2-2-1软件开发工具的信息库及管理"><a href="#2-2-1软件开发工具的信息库及管理" class="headerlink" title="2.2.1软件开发工具的信息库及管理"></a>2.2.1软件开发工具的信息库及管理</h5><ul><li>信息库是使用数据库技术存贮和管理软件开发过程的信息</li><li>信息库存贮开发过程中的四类信息</li><li>信息库管理涉及三方面管理功能</li></ul><h5 id="2-2-2信息库存贮的四类信息"><a href="#2-2-2信息库存贮的四类信息" class="headerlink" title="2.2.2信息库存贮的四类信息"></a>2.2.2信息库存贮的四类信息</h5><ol><li>软件环境状况信息，包括生成软件产品环境设置的描述</li><li>设计成果，包括逻辑设计和物理设计的成果，比如数据流图，模块图，代码等</li><li>运行状况的记录，包括运行效率、故障及其处理情况等</li><li>有关项目管理和版本管理的信息</li></ol><h5 id="2-2-3三类信息库管理功能"><a href="#2-2-3三类信息库管理功能" class="headerlink" title="2.2.3三类信息库管理功能"></a>2.2.3三类信息库管理功能</h5><p><strong>软件开发工具的信息库除具有一般数据库的管理功能外，还具有其它三类功能：</strong></p><ol><li>信息之间逻辑联系的识别与记录（设计视图与语言代码的一致性处理）</li><li>定量信息与文字信息的协调一致（文档信息从程序中自动提取）</li><li>历史信息处理的一致性控制</li></ol><h4 id="2-3软件开发工具的代码生成"><a href="#2-3软件开发工具的代码生成" class="headerlink" title="2.3软件开发工具的代码生成"></a>2.3软件开发工具的代码生成</h4><p><strong>代码生成是软件开发工具的主要功能<br>代码生成器的结构如下所示</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308141630276.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308141630276.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308141630276" style="zoom:50%;"><h5 id="2-3-1代码生成的材料"><a href="#2-3-1代码生成的材料" class="headerlink" title="2.3.1代码生成的材料"></a>2.3.1代码生成的材料</h5><p><strong>代码生成器依据三方面材料生成代码：</strong></p><ol><li>信息库中的资料，比如软件的总体结构，模块之间的关系，数据结构等</li><li>各种标准模块的框架和组件</li><li>通过屏幕输入的信息，比如输入的编译参数、将UML图形生成的语言类别等</li></ol><p><strong>代码环境信息</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308141911532.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308141911532.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308141911532" style="zoom:50%;"><h5 id="2-3-2代码生成的输出"><a href="#2-3-2代码生成的输出" class="headerlink" title="2.3.2代码生成的输出"></a>2.3.2代码生成的输出</h5><p><strong>代码生成器生成的数据包括：</strong></p><ul><li>高级程序语言的代码，比如Rational Rose工具可以根据类图生成不同语言的源代码</li><li>某种机器环境下的机器语言代码，一般的编译工具通常生成机器代码</li></ul><p>如：选择生成代码的类、组件或包后生成代码</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308142119685.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308142119685.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308142119685" style="zoom:50%;"><h4 id="2-4项目管理和版本管理"><a href="#2-4项目管理和版本管理" class="headerlink" title="2.4项目管理和版本管理"></a>2.4项目管理和版本管理</h4><ul><li><strong>项目管理与版本管理是跨生命周期的信息管理，关键是对历史信息的处理</strong></li><li><strong>项目管理包括：范围管理、时间管理、成本管理、质量管理、人力资源管理、沟通管理、风险管理、采购管理和集成管理等</strong></li><li><strong>版本管理主要涉及档案集中管理、包括版本管理，文件更新保护和版本比较等</strong></li></ul><h5 id="2-4-1-软件中的项目管理"><a href="#2-4-1-软件中的项目管理" class="headerlink" title="2.4.1 软件中的项目管理"></a>2.4.1 软件中的项目管理</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308142924599.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308142924599.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308142924599" style="zoom:50%;"><h5 id="2-4-2-软件中的版本管理"><a href="#2-4-2-软件中的版本管理" class="headerlink" title="2.4.2 软件中的版本管理"></a>2.4.2 软件中的版本管理</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308142952087.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308142952087.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308142952087" style="zoom:50%;"><h3 id="3-软件开发工具的分类"><a href="#3-软件开发工具的分类" class="headerlink" title="3.软件开发工具的分类"></a>3.软件开发工具的分类</h3><h4 id="3-1基于工作阶段的工具划分"><a href="#3-1基于工作阶段的工具划分" class="headerlink" title="3.1基于工作阶段的工具划分"></a>3.1基于工作阶段的工具划分</h4><p><strong>软件的开发是分阶段的，按照软件开发的阶段，软件开发工具可以分为：</strong></p><ul><li>需求分析工具</li><li>设计工具</li><li>编码工具</li><li>测试工具</li><li>运行维护工具</li><li>项目管理工具和版本管理工具等</li></ul><h5 id="3-1-1-需求分析工具"><a href="#3-1-1-需求分析工具" class="headerlink" title="3.1.1 需求分析工具"></a>3.1.1 需求分析工具</h5><ul><li>需求分析工具在系统分析阶段用来严格定义应用的需求规格</li><li>需求分析工具应该包括对分析的结果进行一致性和完整性的检查</li><li>需求分析工具包括UML用例图的绘制，数据流图、E-R图的绘制等</li><li>s工具包括：Rational Rose，EPWin以及BPWin等</li></ul><p>Rational Rose需求工具:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308143458584.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308143458584.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308143458584" style="zoom:50%;"><h5 id="3-1-2-设计工具"><a href="#3-1-2-设计工具" class="headerlink" title="3.1.2 设计工具"></a>3.1.2 设计工具</h5><ul><li>设计工具用来进行系统设计，将设计结果描述出来形成设计规格说明书，并检查设计的一致性</li><li>设计工具可以生成各种设计图形，比如类图、时序图、状态图、部署图等</li><li>常用的设计工具是：UML语言工具</li></ul><p>类图：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308143649791.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308143649791.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308143649791" style="zoom:50%;"><h5 id="3-1-3-软件编码工具"><a href="#3-1-3-软件编码工具" class="headerlink" title="3.1.3 软件编码工具"></a>3.1.3 软件编码工具</h5><p><strong>软件编码工具用来生成软件代码，通常包括正文编辑器、常规的编译程序、链接程序、调试跟踪程序等</strong></p><ul><li>Visual Studio6.0是只针对c++的编码工具</li><li>MATLAB是针对科学计算的编码工具</li><li>Python是针对Python语言的编码工具</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308143826548.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308143826548.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308143826548" style="zoom:50%;"><h5 id="3-1-4-软件测试工具"><a href="#3-1-4-软件测试工具" class="headerlink" title="3.1.4 软件测试工具"></a>3.1.4 软件测试工具</h5><ul><li>软件测试工具是软件质量的保证，用于发现程序错误并对错误进行管理</li><li>测试工具可以支持整个测试过程，包括：测试用例的选择，测试执行及测试评估等</li><li>软件测试工具包括静态分析器，动态覆盖率测试器，测试用例生成器，测试报告生成器，测试程序自动生成器，测试管理工具等</li><li>测试工具包括：WinRunner，LoadRunner等等</li></ul><p>性能测试工具loadRunner</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308144023332.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308144023332.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308144023332" style="zoom:50%;"><h5 id="3-1-5-软件运行维护工具"><a href="#3-1-5-软件运行维护工具" class="headerlink" title="3.1.5 软件运行维护工具"></a>3.1.5 软件运行维护工具</h5><ul><li>运行维护工具的目的是保证系统的正常运行，发现和解决软件的性能故障</li><li>运行维护阶段的工具包括支持逆向工程（Reverse-Engineering）或再工程（Reengineering）的反汇编工具等</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308144126508.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308144126508.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308144126508" style="zoom:50%;"><h5 id="3-1-6-软件项目管理工具"><a href="#3-1-6-软件项目管理工具" class="headerlink" title="3.1.6 软件项目管理工具"></a>3.1.6 软件项目管理工具</h5><ul><li>软件项目管理贯穿软件开发生命周期的全过程，包括对开发团队的组织以及开发过程中各种标准、规范的实施等</li><li>项目管理常用的工具有Gantt图，PERT图等</li><li>Microsoft Project是简单的项目管理工具</li></ul><h3 id="4-应用型的软件开发工具"><a href="#4-应用型的软件开发工具" class="headerlink" title="4.应用型的软件开发工具"></a>4.应用型的软件开发工具</h3><p><strong>按应用领域分类软件，种类繁多：</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308145726093.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308145726093.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308145726093" style="zoom: 67%;"><h4 id="4-1-Web应用开发工具"><a href="#4-1-Web应用开发工具" class="headerlink" title="4.1 Web应用开发工具"></a>4.1 Web应用开发工具</h4><p><strong>Web应用开发工具可分为前端、服务器以及数据库三类开发工具：</strong></p><ol><li>前端：WebStorm，Hbuilder等</li><li>服务器：Intellij IDEA， Eclipse等</li><li>数据库：Navicat Premium，Dbeaver等</li></ol><h5 id="4-1-1-Web应用前端开发工具举例"><a href="#4-1-1-Web应用前端开发工具举例" class="headerlink" title="4.1.1 Web应用前端开发工具举例"></a>4.1.1 Web应用前端开发工具举例</h5><p><strong>WebStorm是JetBrains旗下的JavaScript开发者工具，主要用于各种前端开发</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308150127390.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308150127390.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308150127390" style="zoom: 67%;"><h5 id="4-1-2-Web应用服务器开发工具举例"><a href="#4-1-2-Web应用服务器开发工具举例" class="headerlink" title="4.1.2 Web应用服务器开发工具举例"></a>4.1.2 Web应用服务器开发工具举例</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308150201452.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308150201452.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308150201452" style="zoom:67%;"><h5 id="4-1-3-Web应用数据库开发工具举例"><a href="#4-1-3-Web应用数据库开发工具举例" class="headerlink" title="4.1.3 Web应用数据库开发工具举例"></a>4.1.3 Web应用数据库开发工具举例</h5><p><strong>Navicat Premium是一款数据库管理工具。它可以连接不同数据库： MySQL、SQLite、Oracle 及 PostgreSQL 等。</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308150256539.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308150256539.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308150256539" style="zoom:67%;"><h4 id="4-2-人工智能应用开发工具（深度学习类型）"><a href="#4-2-人工智能应用开发工具（深度学习类型）" class="headerlink" title="4.2 人工智能应用开发工具（深度学习类型）"></a>4.2 人工智能应用开发工具（深度学习类型）</h4><p><strong>人工智能应用开发工具可分为数据标注、模型框架以及集成开发三类开发工具：</strong></p><ol><li>数据标注：Labelme，CVAT等</li><li>模型框架：Pytorch， Tensorflow等</li><li>集成开发：JetBrain，PyCharm等</li></ol><h5 id="4-2-1人工智能数据标注工具举"><a href="#4-2-1人工智能数据标注工具举" class="headerlink" title="4.2.1人工智能数据标注工具举"></a>4.2.1人工智能数据标注工具举</h5><p>Labelme是一个在线图像标注的Javascript 标注工具</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308150504611.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308150504611.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308150504611" style="zoom:67%;"><h5 id="4-2-2人工智能模型框架工具举例"><a href="#4-2-2人工智能模型框架工具举例" class="headerlink" title="4.2.2人工智能模型框架工具举例"></a>4.2.2人工智能模型框架工具举例</h5><p><strong>TensorFlow是google公司开发的一款开源机器学习平台。它拥有一个生态系统，其中包含各种工具、库和社区资源。</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308150607077.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308150607077.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308150607077" style="zoom: 80%;"><h5 id="4-2-3人工智能集成开发工具举例"><a href="#4-2-3人工智能集成开发工具举例" class="headerlink" title="4.2.3人工智能集成开发工具举例"></a>4.2.3人工智能集成开发工具举例</h5><p><strong>PyCharm是由JetBrains打造的一款Python IDE集成开发环境。</strong></p><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308150703240.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308150703240.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308150703240"></p><h4 id="4-3-移动应用开发工具"><a href="#4-3-移动应用开发工具" class="headerlink" title="4.3 移动应用开发工具"></a>4.3 移动应用开发工具</h4><p><strong>移动应用开发工具可分为原型设计工具、后端服务以及脚本语言三类开发工具：</strong></p><ol><li>原型工具：Axure，Mockplus等</li><li>后端服务：Xcode， Android Studio等</li><li>脚本语言：RubyMotion等</li></ol><h5 id="4-3-1移动应用原型设计工具举例"><a href="#4-3-1移动应用原型设计工具举例" class="headerlink" title="4.3.1移动应用原型设计工具举例"></a>4.3.1移动应用原型设计工具举例</h5><p><strong>Axure RP是美国Axure Software Solution公司研制的一款专业快速原型设计工具</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308151016766.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308151016766.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308151016766" style="zoom:67%;"><h5 id="4-3-2-移动应用后端服务工具举例"><a href="#4-3-2-移动应用后端服务工具举例" class="headerlink" title="4.3.2 移动应用后端服务工具举例"></a>4.3.2 移动应用后端服务工具举例</h5><p><strong>Android Studio是谷歌公司推出的一款Android集成开发工具。</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308151116409.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308151116409.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308151116409" style="zoom:80%;"><h4 id="4-4-游戏开发工具"><a href="#4-4-游戏开发工具" class="headerlink" title="4.4 游戏开发工具"></a>4.4 游戏开发工具</h4><p><strong>游戏开发工具可分为建模工具、游戏引擎以及开发语言三类工具：</strong></p><ul><li>建模工具：3DMax，Maya，ZBrush等</li><li>游戏引擎：Unity3D， Unreal虚幻引擎等</li><li>开发语言：C#，Java，ObjectC等</li></ul><h5 id="4-4-1-游戏建模工具举例"><a href="#4-4-1-游戏建模工具举例" class="headerlink" title="4.4.1 游戏建模工具举例"></a>4.4.1 游戏建模工具举例</h5><p><strong>3DMax是Autodesk公司开发的3D建模工具，可用于影视、建筑等各种3D建模。</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308151402064.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308151402064.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308151402064" style="zoom:50%;"><p><strong>Maya是Autodesk公司推出最顶级三维建模工具，可以制作完成各种真实感的三维模型和动画。</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308151445459.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308151445459.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308151445459" style="zoom: 67%;"><h5 id="4-4-2-游戏开发引擎举例"><a href="#4-4-2-游戏开发引擎举例" class="headerlink" title="4.4.2 游戏开发引擎举例"></a>4.4.2 游戏开发引擎举例</h5><p><strong>Unity3D是一款实时3D游戏引擎，可以开发各种3D游戏，包括AR、VR游戏。</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308151547492.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308151547492.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308151547492" style="zoom: 80%;"><h3 id="5-数据库设计工具"><a href="#5-数据库设计工具" class="headerlink" title="5.数据库设计工具"></a>5.数据库设计工具</h3><p><strong>数据库设计工具协助与数据库开发相关人员在一个给定的应用环境中，通过合理的逻辑设计和有效的物理设计，构造优化的数据库模式，建立数据库及其应用系统，满足用户多种信息需求</strong></p><h4 id="5-1-数据库的设计方法"><a href="#5-1-数据库的设计方法" class="headerlink" title="5.1 数据库的设计方法"></a>5.1 数据库的设计方法</h4><p><strong>数据库设计（Database Design）是指根据用户需求，在某一个具体的数据库管理系统上，设计数据库的结构和建立数据库的过程</strong><br>数据库的设计一般包括:</p><ul><li>结构设计，如数据表格的设计</li><li>行为设计，如数据应用的设计</li></ul><h4 id="5-2-数据库设计过程"><a href="#5-2-数据库设计过程" class="headerlink" title="5.2 数据库设计过程"></a>5.2 数据库设计过程</h4><p><strong>数据库设计通常分为六个步骤</strong>:</p><ol><li>需求分析</li><li>概念设计</li><li>逻辑设计</li><li>物理设计</li><li>验证设计</li><li>运行与维护设计</li></ol><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308154747258.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308154747258.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308154747258" style="zoom:50%;"><h5 id="5-2-1-数据库的需求分析"><a href="#5-2-1-数据库的需求分析" class="headerlink" title="5.2.1 数据库的需求分析"></a>5.2.1 数据库的需求分析</h5><ul><li><strong>数据库的需求分析是指通过调查和分析用户的业务活动和数据的使用情况</strong></li><li><strong>弄清楚所用的数据种类、范围、数量以及他们在业务活动中的交互等情况</strong></li><li><strong>确定用户对数据库系统的使用要求和各种约束条件等，形成需求规格</strong></li></ul><h5 id="5-2-2-数据库的概念设计"><a href="#5-2-2-数据库的概念设计" class="headerlink" title="5.2.2 数据库的概念设计"></a>5.2.2 数据库的概念设计</h5><ul><li>数据库的概念设计是指通过对现实世界的分类，聚集和概括，建立抽象的概念数据模型</li><li>概念数据模型反应现实世界各部门的信息结构、信息流动情况、信息间的相互制约关系以及对信息储存、查询加工的要求等</li></ul><h5 id="5-2-3-数据库的逻辑设计"><a href="#5-2-3-数据库的逻辑设计" class="headerlink" title="5.2.3 数据库的逻辑设计"></a>5.2.3 数据库的逻辑设计</h5><p>数据库的逻辑设计是将现实世界的概念数据模型设计成数据库的一种逻辑模式，即适应特定数据库管理系统所支持的逻辑数据模式，行为准测</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308155118493.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308155118493.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308155118493" style="zoom: 80%;"><h5 id="5-2-4-数据库的物理设计"><a href="#5-2-4-数据库的物理设计" class="headerlink" title="5.2.4 数据库的物理设计"></a>5.2.4 数据库的物理设计</h5><p>数据库的物理设计是指根据数据库管理系统所提供的多种存贮结构和存取方法等依赖于具体计算机结构的各项物理设计措施</p><p>对具体的应用任务选定最合适的物理存贮结构、存取方法和存取路径等</p><h5 id="5-2-5-数据库的验证设计"><a href="#5-2-5-数据库的验证设计" class="headerlink" title="5.2.5 数据库的验证设计"></a>5.2.5 数据库的验证设计</h5><p>验证设计是指在数据库设计的基础上，收集数据并具体建立一个数据库，在该数据库上运行一些典型的应用任务来验证数据库设计的正确性和合理性</p><h5 id="5-2-6-数据库的运行与维护设计"><a href="#5-2-6-数据库的运行与维护设计" class="headerlink" title="5.2.6 数据库的运行与维护设计"></a>5.2.6 数据库的运行与维护设计</h5><p>在数据库系统正式投入运行的过程中，必须不断地对其进行调整和修改，这就是数据库的运行与维护</p><h4 id="5-3-典型的数据库开发工具"><a href="#5-3-典型的数据库开发工具" class="headerlink" title="5.3 典型的数据库开发工具"></a>5.3 典型的数据库开发工具</h4><p><strong>典型的数据库开发工具：</strong></p><ul><li>Oracle数据库</li><li>DB2数据库</li><li>SQL Server数据库</li><li>MySQL数据库</li><li>Access数据库</li><li>SQLite</li></ul><h5 id="5-3-1-Oracle数据库"><a href="#5-3-1-Oracle数据库" class="headerlink" title="5.3.1 Oracle数据库"></a>5.3.1 Oracle数据库</h5><ul><li>Oracle数据库是Oracle公司开发的一种大型关系数据库，一般用于商业、政府部门</li><li>Oracle数据库基于客户&#x2F;服务器模式的结构</li><li>该数据库具有强大的大数据处理能力和稳定性，被大公司采用，价格昂贵</li></ul><p>Oracle数据库管理器：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308155610361.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308155610361.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308155610361" style="zoom:50%;"><h5 id="5-3-2-DB2数据库"><a href="#5-3-2-DB2数据库" class="headerlink" title="5.3.2 DB2数据库"></a>5.3.2 DB2数据库</h5><ul><li>DB2数据库是IBM公司研制的关系数据库，主要应用与大型应用系统中，具有很好的可伸缩性、数据完整性和安全性</li><li>DB2具有很好的网络支持能力，每个子系统可以连接十几万分布式用户，可同时激活上千个活动线程，对于大型分布式系统的应用特别有用，比如银行</li><li>DB2可支持大型机到单用户环境，应用于OS&#x2F;2、Windows、Unix、VM及OS&#x2F;390等多种操作系统</li></ul><p>DB2数据库的工作原理：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308155847570.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308155847570.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308155847570" style="zoom:50%;"><h5 id="5-3-3-SQL-Server数据库"><a href="#5-3-3-SQL-Server数据库" class="headerlink" title="5.3.3 SQL Server数据库"></a>5.3.3 SQL Server数据库</h5><ul><li>SQL Server数据库是Microsoft，Sybase和Ashton-Tate三家公司共同开发的，于1988年推出第一个OS&#x2F;2版本</li><li>该数据库是一个全功能的数据库平台</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308160040287.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308160040287.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308160040287" style="zoom:67%;"><h5 id="5-3-4-MySQL数据库"><a href="#5-3-4-MySQL数据库" class="headerlink" title="5.3.4 MySQL数据库"></a>5.3.4 MySQL数据库</h5><ul><li>My SQL是一个小型关系数据库管理系统，由瑞典的MySQL AB公司开发，2008年被Sun公司收购</li><li>该数据库是一个开源数据库，具有体系小，成本低等特点</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308160137069.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308160137069.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308160137069" style="zoom: 67%;"><h5 id="5-3-5-Access数据库"><a href="#5-3-5-Access数据库" class="headerlink" title="5.3.5 Access数据库"></a>5.3.5 Access数据库</h5><ul><li>Access数据库是微软公司推出的基于Windows桌面操作系统的关系数据库，是Office应用软件之一</li><li>它提供表、查询、窗体、报表、页、宏、模块7种用来建立数据库的对象</li><li>提供了多种向导、生成器、模板、数据存贮、数据查询、界面设计以及报表生成等操作规范化</li></ul><p>Access数据库设计界面：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308160350626.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220308160350626.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220308160350626" style="zoom:50%;"><h5 id="5-3-6-SQLite数据库"><a href="#5-3-6-SQLite数据库" class="headerlink" title="5.3.6 SQLite数据库"></a>5.3.6 SQLite数据库</h5><ul><li>SQLite，是一款轻型的数据库，是遵守ACID的关联式数据库管理系统</li><li>ACID是指原子性(Atomicity )、一致性( Consistency )、隔离性或独立性( Isolation)和持久性(Durabilily)</li><li>它的设计目标是嵌入式的，而且目前已经在很多嵌入式产品（比如手机）中使用了它，它占用资源非常低，在嵌入式设备中，可能只需几百K内存</li></ul><h3 id="6-总结："><a href="#6-总结：" class="headerlink" title="6.总结："></a>6.总结：</h3><ul><li>理解工具背后的概念模型对于熟练使用工具非常重要</li><li>综合性软件开发工具的结构一般包括：总控、信息库、代码生成器以及跨生命周期的项目管理和配置管理四个部分</li><li>按软件开发生命周期模型工具可分为需求、分析、编码、测试和维护等工具</li><li>数据库开发工具种类众多，属于应用型开发工具的一种</li></ul><h2 id="第三章-软件开发环境与工具的选用"><a href="#第三章-软件开发环境与工具的选用" class="headerlink" title="第三章 软件开发环境与工具的选用"></a>第三章 软件开发环境与工具的选用</h2><h3 id="提纲"><a href="#提纲" class="headerlink" title="提纲"></a>提纲</h3><ul><li>引言</li><li>软件开发工具选择概述</li><li>软件开发工具采用过程</li><li>工具选择与评价</li><li>工具切换</li><li>工具维护</li><li>工具采购</li></ul><h3 id="1-软件开发工具选择概述"><a href="#1-软件开发工具选择概述" class="headerlink" title="1. 软件开发工具选择概述"></a>1. 软件开发工具选择概述</h3><ul><li>软件开发工具对高效、高质量的开发软件起到重要作用</li><li>如何选择一款适合于公司的开发工具呢<ul><li>选择和采用工具的目标和依据是什么？</li><li>选择工具的过程如何？</li><li>如何对工具进行技术评价？需要考虑哪些因素？</li></ul></li></ul><h3 id="2-软件开发工具的采用过程"><a href="#2-软件开发工具的采用过程" class="headerlink" title="2. 软件开发工具的采用过程"></a>2. 软件开发工具的采用过程</h3><ul><li>软件开发工具作为软件开发过程和活动的一种辅助支持手段，具有重要作用</li><li>随着软件开发新技术、新方法和新概念的不断产生、发展，结合了这些新思想的软件开发工具也层出不穷</li><li>如何选择合适的开发工具是摆在开发组织面前的一项重要任务</li><li>国际标准化组织和国际电工委员会1999年发布了针对CASE工具采用的技术报告ISO&#x2F;IECTR14471《信息技术工具采用指南》，把CASE工具的采用工作划分为：<ul><li>1个主过程</li><li>4个子过程</li></ul></li></ul><p>工具采用过程如下图所示：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220315143223817.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220315143223817.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220315143223817" style="zoom:50%;"><h4 id="2-1-准备过程的四个活动"><a href="#2-1-准备过程的四个活动" class="headerlink" title="2.1 准备过程的四个活动"></a>2.1 准备过程的四个活动</h4><ol><li>设定目标</li><li>验证可行性和可测量性</li><li>制定方针</li><li>制定计划</li></ol><h5 id="2-1-1-设定目标"><a href="#2-1-1-设定目标" class="headerlink" title="2.1.1 设定目标"></a>2.1.1 设定目标</h5><ul><li>定义采购CASE工具高层商业目标，如<ol><li>提高组织竞争力</li><li>提高生产效率</li><li>提高产品质量</li><li>改进软件过程等</li></ol></li></ul><h5 id="2-1-2-验证可行性"><a href="#2-1-2-验证可行性" class="headerlink" title="2.1.2 验证可行性"></a>2.1.2 验证可行性</h5><p><strong>分析、确定组织采购工具在经济上和技术上的可行性</strong></p><h5 id="2-1-3-制定计划"><a href="#2-1-3-制定计划" class="headerlink" title="2.1.3 制定计划"></a>2.1.3 制定计划</h5><ul><li>制定一个具体的执行计划，包括：<ol><li>活动和任务的安排</li><li>成本估算</li><li>监督控制等内容</li></ol></li></ul><h5 id="2-1-4-准备过程的关键因素"><a href="#2-1-4-准备过程的关键因素" class="headerlink" title="2.1.4 准备过程的关键因素"></a>2.1.4 准备过程的关键因素</h5><ol><li>采用过程的目标是否清晰</li><li>采用过程的目标是否可测量</li><li>管理层的支持程度</li><li>工具在什么范围内使用的策略</li><li>是否制定了在组织内推广使用工具的计划</li><li>是否制定了工具采用过程有关的员工培训内容，以保证新旧工具的顺利更换</li></ol><h4 id="2-2-评价和选择过程"><a href="#2-2-评价和选择过程" class="headerlink" title="2.2 评价和选择过程"></a>2.2 评价和选择过程</h4><ul><li>评价和选择过程是为了从众多的候选工具中确定最合适的工具，以确保推荐的工具满足组织的目标要求</li><li>关键因素：<ol><li>对组织需要工具的需求加以构造，列出属于该工具的若干特性和子特性</li><li>对特性进行评价和测量</li><li>根据评价结果决定选择的工具</li></ol></li></ul><h4 id="2-3-试验过程"><a href="#2-3-试验过程" class="headerlink" title="2.3 试验过程"></a>2.3 试验过程</h4><ul><li>该过程为工具提供一个真实的试验环境，在这个环境中运行选用的CASE工具，确定工具满足组织的要求</li><li>该过程由四个活动组成<ol><li>起始试验</li><li>试验性能</li><li>评价试验</li><li>下一步决策</li></ol></li></ul><h4 id="2-4-转换过程"><a href="#2-4-转换过程" class="headerlink" title="2.4 转换过程"></a>2.4 转换过程</h4><ul><li>转换过程是从当前工作流程或工作习惯转为在整个组织内推广使用新工具的过程；这一过程由五个活动组成<ol><li>初始转换过程</li><li>培训</li><li>制度化</li><li>监控和持续支持</li><li>评价采用项目完成情况</li></ol></li></ul><h3 id="3-工具的评价与选择"><a href="#3-工具的评价与选择" class="headerlink" title="3. 工具的评价与选择"></a>3. 工具的评价与选择</h3><ul><li>工具的评价与选择，是对工具的质量特性进行测量和评级，以便为最终选择提供客观和可信的依据</li><li>评价方面包括：<ol><li>软件工具的一般特性</li><li>软件工具对开发过程、管理过程、维护过程等的特殊支持</li></ol></li></ul><h4 id="3-1-工具的评价选择标准"><a href="#3-1-工具的评价选择标准" class="headerlink" title="3.1 工具的评价选择标准"></a>3.1 工具的评价选择标准</h4><ul><li>工具的评价和选择标准包括:<ol><li>ISO&#x2F;IECTR14012《信息技术CASE工具的评价与选择指南》</li><li>ISO&#x2F;IEC9126《信息技术软件产品评价质量特性及其使用指南》</li><li>技术评价过程就是根据组织要求和评价标准选择一个开发工具的工程</li></ol></li></ul><h4 id="3-2-评价和选择过程的子过程"><a href="#3-2-评价和选择过程的子过程" class="headerlink" title="3.2 评价和选择过程的子过程"></a>3.2 评价和选择过程的子过程</h4><ul><li>工具的评价和选择过程包括四个子过程及13个活动：<ol><li>初始准备过程</li><li>构造过程</li><li>评价过程</li><li>选择过程</li></ol></li></ul><h5 id="3-2-1初始准备过程"><a href="#3-2-1初始准备过程" class="headerlink" title="3.2.1初始准备过程"></a>3.2.1初始准备过程</h5><ul><li>初始准备过程的目的是定义评价和选择工具具体目标和要求，由三个活动组成<ol><li>设定目标<br>提出需要CASE工具完成的功能，限制条件（成本，进度）以及获取方式（购买，开发等）</li><li>建立选择准则<br>对目标进行分解，构建选择的量化准测</li><li>制定项目计划<br>制定包括小组成员、工作进度在内的计划</li></ol></li></ul><h5 id="3-2-2-构造过程"><a href="#3-2-2-构造过程" class="headerlink" title="3.2.2 构造过程"></a>3.2.2 构造过程</h5><ul><li>构造过程的目的是根据选择工具的特性，将工具的要求细化，选择可能满足要求的工具，确定候选工具列表的过程，包括三个活动<ol><li>需求分析</li><li>收集工具信息</li><li>确定候选工具列表</li></ol></li></ul><h5 id="3-2-3-评价过程"><a href="#3-2-3-评价过程" class="headerlink" title="3.2.3 评价过程"></a>3.2.3 评价过程</h5><ul><li>评价过程的目的是产生技术评价报告，该报告将作为选择过程的主要输入信息，这一过程包括三个活动：<ol><li>评价的准备</li><li>评价CASE工具</li><li>报告评价结果</li></ol></li></ul><h6 id="3-2-3-1-评价过程的准备活动"><a href="#3-2-3-1-评价过程的准备活动" class="headerlink" title="3.2.3.1 评价过程的准备活动"></a>3.2.3.1 评价过程的准备活动</h6><ul><li>评价准备最终确定评价计划中的各种评价细节，包括：<ol><li>评价的场合</li><li>评价活动的进度安排</li><li>工具子特性用到的度量、等级等</li></ol></li></ul><h6 id="3-2-3-2-评价过程的评价活动"><a href="#3-2-3-2-评价过程的评价活动" class="headerlink" title="3.2.3.2 评价过程的评价活动"></a>3.2.3.2 评价过程的评价活动</h6><ul><li>评价过程的评价活动是将每个候选工具与选定的特性进行比较，依次完成测量、评级和评估工作<ol><li>测量是检查工具本身特有的信息，如功能、操作环境、限制条件等</li><li>评级是将测量值与评价计划中的定义值进行比较，确定等级</li><li>评估是使用评级结果及评估标准对照组织要求选定的特性和子特性进行评估</li></ol></li></ul><p>例：Jmeter与LoadRunner比较:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220315151019157.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220315151019157.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220315151019157" style="zoom:50%;"><h6 id="3-2-3-3-评价过程报告评价结果"><a href="#3-2-3-3-评价过程报告评价结果" class="headerlink" title="3.2.3.3 评价过程报告评价结果"></a>3.2.3.3 评价过程报告评价结果</h6><ul><li>评价活动的最终结果是产生评价报告，评价报告包括以下内容：<ol><li>关于工具本身的信息</li><li>关于评价过程的信息</li><li>评价结果的信息</li></ol></li></ul><h5 id="3-2-4-选择过程"><a href="#3-2-4-选择过程" class="headerlink" title="3.2.4 选择过程"></a>3.2.4 选择过程</h5><ul><li>选择过程是从评价报告的候选工具列表中确定最适合工具的过程，由四个活动组成<ol><li>选择准备</li><li>应用选择算法</li><li>推荐一个选择决定</li><li>确认选择</li></ol></li></ul><h6 id="3-2-4-1-选择过程的选择准备"><a href="#3-2-4-1-选择过程的选择准备" class="headerlink" title="3.2.4.1 选择过程的选择准备"></a>3.2.4.1 选择过程的选择准备</h6><ul><li>选择准备主要内容是最终确定各项选择准则，定义一种选择算法</li><li>常用的选择算法：<ol><li>基于成本的选择算法</li><li>基于得分的选择算法</li><li>基于排名的选择算法</li></ol></li></ul><h6 id="3-2-4-2-选择过程应用选择算法"><a href="#3-2-4-2-选择过程应用选择算法" class="headerlink" title="3.2.4.2 选择过程应用选择算法"></a>3.2.4.2 选择过程应用选择算法</h6><ul><li>应用选择算法是指把评价结果作为选择算法的输入，与候选工具相关的信息作为输出，每个工具的评价结果提供了该工具的一个技术总结，这个总结归纳为选择算法所规定的级别</li><li>选择算法将各个工具的评价结果汇总起来，给决策者提供一个分数比较</li></ul><h6 id="3-2-4-3-选择过程的选择决定"><a href="#3-2-4-3-选择过程的选择决定" class="headerlink" title="3.2.4.3 选择过程的选择决定"></a>3.2.4.3 选择过程的选择决定</h6><p>选择决定就是推荐一个或一组最合适的工具</p><h6 id="3-2-4-4-选择过程的选择确认"><a href="#3-2-4-4-选择过程的选择确认" class="headerlink" title="3.2.4.4 选择过程的选择确认"></a>3.2.4.4 选择过程的选择确认</h6><ul><li>选择确认就是将推荐的选择决定和组织最初的目标进行比较</li><li>如果确认这一个推荐结果，说明该工具能够满足组织要求</li><li>如果没有合适的工具存在，也应该能确定开发新的工具或修改一个现有的工具以满足要求</li></ul><h4 id="3-3-数据库工具的选择"><a href="#3-3-数据库工具的选择" class="headerlink" title="3.3 数据库工具的选择"></a>3.3 数据库工具的选择</h4><ul><li>数据库开发工具种类众多</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220315151623768.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220315151623768.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220315151623768" style="zoom:67%;"><h5 id="3-3-1-数据库的市场份额"><a href="#3-3-1-数据库的市场份额" class="headerlink" title="3.3.1 数据库的市场份额"></a>3.3.1 数据库的市场份额</h5><ul><li>2015年大公司数据库市场份额</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220315151718525.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220315151718525.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220315151718525" style="zoom:67%;"><h5 id="3-3-2-数据库开发工具的变化趋势"><a href="#3-3-2-数据库开发工具的变化趋势" class="headerlink" title="3.3.2 数据库开发工具的变化趋势"></a>3.3.2 数据库开发工具的变化趋势</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220315151751722.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220315151751722.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220315151751722" style="zoom: 80%;"><h5 id="3-3-3-数据库的客户流向"><a href="#3-3-3-数据库的客户流向" class="headerlink" title="3.3.3 数据库的客户流向"></a>3.3.3 数据库的客户流向</h5><ul><li>2016年各数据库的客户流向</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220315151840487.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220315151840487.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220315151840487" style="zoom:50%;"><h3 id="4-工具切换"><a href="#4-工具切换" class="headerlink" title="4. 工具切换"></a>4. 工具切换</h3><ul><li>当软件企业采购了合适的软件工具之后，就要在组织内部推广使用</li><li>如果组织内部原来使用一种软件工具，现在要使用新的工具，就需要进行工具的切换，工具切换包括两个过程：<ol><li>系统切换的准备工作</li><li>工具切换和运行方案选择</li></ol></li></ul><h4 id="4-1-系统切换的准备工作"><a href="#4-1-系统切换的准备工作" class="headerlink" title="4.1 系统切换的准备工作"></a>4.1 系统切换的准备工作</h4><ul><li>系统切换的准备工作包括四个步骤<ol><li>管理部门制定切换计划书</li><li>切换人员培训</li><li>数据准备</li><li>制定系统切换的应急方案</li></ol></li></ul><h5 id="4-1-1-管理部门制定切换计划书"><a href="#4-1-1-管理部门制定切换计划书" class="headerlink" title="4.1.1 管理部门制定切换计划书"></a>4.1.1 管理部门制定切换计划书</h5><ul><li>由于工具切换涉及到整个开发团队或企业，因此管理部门需要制定详细的切换计划书，保证切换的顺利进行，包括：</li><li>切换各阶段的进展时间</li><li>参与人员</li><li>设备到位</li><li>资金配套等</li></ul><h5 id="4-1-2-切换人员培训"><a href="#4-1-2-切换人员培训" class="headerlink" title="4.1.2 切换人员培训"></a>4.1.2 切换人员培训</h5><ul><li>在系统切换前，需要对整个开发团对进行培训，让他们从技术，心理以及习惯上适应新系统，培训包括：<ol><li>新工具的特点</li><li>系统切换带来的变化和改善</li><li>新工具的使用方法和注意事项等</li></ol></li></ul><h5 id="4-1-3-切换数据准备"><a href="#4-1-3-切换数据准备" class="headerlink" title="4.1.3 切换数据准备"></a>4.1.3 切换数据准备</h5><ul><li>数据准备工作包括：<ol><li>对老系统数据进行备份</li><li>对重要数据要有专人进行核对</li><li>对没有的数据进行手工输入</li><li>对旧系统数据进行合并与转换</li></ol></li></ul><h5 id="4-1-4-应急方案"><a href="#4-1-4-应急方案" class="headerlink" title="4.1.4 应急方案"></a>4.1.4 应急方案</h5><ul><li>应急方案主要是为了处理在系统切换工程中可能发生的意外</li><li>两个作用：<ol><li>保障系统平稳切换</li><li>在新系统无法正常运行时快速切换回老系统，减少风险</li></ol></li></ul><h4 id="4-2-工具的切换和运行方案选择"><a href="#4-2-工具的切换和运行方案选择" class="headerlink" title="4.2 工具的切换和运行方案选择"></a>4.2 工具的切换和运行方案选择</h4><ul><li>新工具开发完成或购买后，经过调试与测试，就可以投入使用，此时必须将所有的老业务从原来的老系统切换到新构建的系统</li><li>有三种切换的方法：<ol><li>直接切换</li><li>并行切换</li><li>分段切换</li></ol></li></ul><h5 id="4-2-1-直接切换"><a href="#4-2-1-直接切换" class="headerlink" title="4.2.1 直接切换"></a>4.2.1 直接切换</h5><ul><li>直接切换是指在指定时刻，旧系统停止使用，同时新系统立即开始运行</li><li>优点：切换简单，节约人力、物力和时间</li><li>缺点：风险过大，一旦切换失败会影响到公司的正常运转</li></ul><h5 id="4-2-2-并行切换"><a href="#4-2-2-并行切换" class="headerlink" title="4.2.2 并行切换"></a>4.2.2 并行切换</h5><ul><li>并行切换是在一段时间内，新、旧系统各自独立运行，完成相应的工作，并可以在两个系统间对比，审核，实现平稳过渡</li><li>优点：切换安全，风险最小</li><li>缺点：两套系统同时维护，投入的人力物力加倍，转换费用最高</li></ul><h5 id="4-2-3-分段切换"><a href="#4-2-3-分段切换" class="headerlink" title="4.2.3 分段切换"></a>4.2.3 分段切换</h5><ul><li>分段切换是指分阶段、分系统地逐步实现新旧系统的交替</li><li>优点：既可避免直接方式的风险，又可避免并行切换方式的双倍代价</li><li>缺点：需要设计转换过程，较复杂</li></ul><h3 id="5-工具的维护"><a href="#5-工具的维护" class="headerlink" title="5. 工具的维护"></a>5. 工具的维护</h3><ul><li>软件开发工具和其他应用软件一样，生命周期会长达数年，在这期间，需要对工具进行维护才能达到良好的使用效果</li><li>维护必要性和目的</li><li>维护类型</li><li>维护内容</li><li>维护管理</li></ul><h4 id="5-1维护的必要性和目的"><a href="#5-1维护的必要性和目的" class="headerlink" title="5.1维护的必要性和目的"></a>5.1维护的必要性和目的</h4><ul><li>维护必要性：软件工具可能存在不尽人意的地方，比如运行效率和方便程度；另外管理环境的变化可能会对工具提出新的要求</li><li>维护目的：保证软件开发工具正常可靠的运行，并能使软件开发工具得到改善和提高，以充分发挥作用</li></ul><h4 id="5-2-软件开发工具维护的类型"><a href="#5-2-软件开发工具维护的类型" class="headerlink" title="5.2 软件开发工具维护的类型"></a>5.2 软件开发工具维护的类型</h4><ul><li>按照每次进行维护的具体目标，软件维护可以分为四类：<ol><li>完善性维护</li><li>适应性维护</li><li>纠错性维护</li><li>预防性维护</li></ol></li></ul><h5 id="5-2-1-完善性维护"><a href="#5-2-1-完善性维护" class="headerlink" title="5.2.1 完善性维护"></a>5.2.1 完善性维护</h5><ul><li>完善性维护就是在软件开发工具使用期间不断完善和加强系统功能和性能，满足用户日益增长的需求而进行的维护工作</li><li>完善性维护在整个维护工作中约占50%的工作量</li></ul><h5 id="5-2-2-适应性维护"><a href="#5-2-2-适应性维护" class="headerlink" title="5.2.2 适应性维护"></a>5.2.2 适应性维护</h5><ul><li>适应性维护是指为了让软件工具适应新的运行环境而进行的维护活动</li><li>适应性维护在整个维护工作中约占25%的工作量</li></ul><h5 id="5-2-3-纠错性维护"><a href="#5-2-3-纠错性维护" class="headerlink" title="5.2.3 纠错性维护"></a>5.2.3 纠错性维护</h5><ul><li>纠错性维护的目的在于纠正开发期间未能发现的遗留错误，对这些错误的相继发现，并对它们进行诊断和改正的过程称为纠错性维护</li><li>纠错性维护在整个维护工作中约占21%的工作量</li></ul><h5 id="5-2-4-预防性维护"><a href="#5-2-4-预防性维护" class="headerlink" title="5.2.4 预防性维护"></a>5.2.4 预防性维护</h5><ul><li>预防性维护是指维护人员主动发现系统使用中的缺陷并进行维护</li><li>预防性维护在整个维护工作中约占4%的工作量</li></ul><h4 id="5-3-软件开发工具维护的内容"><a href="#5-3-软件开发工具维护的内容" class="headerlink" title="5.3 软件开发工具维护的内容"></a>5.3 软件开发工具维护的内容</h4><ul><li>软件开发工具包括五个方面的维护内容<ol><li>程序的维护</li><li>数据文件的维护</li><li>代码的维护</li><li>机器、设备的维护</li><li>机构和人员变动的维护等</li></ol></li></ul><h4 id="5-4-软件开发工具维护的管理"><a href="#5-4-软件开发工具维护的管理" class="headerlink" title="5.4 软件开发工具维护的管理"></a>5.4 软件开发工具维护的管理</h4><ul><li>软件开发维护管理工作的执行需要有一个正规的程序：<ol><li>提出修改要求</li><li>领导批准</li><li>分配任务</li><li>验收成果</li><li>登记修改情况</li></ol></li></ul><h3 id="6-工具的采购"><a href="#6-工具的采购" class="headerlink" title="6. 工具的采购"></a>6. 工具的采购</h3><ul><li>软件工具的采购可以采取招标和投标的方式</li><li>招标和投标是一种竞价方式，通常以公开的形式进行</li><li>投标方通常由很多商家构成</li><li>招标人通过对比不同投标方的方案，选择最优的方案中标</li></ul><h4 id="6-1-招投标的基本法律主体"><a href="#6-1-招投标的基本法律主体" class="headerlink" title="6.1 招投标的基本法律主体"></a>6.1 招投标的基本法律主体</h4><ul><li>招投标至少包含两类主体：招标人和投标人</li><li>招标人也叫招标采购人，是采用招标方式进行货物、工程或服务采购的法人或其他社会经济组织</li><li>投标人是按照招标文件的规定参加投标竞争的自然人、法人或其他社会经济组织</li></ul><h5 id="6-1-1-招标人的权利"><a href="#6-1-1-招标人的权利" class="headerlink" title="6.1.1 招标人的权利"></a>6.1.1 招标人的权利</h5><ul><li>招标人有以下权利：<ol><li>自行组织或委托招标代理机构进行招标</li><li>自由选择招标代理机构并核验资质</li><li>委托招标代理机构招标时，可以参与整个招标过程，其代表可进入评标委员会</li><li>要求投标人提供有关资质情况的资料</li><li>根据评标委员会推荐的候选人确定中标人</li></ol></li></ul><h5 id="6-1-2-招标人的义务"><a href="#6-1-2-招标人的义务" class="headerlink" title="6.1.2 招标人的义务"></a>6.1.2 招标人的义务</h5><ul><li>招标人有以下义务：<ol><li>不得侵犯投标人的合法权益</li><li>委托招标代理机构进行招标时，应当向其提供招标所需的有关资料并支付委托费</li><li>接受招投标管理机构的监督管理</li><li>与中标人签订并履行合同</li></ol></li></ul><h5 id="6-1-3-投标人的权利"><a href="#6-1-3-投标人的权利" class="headerlink" title="6.1.3 投标人的权利"></a>6.1.3 投标人的权利</h5><ul><li>投标人有以下权利：<ol><li>平等的获得招标信息</li><li>要求招标人或招标代理机构对招标文件中的有关问题进行答疑</li><li>控告、检举招标过程中的违法行为</li></ol></li></ul><h5 id="6-1-4-投标人的义务"><a href="#6-1-4-投标人的义务" class="headerlink" title="6.1.4 投标人的义务"></a>6.1.4 投标人的义务</h5><ul><li>投标人有以下义务：<ol><li>保证所提供的投标文件的真实性</li><li>按招标人或招标代理机构的要求对投标文件的有关问题进行答疑</li><li>提供投标保证金或其他形式的担保</li><li>中标后与招标人签订并履行合同，未经招标人同意不得转让或分包合同</li></ol></li></ul><h4 id="6-2-投标失效的情形"><a href="#6-2-投标失效的情形" class="headerlink" title="6.2 投标失效的情形"></a>6.2 投标失效的情形</h4><ul><li>在投标生效后，遇到下列情形之一，投标失效，投标人不再受其约束:<ol><li>投标人不符合招标文件的要求</li><li>投标有效期届满</li><li>投标人终止，如死亡、解散、破产等</li></ol></li></ul><h4 id="6-3-中标和合同成立"><a href="#6-3-中标和合同成立" class="headerlink" title="6.3 中标和合同成立"></a>6.3 中标和合同成立</h4><ul><li>招投标双方签订合同，合同成立可以分为要约和承诺两个阶段<ol><li>要约：招标</li><li>承诺：合同</li></ol></li></ul><h4 id="6-4-采购的其它形式"><a href="#6-4-采购的其它形式" class="headerlink" title="6.4 采购的其它形式"></a>6.4 采购的其它形式</h4><ul><li>采购方根据掌握信息的多少，除了招标采购外，还可采用其它形式：<ol><li>竞争性谈判<br>在投标人数量低于最低招标要求的情况下，可以采用竞争性谈判</li><li>询价采购<br>事先选定合格供应商范围，然后询价采购</li><li>单一来源采购<br>与某家企业已经建立良好合作信任</li></ol></li></ul><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h3><ul><li>软件开发工具的采用过程包括：<ol><li>准备过程：目标、可行性、方针、计划</li><li>评价和选择过程：准备、构造、评价和选择</li><li>试验过程：起始、试验、评价和决策</li><li>转换过程：起始、培训、制度、监控和评价</li></ol></li><li>软件维护类型包括：完善性维护、适应性维护、纠错性维护和预防性维护</li><li>软件采购方式：招投标、竞争性谈判、询价采购、单一来源采购</li></ul><h2 id="第四章-软件需求工具"><a href="#第四章-软件需求工具" class="headerlink" title="第四章 软件需求工具"></a>第四章 软件需求工具</h2><p>提纲：</p><ul><li>软件需求概述</li><li>软件需求工程</li><li>软件需求工具概述</li><li>需求分析方法</li><li>典型的需求分析工具介绍</li></ul><h3 id="1-软件需求概述"><a href="#1-软件需求概述" class="headerlink" title="1. 软件需求概述"></a>1. 软件需求概述</h3><ul><li>需求的重要性</li><li>软件需求的质量高低决定了软件产品的成败和质量</li><li>据统计，软件中的错误大约有15%来源于软件需求；软件失败大约有50%是需求的不合理所致</li></ul><h4 id="1-1-需求是软件开发成败的关键"><a href="#1-1-需求是软件开发成败的关键" class="headerlink" title="1.1 需求是软件开发成败的关键"></a>1.1 需求是软件开发成败的关键</h4><p>软件的最大两个问题是：需求规格说明及管理客户需求</p><ol><li>需求规格说明</li><li>管理客户需求</li><li>建档</li><li>软件测试</li><li>项目管理</li><li>编码</li></ol><h4 id="1-2-软件需求错误的代价"><a href="#1-2-软件需求错误的代价" class="headerlink" title="1.2 软件需求错误的代价"></a>1.2 软件需求错误的代价</h4><ul><li>软件需求的错误在后期会被放大</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322150935467.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322150935467.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322150935467" style="zoom:50%;"><h3 id="2-软件需求工程"><a href="#2-软件需求工程" class="headerlink" title="2 软件需求工程"></a>2 软件需求工程</h3><ul><li>软件需求工程是需求供需双方采取被证明行之有效的原理、方法，通过使用适当的工具和符号体系，正确、全面地描述用户待开发系统的行为特征、质量要求、约束条件的过程</li><li>简单讲，软件需求工程就是获取用户需求的过程</li></ul><h4 id="2-1需求工程的目标"><a href="#2-1需求工程的目标" class="headerlink" title="2.1需求工程的目标"></a>2.1需求工程的目标</h4><ul><li>需求工程的目标是得到清晰、一致且无二义的需求模型</li><li>通常使用需求规格说明书（SRS）的形式来定义待开发系统的所有外部特征和内部质量属性</li></ul><h4 id="2-2需求工程涉及的角色"><a href="#2-2需求工程涉及的角色" class="headerlink" title="2.2需求工程涉及的角色"></a>2.2需求工程涉及的角色</h4><ul><li>需求工程涉及到的角色包括：<ol><li>客户</li><li>使用者</li><li>系统分析师</li><li>项目开发人员</li><li>项目管理人员</li></ol></li></ul><h4 id="2-3-需求工程的基本任务"><a href="#2-3-需求工程的基本任务" class="headerlink" title="2.3 需求工程的基本任务"></a>2.3 需求工程的基本任务</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151137059.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151137059.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322151137059" style="zoom:50%;"><h5 id="2-3-1-需求获取"><a href="#2-3-1-需求获取" class="headerlink" title="2.3.1 需求获取"></a>2.3.1 需求获取</h5><ul><li>需求获取过程将归纳和整理用户提出的各种问题和需求，从非形式化的陈述中提取用户需求</li><li>需求获取的工具是Word等文字记录工具</li></ul><h5 id="2-3-2-需求分析"><a href="#2-3-2-需求分析" class="headerlink" title="2.3.2 需求分析"></a>2.3.2 需求分析</h5><ul><li>需求分析是系统分析员将利用特定的方法和工具将需求获取过程中得到的非形式化需求进行形式化描述，最终产生需求规格说明书（SRS）</li><li>需求分析的方法包括：结构化方法，面向对象方法和原型法</li><li>需求分析的工具包括 ：DFD图，UML用例图等</li></ul><h6 id="2-3-2-1-需求的形式化表达"><a href="#2-3-2-1-需求的形式化表达" class="headerlink" title="2.3.2.1 需求的形式化表达"></a>2.3.2.1 需求的形式化表达</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151300256.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151300256.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322151300256" style="zoom:50%;"><h5 id="2-3-3-需求验证"><a href="#2-3-3-需求验证" class="headerlink" title="2.3.3 需求验证"></a>2.3.3 需求验证</h5><ul><li>需求验证是对需求规格说明书（SRS）的质量进行检验的过程</li><li>这个过程确定SRS是否存在需求遗漏、需求错误以及需求不一致的地方，如果需求不合格则需要进一步进行需求工程</li><li>需求验证的工具有Xupper（业务建模，需求追溯）</li></ul><h4 id="2-4-需求变更管理"><a href="#2-4-需求变更管理" class="headerlink" title="2.4 需求变更管理"></a>2.4 需求变更管理</h4><ul><li>保持需求稳定具有重要意义</li><li>需求变更管理为保证需求稳定提供支持，是一个正规的流程</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151433056.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151433056.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322151433056" style="zoom:80%;"><h4 id="2-5-需求的层次性"><a href="#2-5-需求的层次性" class="headerlink" title="2.5 需求的层次性"></a>2.5 需求的层次性</h4><p>软件需求具有不同的层次性，将形成不同的需求，包括：</p><ul><li>业务需求（Business Requirement）</li><li>用户需求（User Requirement）</li><li>功能需求（Functional Requirement）</li></ul><h5 id="2-5-1-业务需求"><a href="#2-5-1-业务需求" class="headerlink" title="2.5.1 业务需求"></a>2.5.1 业务需求</h5><ul><li>业务需求反映了用户对系统和产品的高层次目标要求，他们是用户组织机构流程的再现和模拟，是从用户组织机构工作流程角度进行的需求描述</li><li>业务需求使用流程图、活动图等来表达</li><li>制作业务需求的工具包括：BPwin，Microsoft Visio，UML工具等</li></ul><h6 id="2-5-1-1-业务流程举例1"><a href="#2-5-1-1-业务流程举例1" class="headerlink" title="2.5.1.1 业务流程举例1"></a>2.5.1.1 业务流程举例1</h6><ul><li><p>医生导出睡眠数据进行分析的流程</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151704490.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151704490.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322151704490" style="zoom:50%;"></li></ul><h6 id="2-5-1-2-业务流程举例2"><a href="#2-5-1-2-业务流程举例2" class="headerlink" title="2.5.1.2 业务流程举例2"></a>2.5.1.2 业务流程举例2</h6><p><strong>公积金提取办理流程图</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151757329.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151757329.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322151757329" style="zoom:50%;"><h5 id="2-5-2-用户需求"><a href="#2-5-2-用户需求" class="headerlink" title="2.5.2 用户需求"></a>2.5.2 用户需求</h5><ul><li>用户需求描述了用户使用产品必须要完成的任务</li><li>用户需求从用户的角度看系统，一般通过用例图来表达</li><li>用户需求的表达工具有 ：UML用例图</li></ul><h6 id="2-5-2-1-用户需求举例1"><a href="#2-5-2-1-用户需求举例1" class="headerlink" title="2.5.2.1 用户需求举例1"></a>2.5.2.1 用户需求举例1</h6><p>点餐系统的用例图：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151903183.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151903183.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322151903183" style="zoom:50%;"><h6 id="2-5-2-2-用户需求举例2"><a href="#2-5-2-2-用户需求举例2" class="headerlink" title="2.5.2.2 用户需求举例2"></a>2.5.2.2 用户需求举例2</h6><p><strong>学生成绩管理系统的用例图</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151947133.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322151947133.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322151947133" style="zoom:50%;"><h5 id="2-5-3-功能需求"><a href="#2-5-3-功能需求" class="headerlink" title="2.5.3 功能需求"></a>2.5.3 功能需求</h5><ul><li>功能需求定义了开发人员必须实现的软件功能，从而使用户能够完成任务，满足其业务需求</li><li>功能需求从开发人员的角度看系统，可以使用结构图表达（模块图，接口）</li><li>功能需求的表达工具有：Microsoft Visio</li></ul><h6 id="2-5-3-1-功能需求举例1"><a href="#2-5-3-1-功能需求举例1" class="headerlink" title="2.5.3.1 功能需求举例1"></a>2.5.3.1 功能需求举例1</h6><p>社交网站功能需求图：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322152048158.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322152048158.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322152048158" style="zoom:50%;"><h6 id="2-5-3-2-功能需求举例2"><a href="#2-5-3-2-功能需求举例2" class="headerlink" title="2.5.3.2 功能需求举例2"></a>2.5.3.2 功能需求举例2</h6><p>基础架构平台（IaaS）的功能需求</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322152135885.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322152135885.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322152135885" style="zoom:50%;"><h5 id="2-5-4-软件不同层次需求的关系"><a href="#2-5-4-软件不同层次需求的关系" class="headerlink" title="2.5.4 软件不同层次需求的关系"></a>2.5.4 软件不同层次需求的关系</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322152237600.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322152237600.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322152237600" style="zoom:50%;"><h5 id="2-5-5-软件需求文档的组成"><a href="#2-5-5-软件需求文档的组成" class="headerlink" title="2.5.5 软件需求文档的组成"></a>2.5.5 软件需求文档的组成</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322152312226.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322152312226.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322152312226" style="zoom:50%;"><h3 id="3-软件需求工具概述"><a href="#3-软件需求工具概述" class="headerlink" title="3 软件需求工具概述"></a>3 软件需求工具概述</h3><ul><li>软件需求工具是辅助系统分析人员对用户需求进行提取、整理和分析的辅助工具</li><li>软件需求工具使用形式化的图形符号以及形式化的描述语言来完成软件需求的开发</li></ul><h4 id="3-1-软件需求工具的分类"><a href="#3-1-软件需求工具的分类" class="headerlink" title="3.1 软件需求工具的分类"></a>3.1 软件需求工具的分类</h4><ul><li>可以按照不同的方式对软件需求分析工具进行分类：<ol><li>按自动化程度进行分类</li><li>按分析方法进行分类</li><li>按特定的应用领域进行分类</li></ol></li></ul><h5 id="3-1-1-按自动化程度进行分类"><a href="#3-1-1-按自动化程度进行分类" class="headerlink" title="3.1.1 按自动化程度进行分类"></a>3.1.1 按自动化程度进行分类</h5><ul><li>按照自动化程度可以分类两类：<ol><li>人工方式为主的分析工具，使用Word等工具按照结构化分析和设计技术进行需求分析</li><li>自动化需求分析工具，通过保证需求信息的一致性和完整性来实现需求分析的自动化，比如Xupper工具</li></ol></li></ul><h5 id="3-1-2-按照分析方法进行分类"><a href="#3-1-2-按照分析方法进行分类" class="headerlink" title="3.1.2 按照分析方法进行分类"></a>3.1.2 按照分析方法进行分类</h5><ul><li>按照支持分析方法对需求工具分类：<ol><li>支持结构化分析方法需求分析工具，这类工具支持数据流图和数据字典的生成和管理，比如BPwin</li><li>支持面向对象方法的需求分析工具，这类工具支持UML语言的表达，比如Rational Rose</li><li>支持原型化分析的需求分析工具，这类工具支持快速生成原型，比如VB</li></ol></li></ul><h6 id="3-1-2-1-手机APP原型开发工具"><a href="#3-1-2-1-手机APP原型开发工具" class="headerlink" title="3.1.2.1 手机APP原型开发工具"></a>3.1.2.1 手机APP原型开发工具</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322152630137.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322152630137.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322152630137" style="zoom:50%;"><h5 id="3-1-3-按照特定的领域进行分类"><a href="#3-1-3-按照特定的领域进行分类" class="headerlink" title="3.1.3 按照特定的领域进行分类"></a>3.1.3 按照特定的领域进行分类</h5><ul><li>按照支持的业务领域进行分类：<ol><li>支持ERP领域的需求分析工具</li><li>支持实时系统的需求分析工具</li><li>支持其它系统的需求分析工具</li></ol></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322152726901.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220322152726901.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220322152726901" style="zoom:50%;"><h4 id="3-2-需求分析工具的功能特性"><a href="#3-2-需求分析工具的功能特性" class="headerlink" title="3.2 需求分析工具的功能特性"></a>3.2 需求分析工具的功能特性</h4><ul><li>针对不同的设计方法需求分析工具应该尽量满足该设计方法的功能特性<ol><li>结构化方法</li><li>面向对象的方法</li><li>共性</li></ol></li></ul><h5 id="3-2-1-针对结构化方法"><a href="#3-2-1-针对结构化方法" class="headerlink" title="3.2.1 针对结构化方法"></a>3.2.1 针对结构化方法</h5><ol><li>支持多种分析与设计方法（SA、SADT，面向数据结构等</li><li>支持数据流图（DFD）的编辑功能</li><li>图形的一致化检查，防止数据项的重名等错误</li></ol><h5 id="3-2-2-针对面向对象的方法"><a href="#3-2-2-针对面向对象的方法" class="headerlink" title="3.2.2 针对面向对象的方法"></a>3.2.2 针对面向对象的方法</h5><ol><li>支持多种面向对象方法（如OMT、OOSE以及UML）</li><li>支持类定义和类关系描述</li><li>支持对象的交互描述</li><li>一致性检查，检查对象关系的一致性</li></ol><h5 id="3-2-3-共同特性"><a href="#3-2-3-共同特性" class="headerlink" title="3.2.3 共同特性"></a>3.2.3 共同特性</h5><ol><li>支持信息仓库</li><li>支持版本控制</li><li>支持脚本</li><li>支持生成需求规格说明书</li><li>图形化界面</li><li>形式化的需求表达</li></ol><h4 id="3-3-衡量需求工具的依据"><a href="#3-3-衡量需求工具的依据" class="headerlink" title="3.3 衡量需求工具的依据"></a>3.3 衡量需求工具的依据</h4><ul><li>可以使用以下方法对需求工具进行衡量：<ol><li>使用的方便程度，图形化界面</li><li>与设计工具的衔接程度</li><li>资源占用情况</li><li>是否提供错误检测机制</li><li>用户领域知识的提示功能</li></ol></li></ul><h3 id="4-需求分析具体方式"><a href="#4-需求分析具体方式" class="headerlink" title="4 需求分析具体方式"></a>4 需求分析具体方式</h3><ul><li>需求分析的具体方式包括：自顶向下的分析和自底向上的分析</li><li>自顶向下的分析方式采用逐层分解的方式分析系统，用数据流图和数据字典描述系统</li></ul><h4 id="4-1-数据流图"><a href="#4-1-数据流图" class="headerlink" title="4.1 数据流图"></a>4.1 数据流图</h4><ul><li>数据流图（Data Flow Diagram DFD）是从数据传递和加工的角度，以图形化的方式刻画数据流从输入到输出的变换过程。其包含三种基本元素：<ol><li>命名的箭头表示数据流</li><li>圆圈表示数据处理</li><li>矩形或其他形状表示数据存贮</li></ol></li></ul><h5 id="4-1-1-数据流图举例"><a href="#4-1-1-数据流图举例" class="headerlink" title="4.1.1 数据流图举例"></a>4.1.1 数据流图举例</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143623725.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143623725.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329143623725" style="zoom:50%;"><h5 id="4-1-2-数据流图的分层"><a href="#4-1-2-数据流图的分层" class="headerlink" title="4.1.2 数据流图的分层"></a>4.1.2 数据流图的分层</h5><p>当系统比较复杂时，为了便于理解、控制其复杂性，可以采用分层方法描述数据流图：</p><ol><li>一层描述系统的全貌</li><li>二层描述各子系统的结构</li><li>分解直到每层都非常清楚</li></ol><h5 id="4-1-2-1-数据流图的分层举例"><a href="#4-1-2-1-数据流图的分层举例" class="headerlink" title="4.1.2.1 数据流图的分层举例"></a>4.1.2.1 数据流图的分层举例</h5><ul><li>系统的第一层数据流图（DFD）</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143803271.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143803271.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329143803271" style="zoom:67%;"><ul><li>系统的<strong>第二层</strong>数据流图（DFD）</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143827595.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143827595.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329143827595" style="zoom:67%;"><ul><li>系统的<strong>第三层</strong>数据流图（DFD）</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143846047.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143846047.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329143846047" style="zoom:50%;"><ul><li>数据字典（Data Dictionary）是对系统中的数据的详细描述，是各类数据结构的属性清单，它与数据流图互为注释</li><li>数据字典包括6个部分：<ol><li>数据项</li><li>数据结构</li><li>数据流</li><li>数据存储</li><li>处理过程</li><li>外部实体</li></ol></li></ul><h5 id="4-2-1-数据项"><a href="#4-2-1-数据项" class="headerlink" title="4.2.1 数据项"></a>4.2.1 数据项</h5><ul><li>数据项是数据的最小单位</li><li>数据项描述 &#x3D; {数据项名，数据项含义说明，别名，数据类型，长度，取值范围，取值含义，与其他数据项的逻辑关系}</li><li>例如：<br>{ 名字，学生姓名，String,  128Bytes， 字符，在学生记录中使用}</li></ul><h5 id="4-2-2-数据结构"><a href="#4-2-2-数据结构" class="headerlink" title="4.2.2 数据结构"></a>4.2.2 数据结构</h5><ul><li>数据结构是数据项的有意义的组合</li><li>数据结构描述&#x3D; {数据结构名，含义说明，组成：{数据项或数据结构} }</li><li>例如：<br>{ 学生，学生基本信息，组成：{名字，出生年月，性别，学院、专业，年级…}}</li></ul><h5 id="4-2-3-数据流"><a href="#4-2-3-数据流" class="headerlink" title="4.2.3 数据流"></a>4.2.3 数据流</h5><ul><li>数据流可以是数据项或数据结构，它表示某一处理过程中数据在系统内的传输路径</li><li>数据流描述&#x3D; {数据流名，说明，数据流来源，数据流去向，组成：{数据结构}，平均流量，高峰期流量}</li><li>例如：<br>{学生信息流，传输修改的学生信息，信息编辑器，数据库，组成：{学生…}, 50个&#x2F;s, 1000&#x2F;s}</li></ul><h5 id="4-2-4-数据存储"><a href="#4-2-4-数据存储" class="headerlink" title="4.2.4 数据存储"></a>4.2.4 数据存储</h5><ul><li>数据存储是数据的存放场所，也是数据流的来源或去向之一</li><li>数据存储描述&#x3D; {数据存储名，说明，编号，流入的数据流，流出的数据流，组成{数据结构}，数据量，存取方式}</li><li>例如：<br>{学生信息存贮，学生信息，00001，学生信息流，None，组成：{学生…}, 50个,批处理 }</li></ul><h5 id="4-2-5-处理过程"><a href="#4-2-5-处理过程" class="headerlink" title="4.2.5 处理过程"></a>4.2.5 处理过程</h5><ul><li>处理过程是对数据流的处理，数据字典中的处理过程只描述说明性的信息</li><li>处理过程描述&#x3D; {处理过程名，编号，说明，输入：{数据流}，输出：{数据流}，处理：{简要说明}}</li><li>例如：<br>{学生编辑， 00011，输入学生信息，输入：{学生…},输出：{学生…}，处理：{编辑}}</li></ul><h5 id="4-2-6-外部实体"><a href="#4-2-6-外部实体" class="headerlink" title="4.2.6 外部实体"></a>4.2.6 外部实体</h5><ul><li>外部实体是系统的人机界面，系统的数据流由外部实体流入，经过加工处理之后，向外部实体流出</li><li>外部实体描述&#x3D; {外部实体名字，编号，输入：{数据流}，输出：{数据流} }</li><li>例如：<br>{借书登记终端， 00018，输入：{借阅信息},输出：{结果} }</li></ul><h4 id="4-3-结构化分析模型结构"><a href="#4-3-结构化分析模型结构" class="headerlink" title="4.3 结构化分析模型结构"></a>4.3 结构化分析模型结构</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329144400655.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329144400655.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329144400655" style="zoom:50%;"><h4 id="4-4-实体关系图"><a href="#4-4-实体关系图" class="headerlink" title="4.4 实体关系图"></a>4.4 实体关系图</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329144425571.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329144425571.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329144425571" style="zoom: 50%;"><h4 id="4-5-状态图"><a href="#4-5-状态图" class="headerlink" title="4.5 状态图"></a>4.5 状态图</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329144443500.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329144443500.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329144443500" style="zoom:50%;"><h4 id="4-6-常用的需求图形分析工具"><a href="#4-6-常用的需求图形分析工具" class="headerlink" title="4.6 常用的需求图形分析工具"></a>4.6 常用的需求图形分析工具</h4><ul><li>UML图</li><li>数据流图（DFD）</li><li>数据字典（DD）</li><li>判定表（Decision Table）</li><li>判定树（Decision Tree)</li><li>输入处理输出图（IPO）</li><li>Warnier图（表示数据层次结构）</li></ul><h3 id="5-典型的需求分析工具介绍"><a href="#5-典型的需求分析工具介绍" class="headerlink" title="5.典型的需求分析工具介绍"></a>5.典型的需求分析工具介绍</h3><ul><li>有各种需求分析工具，典型的包括：<ol><li>BPwin</li><li>Microsoft Visio</li><li>UML工具</li><li>Word</li></ol></li></ul><h4 id="5-1-BPwin工具简介"><a href="#5-1-BPwin工具简介" class="headerlink" title="5.1 BPwin工具简介"></a>5.1 BPwin工具简介</h4><ul><li>BPWin是美国CA公司研发的用于业务流程可视化、分析和提高业务处理能力的建模环境</li><li>BPwin可以构建以下几种模型：<ol><li>工作流建模</li><li>数据流建模</li><li>功能建模</li></ol></li></ul><h5 id="5-1-1-BPwin工具的特点"><a href="#5-1-1-BPwin工具的特点" class="headerlink" title="5.1.1 BPwin工具的特点"></a>5.1.1 BPwin工具的特点</h5><ul><li>BPwin具有以下几个特点<ol><li>可构建各种需求模型</li><li>将与建立过程模型的有关任务自动化</li><li>为复杂项目的分析提供统一的分析环境</li><li>可与模型管理工具ModelMart集成使用</li><li>可与数据建模工具ERwin集成使用</li><li>符合美国政府FIPS标准</li><li>支持Unicode</li></ol></li></ul><h5 id="5-1-2-BPwin工具界面"><a href="#5-1-2-BPwin工具界面" class="headerlink" title="5.1.2 BPwin工具界面"></a>5.1.2 BPwin工具界面</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329144715481.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329144715481.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329144715481" style="zoom:50%;"><h4 id="5-2-Microsoft-Visio工具简介"><a href="#5-2-Microsoft-Visio工具简介" class="headerlink" title="5.2 Microsoft Visio工具简介"></a>5.2 Microsoft Visio工具简介</h4><ul><li>Microsoft Visio是流程图和矢量绘图软件</li><li>Microsoft Visio软件可以方便地绘制业务流程图、网络图、工作流图表、数据库模型和软件图表等，是用户直观地了解系统的业务流程和系统状态</li></ul><h5 id="5-2-1-Microsoft-Visio工具界面"><a href="#5-2-1-Microsoft-Visio工具界面" class="headerlink" title="5.2.1 Microsoft Visio工具界面"></a>5.2.1 Microsoft Visio工具界面</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329144807458.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329144807458.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329144807458" style="zoom:67%;"><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h3><ul><li>需求工程主要包括需求开发和需求管理两个部分，其中的需求开发又包括需求获取、需求分析和需求验证三个方面</li><li>需求通常分为三个层次：业务需求、用户需求和功能需求</li><li>需求分析方法，包括：面向结构的分析方法和面向对象的分析方法</li><li>面向结构的需求分析方法包括：数据流图和数据字典的概念</li></ul><h2 id="第五章-软件设计工具"><a href="#第五章-软件设计工具" class="headerlink" title="第五章 软件设计工具"></a>第五章 软件设计工具</h2><h3 id="提纲-1"><a href="#提纲-1" class="headerlink" title="提纲"></a>提纲</h3><ul><li>软件设计概述</li><li>软件设计的基本原理</li><li>软件设计过程</li><li>结构化设计方法</li><li>面向对象的设计方法</li><li>典型的设计工具介绍</li></ul><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><h3 id="1-软件设计概述"><a href="#1-软件设计概述" class="headerlink" title="1 软件设计概述"></a>1 软件设计概述</h3><ul><li>设计是指应用各种技术和原理对一个设备、一个过程或一个系统做出足够详细的规定，使之能够在物理上得以实现</li><li>软件设计是一个把软件需求转化为软件表示的过程，也就是把它加工为在程序细节上非常接近于源码的软件表示</li></ul><h4 id="1-1-软件设计的概念"><a href="#1-1-软件设计的概念" class="headerlink" title="1.1 软件设计的概念"></a>1.1 软件设计的概念</h4><ul><li>软件设计是把用户需求准确转化为软件产品或者系统的方法</li><li>软件设计是后续所有软件工程活动的基础（软件编码、测试、维护）</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329135552310.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329135552310.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329135552310" style="zoom: 50%;"><h4 id="1-2-软件设计的两个过程"><a href="#1-2-软件设计的两个过程" class="headerlink" title="1.2 软件设计的两个过程"></a>1.2 软件设计的两个过程</h4><ul><li>软件设计可以分成两个过程<ol><li>概要设计<ul><li>概要设计的主要任务是确定软件的体系结构及其接口，概要设计又可以分为结构设计，接口设计和数据设计</li></ul></li><li>详细设计<ul><li>详细设计则是确定每一个功能模块算法和数据结构，又称为过程设计</li></ul></li></ol></li></ul><h5 id="1-2-1-软件的概要设计组成"><a href="#1-2-1-软件的概要设计组成" class="headerlink" title="1.2.1 软件的概要设计组成"></a>1.2.1 软件的概要设计组成</h5><ol><li>结构设计<ul><li>确定软件系统各主要部件之间的关系</li></ul></li><li>接口设计<ul><li>描述软件和协作系统之间以及软件与人之间的通讯</li></ul></li><li>数据设计<ul><li>对各种全局数据结构的定义，将创建的信息域模型变换为数据结构</li></ul></li></ol><h5 id="1-2-2-系统结构图举例"><a href="#1-2-2-系统结构图举例" class="headerlink" title="1.2.2 系统结构图举例"></a>1.2.2 系统结构图举例</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329135909125.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329135909125.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329135909125" style="zoom: 67%;"><h4 id="1-3-软件设计的重要性"><a href="#1-3-软件设计的重要性" class="headerlink" title="1.3 软件设计的重要性"></a>1.3 软件设计的重要性</h4><p>软件设计非常重要，这是因为：</p><ul><li>软件设计是把软件需求转换为软件产品的重要步骤</li><li>软件设计做出的决策，最终会影响到软件实现的成败</li><li>软件设计阶段是在软件开发中形成质量的关键环节</li><li>设计是软件工程中软件维护的基础</li></ul><h4 id="1-4-软件设计的要求"><a href="#1-4-软件设计的要求" class="headerlink" title="1.4 软件设计的要求"></a>1.4 软件设计的要求</h4><ol><li>软件设计既要实现分析模型中所涉及的所有显式需求，又要实现用户希望的所有隐式需求</li><li>设计应该是对编程人员、测试人员以及维护人员可读的，以便于在后期过程中得到指导</li></ol><ul><li>从实现的角度看，设计应给出相关数据功能及其行为相关的软件全貌</li></ul><h3 id="2-软件设计的基本原理"><a href="#2-软件设计的基本原理" class="headerlink" title="2. 软件设计的基本原理"></a>2. 软件设计的基本原理</h3><p>软件设计的基本原理包括</p><ol><li>分解与抽象</li><li>模块化</li><li>信息隐藏</li><li>模块独立性</li></ol><h4 id="2-1分解与抽象"><a href="#2-1分解与抽象" class="headerlink" title="2.1分解与抽象"></a>2.1分解与抽象</h4><ul><li>分解是指有计划地将系统分解成足够小的子系统</li><li>分解是控制软件复杂性的基本手段</li><li>抽象是把事物本质的共同特征提取出来从而不考虑细节，抽象是一个逐步的过程，抽象可得到接口</li></ul><h4 id="2-2-模块化"><a href="#2-2-模块化" class="headerlink" title="2.2 模块化"></a>2.2 模块化</h4><ul><li><p>模块化是把一个待开发软件分解成若干个与语言相对应的子功能</p></li><li><p>模块化是指解决一个复杂问题时自顶向下逐层把软件系统划分成若干个子模块的过程</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329140447732.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329140447732.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329140447732" style="zoom: 67%;"></li></ul><h5 id="2-2-1-模块分解的标准"><a href="#2-2-1-模块分解的标准" class="headerlink" title="2.2.1 模块分解的标准"></a>2.2.1 模块分解的标准</h5><p>用以下5条标准来评价模块分解：</p><ol><li>可分解性<ul><li>有效分解降低系统复杂性</li></ul></li><li>可组装性<ul><li>利用现有模块组装新系统的能力，使模块可重用</li></ul></li><li>可理解性<ul><li>系统易于理解便于构造和修改</li></ul></li><li>模块连续性<ul><li>系统的微小变动只引起单个模块的修改</li></ul></li><li>模块保护性<ul><li>模块内部的异常情况将被限制在模块内</li></ul></li></ol><h4 id="2-3-信息隐藏"><a href="#2-3-信息隐藏" class="headerlink" title="2.3 信息隐藏"></a>2.3 信息隐藏</h4><ul><li>信息隐藏是指一个模块包含的信息，对于外部而言是不可直接访问的，只有通过接口进行访问</li></ul><h4 id="2-4-模块独立性"><a href="#2-4-模块独立性" class="headerlink" title="2.4  模块独立性"></a>2.4  模块独立性</h4><ul><li>模块独立性是指每个模块都是独立的，与其它模块的联系最少并且接口简单</li><li>模块独立性是评价设计好坏的重要指标</li><li>模块独立性的要求是高内聚和低耦合</li><li>最紧密的内聚是功能内聚</li><li>最松散的耦合是非直接耦合</li></ul><h5 id="2-4-1-模块内聚性"><a href="#2-4-1-模块内聚性" class="headerlink" title="2.4.1  模块内聚性"></a>2.4.1  模块内聚性</h5><ul><li>内聚性是指一个模块内部各个元素间彼此结合紧密程度的度量。内聚性包括：<ol><li>功能内聚</li><li>顺序内聚（内部顺序内聚）</li><li>通信内聚（内部数据内聚）</li><li>时间内聚（临时内聚）</li><li>过程内聚（无关顺序内聚）</li><li>逻辑内聚（控制内聚）</li><li>偶然内聚（混乱内聚）</li></ol></li></ul><h6 id="2-4-1-1-临时性的内聚性"><a href="#2-4-1-1-临时性的内聚性" class="headerlink" title="2.4.1.1 临时性的内聚性"></a>2.4.1.1 临时性的内聚性</h6><ul><li>临时内聚（temporal cohesion）是指含有一些因为需要同时执行才放到一起的操作</li><li>例如<ol><li>startup()</li><li>shutdown()</li><li>Initialize()</li></ol></li></ul><h6 id="2-4-1-2-逻辑上的内聚性"><a href="#2-4-1-2-逻辑上的内聚性" class="headerlink" title="2.4.1.2 逻辑上的内聚性"></a>2.4.1.2 逻辑上的内聚性</h6><ul><li>逻辑内聚（logical cohesion）是指若干操作被放入到同一个子程序中，通过传入的控制标志选择执行其中的一项操作，而这些操作之间没有逻辑上的关联</li><li>通过传入控制标志来控制一个子程序的执行打破了子程序封装性</li><li>例如：InputAll(flag)， EditAll(flag)等</li></ul><h5 id="2-4-2-模块耦合度"><a href="#2-4-2-模块耦合度" class="headerlink" title="2.4.2  模块耦合度"></a>2.4.2  模块耦合度</h5><ul><li>耦合度是指模块间互相连接的紧密程度的度量。耦合性包括：<ol><li>非直接耦合</li><li>数据耦合（简单变量耦合）</li><li>标记耦合（复杂变量耦合）</li><li>控制耦合（控制参数）</li><li>外部耦合（全局变量）</li><li>内容耦合（相互访问）</li></ol></li></ul><h3 id="3-软件设计过程"><a href="#3-软件设计过程" class="headerlink" title="3 软件设计过程"></a>3 软件设计过程</h3><ul><li>软件设计的过程是把分析阶段产生的软件需求规格说明书转换为适当手段表示的软件设计文档，其设计过程如下：</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329141328232.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329141328232.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329141328232" style="zoom:50%;"><h3 id="4-结构化设计方法"><a href="#4-结构化设计方法" class="headerlink" title="4 结构化设计方法"></a>4 结构化设计方法</h3><ul><li>软件设计的方法是指开发阶段设计软件时所使用的方法</li><li>软件设计方法可以分为：<ol><li>结构化设计方法（Structured Design, SD）</li><li>面向对象的设计方法（Object-Oriented Design, OOD）</li></ol></li></ul><h4 id="4-1-结构化设计方法概述"><a href="#4-1-结构化设计方法概述" class="headerlink" title="4.1 结构化设计方法概述"></a>4.1 结构化设计方法概述</h4><ul><li>结构化设计方法是基于模块化、自顶向下分解及结构化设计等程序设计技术基础发展起来的</li><li>结构化设计是早期的程序设计方法，至今仍然起到重要作用</li></ul><h4 id="4-2-结构化设计方法基本思想"><a href="#4-2-结构化设计方法基本思想" class="headerlink" title="4.2 结构化设计方法基本思想"></a>4.2 结构化设计方法基本思想</h4><ul><li>结构化设计的基本思想是将软件设计成由相对独立、单一化功能的模块组成的结构</li><li>结构化设计方法给出一组帮助设计人员在模块层次上区分设计质量的原理和技术，以数据流图为基础得到软件的模块结构</li></ul><h4 id="4-3-模块化设计的原则"><a href="#4-3-模块化设计的原则" class="headerlink" title="4.3 模块化设计的原则"></a>4.3 模块化设计的原则</h4><ol><li>使每个模块执行一个功能</li><li>每个模块用过程语句调用其它模块</li><li>模块间传送的参数做数据用</li><li>模块间共用的信息尽量少</li></ol><ul><li>总结起来就是高内聚、低耦合</li></ul><h4 id="4-4-结构化设计方法的步骤"><a href="#4-4-结构化设计方法的步骤" class="headerlink" title="4.4 结构化设计方法的步骤"></a>4.4 结构化设计方法的步骤</h4><ol><li>评审和细化数据流图</li><li>确定数据流图的类型</li><li>把数据流图映射到软件模块结构，设计出模块结构的上层</li><li>基于数据流图逐步分解高层模块，设计中下层模块</li><li>对模块结构进行优化</li><li>描述模块结构</li></ol><h5 id="4-4-1-数据流图到结构图的转换"><a href="#4-4-1-数据流图到结构图的转换" class="headerlink" title="4.4.1 数据流图到结构图的转换"></a>4.4.1 数据流图到结构图的转换</h5><ul><li>面向数据流的设计方法把信息流映射成软件结构，信息流的类型决定了映射的方法，典型的信息流类型：<ol><li>变换型</li><li>事务型</li></ol></li></ul><h6 id="4-4-1-1-变换型信息流"><a href="#4-4-1-1-变换型信息流" class="headerlink" title="4.4.1.1 变换型信息流"></a>4.4.1.1 变换型信息流</h6><ul><li>变换型信息流是指信息沿输入通路进入系统，同时由外部形式转换为内部形式，然后经过变化中心加工然后沿输出通路再转变为外部形式</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329142145754.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329142145754.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329142145754" style="zoom:67%;"><h6 id="4-4-1-2-事务型信息流"><a href="#4-4-1-2-事务型信息流" class="headerlink" title="4.4.1.2 事务型信息流"></a>4.4.1.2 事务型信息流</h6><ul><li>事物型信息流是指数据沿输入通路到达一个处理T，这个处理根据数据类型在若干个动作序列中选择一个来执行</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329142202038.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329142202038.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329142202038" style="zoom:50%;"><h4 id="4-5-结构化设计的两个阶段"><a href="#4-5-结构化设计的两个阶段" class="headerlink" title="4.5 结构化设计的两个阶段"></a>4.5 结构化设计的两个阶段</h4><ul><li>结构化设计包括两个阶段：<ol><li>概要设计阶段</li><li>详细设计阶段</li></ol></li></ul><h5 id="4-5-1-概要设计阶段"><a href="#4-5-1-概要设计阶段" class="headerlink" title="4.5.1 概要设计阶段"></a>4.5.1 概要设计阶段</h5><ul><li>概要设计阶段也称为总体设计，主要任务是把系统功能需求分配给软件结构，形成软件的模块结构图，即将数据流图DFD等转换为系统结构图</li><li>本阶段的描述工具是结构图</li></ul><h6 id="4-5-1-1-概要设计的基本任务"><a href="#4-5-1-1-概要设计的基本任务" class="headerlink" title="4.5.1.1 概要设计的基本任务"></a>4.5.1.1 概要设计的基本任务</h6><ul><li>概要设计的基本任务包括：<ol><li>软件系统结构设计<ul><li>划分功能模块、确定模块间调用关系</li></ul></li><li>数据结构及数据库设计<ul><li>实现需求定义和规格过程中提出的数据对象的逻辑表示</li></ul></li><li>编写概要设计文档</li><li>概要设计文档评审</li></ol></li></ul><h6 id="4-5-1-2-结构化设计的目的任务"><a href="#4-5-1-2-结构化设计的目的任务" class="headerlink" title="4.5.1.2 结构化设计的目的任务"></a>4.5.1.2 结构化设计的目的任务</h6><ul><li>结构化设计的目的：使程序的结构尽可能地反映要解决问题的结构</li><li>结构化设计的任务：把需求分析得到的数据流图变换为系统结构图</li></ul><h5 id="4-5-2-结构图"><a href="#4-5-2-结构图" class="headerlink" title="4.5.2 结构图"></a>4.5.2 结构图</h5><ul><li>结构图反应了系统的功能实现以及模块与模块之间的联系与通讯</li><li>结构图的基本组成<ul><li>模块</li><li>数据</li><li>调用</li></ul></li></ul><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329142546960.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329142546960.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329142546960"></p><h6 id="4-5-2-1-结构图的基本术语"><a href="#4-5-2-1-结构图的基本术语" class="headerlink" title="4.5.2.1 结构图的基本术语"></a>4.5.2.1 结构图的基本术语</h6><ol><li>深度：模块结构的层次数</li><li>宽度：同一层模块的最大模块数</li><li>扇出：一个模块直接调用的其它模块数</li><li>扇入：调用一个给定模块的模块个数</li></ol><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143054181.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143054181.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329143054181" style="zoom:50%;"><h5 id="4-5-3-详细设计及其工具"><a href="#4-5-3-详细设计及其工具" class="headerlink" title="4.5.3 详细设计及其工具"></a>4.5.3 详细设计及其工具</h5><ul><li>详细设计为软件结构图中的每一个模块确定采用的算法，模块内部的数据结构</li><li>详细设计的工具：<ol><li>程序流程图</li><li>N-S图</li><li>伪代码等</li></ol></li></ul><h6 id="4-5-3-1-流程图"><a href="#4-5-3-1-流程图" class="headerlink" title="4.5.3.1 流程图"></a>4.5.3.1 流程图</h6><ul><li>流程图用方框表示各种操作，菱形表示分支</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143227005.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143227005.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329143227005" style="zoom:50%;"><h6 id="4-5-3-2-N-S图"><a href="#4-5-3-2-N-S图" class="headerlink" title="4.5.3.2 N-S图"></a>4.5.3.2 N-S图</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143320869.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143320869.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329143320869" style="zoom:50%;"><h3 id="5-面向对象方法的设计方法"><a href="#5-面向对象方法的设计方法" class="headerlink" title="5 面向对象方法的设计方法"></a>5 面向对象方法的设计方法</h3><ul><li>面向对象方法通过一组互相关联的模型详细表示类之间的关系和对象的行为，这些模型从不同的侧面表示了软件的体系结构，包括：<ol><li>静态逻辑模型（对象模型）</li><li>动态逻辑模型（动态模型）</li><li>静态物理模型</li><li>动态物理模型</li></ol></li></ul><h4 id="5-1-面向对象方法的4种模型"><a href="#5-1-面向对象方法的4种模型" class="headerlink" title="5.1 面向对象方法的4种模型"></a>5.1 面向对象方法的4种模型</h4><ul><li>静态逻辑模型——描述类及类的实例化、关联、聚集、继承等关系，表达了对象之间的静态逻辑关系</li><li>动态逻辑模型——描述对象之间的相互作用，相互作用通过一组协同的对象，对象之间的消息序列，参考对象的可见性来定义系统运行时的行为，表达了对象之间的动态逻辑关系</li></ul><h5 id="5-1-1-UML图形举例-类图"><a href="#5-1-1-UML图形举例-类图" class="headerlink" title="5.1.1 UML图形举例-类图"></a>5.1.1 UML图形举例-类图</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143505505.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329143505505.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329143505505" style="zoom:50%;"><h5 id="5-1-2-UML图形举例-时序图"><a href="#5-1-2-UML图形举例-时序图" class="headerlink" title="5.1.2 UML图形举例-时序图"></a>5.1.2 UML图形举例-时序图</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329144936835.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329144936835.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329144936835" style="zoom:50%;"><h5 id="5-1-3-面向对象方法的四种模型"><a href="#5-1-3-面向对象方法的四种模型" class="headerlink" title="5.1.3 面向对象方法的四种模型"></a>5.1.3 面向对象方法的四种模型</h5><ul><li>静态物理模型——通过模块描述代码的布局，比如模块与文件的关系</li><li>动态物理模型——描述软件的进程和线程体系结构，描述了对象运行时载体之间的关系</li><li>面向对象的四种模型通常使用UML语言表达</li></ul><h5 id="5-1-4-UML图形举例-组件图"><a href="#5-1-4-UML图形举例-组件图" class="headerlink" title="5.1.4 UML图形举例-组件图"></a>5.1.4 UML图形举例-组件图</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329145031136.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329145031136.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329145031136" style="zoom:50%;"><h5 id="5-1-5-UML图形举例-活动图"><a href="#5-1-5-UML图形举例-活动图" class="headerlink" title="5.1.5 UML图形举例-活动图"></a>5.1.5 UML图形举例-活动图</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329145102482.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329145102482.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329145102482" style="zoom: 67%;"><h4 id="5-2-UML语言的表示法"><a href="#5-2-UML语言的表示法" class="headerlink" title="5.2  UML语言的表示法"></a>5.2  UML语言的表示法</h4><ul><li><p>UML表示法由5类共9种图形来定义</p><ol><li>用例图（Use case diagram），从用户角度描述系统功能</li><li>静态图（Static diagram），描述系统的静态逻辑结构，包括类图、对象图和包图</li><li>行为图（Behavior diagram），描述系统的动态模型和组成对象间的交互关系，包括状态图和活动图</li><li>交互图（Interactive diagram），描述对象间的交互关系，包括时序图和协作图</li><li>实现图（Implementation diagram），包括组件图和配置图</li></ol></li><li><p>UML语言包括了这些图形的语义、语法和说明，提供了静态、动态、系统环境及组织结构的模型</p></li></ul><h5 id="5-2-1-UML图形举例"><a href="#5-2-1-UML图形举例" class="headerlink" title="5.2.1 UML图形举例"></a>5.2.1 UML图形举例</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329145236199.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329145236199.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329145236199" style="zoom:50%;"><h4 id="5-3-UML的4-1模型视图"><a href="#5-3-UML的4-1模型视图" class="headerlink" title="5.3 UML的4+1模型视图"></a>5.3 UML的4+1模型视图</h4><ul><li>UML可以通过称为4+1视图模型的软件体系结构来了解系统</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329150905891.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329150905891.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329150905891" style="zoom:50%;"><h4 id="5-4-UML的5个模型视图的作用"><a href="#5-4-UML的5个模型视图的作用" class="headerlink" title="5.4 UML的5个模型视图的作用"></a>5.4 UML的5个模型视图的作用</h4><ol><li>用例视图：定义了系统的外部行为</li><li>设计视图：描述的是支持用例视图中规定功能需求的逻辑结构</li><li>实现视图：描述构造系统的物理组件</li><li>进程视图：设计系统中的并发性问题</li><li>部署视图：描述物理组件如何在系统的实际环境中分布</li></ol><h4 id="5-5-UML的图与视图的关系"><a href="#5-5-UML的图与视图的关系" class="headerlink" title="5.5 UML的图与视图的关系"></a>5.5 UML的图与视图的关系</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329145541318.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329145541318.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329145541318" style="zoom:50%;"><h4 id="5-6-用例驱动的过程"><a href="#5-6-用例驱动的过程" class="headerlink" title="5.6 用例驱动的过程"></a>5.6 用例驱动的过程</h4><ul><li>使用用例进行UML模型视图的实化和细化</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329145642706.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329145642706.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329145642706" style="zoom:50%;"><h3 id="6-StarUML软件介绍"><a href="#6-StarUML软件介绍" class="headerlink" title="6. StarUML软件介绍"></a>6. StarUML软件介绍</h3><ul><li>StarUML是一款开放源码的UML开发工具</li><li>是由韩国公司主导开发出来的产品，可以直接到StarUML网站下载</li><li>StarUML(简称SU)，是一种创建UML类图，生成类图和其他类型的统一建模语言(UML)图表的工具</li></ul><h4 id="6-1-StarUML软件特点"><a href="#6-1-StarUML软件特点" class="headerlink" title="6.1 StarUML软件特点"></a>6.1 StarUML软件特点</h4><ol><li>可绘制9款UML图：用例图、类图、序列图、状态图、活动图、通信图、模块图、部署图以及复合结构图等</li><li>正反向工程：StarUML可以依据类图的内容生成Java、C++、C#代码，也能够读取Java、C++、C#代码反向生成类图</li><li>导入Rose文件：StarUML可以读取Rational Rose生成的文件，让原先Rose的用户可以转而使用免费的StarUML</li></ol><h4 id="6-2-StarUML软件启动"><a href="#6-2-StarUML软件启动" class="headerlink" title="6.2 StarUML软件启动"></a>6.2 StarUML软件启动</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329145947717.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329145947717.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329145947717" style="zoom:50%;"><h4 id="6-3-StarUML软件界面介绍"><a href="#6-3-StarUML软件界面介绍" class="headerlink" title="6.3 StarUML软件界面介绍"></a>6.3 StarUML软件界面介绍</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329150010172.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329150010172.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329150010172" style="zoom:50%;"><h4 id="6-4-StarUML主要功能介绍"><a href="#6-4-StarUML主要功能介绍" class="headerlink" title="6.4 StarUML主要功能介绍"></a>6.4 StarUML主要功能介绍</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329150038718.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329150038718.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329150038718" style="zoom:67%;"><h3 id="7-Power-Designer软件介绍"><a href="#7-Power-Designer软件介绍" class="headerlink" title="7. Power Designer软件介绍"></a>7. Power Designer软件介绍</h3><ul><li>Power Designer 是Sybase公司的CASE工具集，它可以方便地对信息管理系统进行分析设计，几乎包含了数据库模型设计的全过程</li><li>Power Designer支持的设计模型包括：<ol><li>业务流程模型</li><li>面向对象模型</li><li>概念数据模型（数据库）</li><li>物理数据模型（数据库）</li></ol></li></ul><h4 id="7-1-PowerDesigner工具组成"><a href="#7-1-PowerDesigner工具组成" class="headerlink" title="7.1 PowerDesigner工具组成"></a>7.1 PowerDesigner工具组成</h4><ol><li>Data Architect<ul><li>数据库设计工具，创建概念和物理模型</li></ul></li><li>Process Analyst<ul><li>这部分用于创建功能模型和数据流图，创建“处理层次关系”</li></ul></li><li>App Modeler<ul><li>为客户&#x2F;服务器应用程序创建应用模型</li></ul></li><li>ODBC Administrator<ul><li>用来管理系统的各种数据源</li></ul></li></ol><h4 id="7-2-Power-Designer软件界面"><a href="#7-2-Power-Designer软件界面" class="headerlink" title="7.2 Power Designer软件界面"></a>7.2 Power Designer软件界面</h4><ul><li>软件设计的原理<ol><li>高内聚</li><li>低耦合</li></ol></li><li>软件设计的方法<ol><li>面向对象的设计方法</li><li>面向结构的设计方法</li></ol></li><li>软件设计工具<ol><li>StarUML</li><li>PowerDesigner</li></ol></li></ul><h2 id="第六章-程序设计工具"><a href="#第六章-程序设计工具" class="headerlink" title="第六章 程序设计工具"></a>第六章 程序设计工具</h2><h3 id="提纲-2"><a href="#提纲-2" class="headerlink" title="提纲"></a>提纲</h3><ul><li>计算机语言的发展</li><li>不同编程工具介绍</li><li>Visual Studio2010简介</li></ul><h3 id="1-计算机语言的发展"><a href="#1-计算机语言的发展" class="headerlink" title="1 计算机语言的发展"></a>1 计算机语言的发展</h3><ul><li>计算机编程工具依赖于编程语言，计算机语言的发展引起编程工具的发展<ol><li>机器语言</li><li>汇编语言</li><li>高级语言</li><li>4G语言</li></ol></li></ul><h4 id="1-1-机器语言"><a href="#1-1-机器语言" class="headerlink" title="1.1 机器语言"></a>1.1 机器语言</h4><ul><li>机器语言是用二进制代码表示的计算机能直接识别和执行的一种机器指令集合</li><li>机器语言是计算机能够唯一识别的语言</li><li>机器语言灵活、直接执行、速度快</li></ul><h5 id="1-1-1-机器语言示例"><a href="#1-1-1-机器语言示例" class="headerlink" title="1.1.1 机器语言示例"></a>1.1.1 机器语言示例</h5><ul><li><p>指令部份的示例</p><ul><li>0000 代表 加载（LOAD）</li><li>0001 代表 存储（STORE</li></ul></li><li><p>暂存器部份的示例</p><ul><li>0000 代表暂存器 A</li><li>0001 代表暂存器 B</li></ul></li></ul><h5 id="1-1-2-机器语言的缺点"><a href="#1-1-2-机器语言的缺点" class="headerlink" title="1.1.2 机器语言的缺点"></a>1.1.2 机器语言的缺点</h5><ol><li>与自然语言不一致，难于理解</li><li>考虑到计算机的所有细节，实现复杂</li><li>可读性差，不易维护</li><li>严重依赖于具体的计算机硬件，可移植性差，重用性差</li></ol><h4 id="1-2-汇编语言"><a href="#1-2-汇编语言" class="headerlink" title="1.2 汇编语言"></a>1.2 汇编语言</h4><ul><li>汇编语言是为了克服机器语言不易理解的缺陷而开发的一种用助记符代替机器码而形成的面向机器的语言</li><li>汇编语言亦称为符号语言</li><li>汇编语言占用空间少，运行速度快，但仍然与机器语言接近，不易开发及维护</li></ul><h5 id="1-2-1-汇编语言示例"><a href="#1-2-1-汇编语言示例" class="headerlink" title="1.2.1 汇编语言示例"></a>1.2.1 汇编语言示例</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412141319997.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412141319997.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412141319997" style="zoom:50%;"><h5 id="1-2-2-常见的汇编语言工具"><a href="#1-2-2-常见的汇编语言工具" class="headerlink" title="1.2.2 常见的汇编语言工具"></a>1.2.2 常见的汇编语言工具</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412141359173.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412141359173.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412141359173" style="zoom:50%;"><h4 id="1-3-高级语言"><a href="#1-3-高级语言" class="headerlink" title="1.3 高级语言"></a>1.3 高级语言</h4><ul><li>高级语言是为了克服汇编语言的缺点应运而生的</li><li>高级语言是与自然语言接近并为计算机所接受和执行的计算机语言</li><li>高级语言是面向用户的语言，高级语言诞生使计算机语言脱离了具体机器的限制，而且易于理解，从而促进了软件产业的巨大发展</li></ul><h5 id="1-3-1-高级语言中的C语言示例"><a href="#1-3-1-高级语言中的C语言示例" class="headerlink" title="1.3.1 高级语言中的C语言示例"></a>1.3.1 高级语言中的C语言示例</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412141511742.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412141511742.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412141511742" style="zoom: 50%;"><h5 id="1-3-2-高级语言的分类"><a href="#1-3-2-高级语言的分类" class="headerlink" title="1.3.2 高级语言的分类"></a>1.3.2 高级语言的分类</h5><ul><li>高级语言可以分为：<ol><li>解释型<br>一边编译一边执行，效率较低<br>例如：Basic，Javascript，python</li><li>编译型<br>在应用程序执行之前，先将源代码编译成机器语言，然后再调入内存中执行<br>例如：C, C++, Delphi</li></ol></li></ul><h5 id="1-3-3-常见的高级语言"><a href="#1-3-3-常见的高级语言" class="headerlink" title="1.3.3 常见的高级语言"></a>1.3.3 常见的高级语言</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412141648154.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412141648154.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412141648154" style="zoom:50%;"><h4 id="1-4-4G语言"><a href="#1-4-4G语言" class="headerlink" title="1.4 4G语言"></a>1.4 4G语言</h4><ul><li>4G（generation）语言，第四代语言基本上是传统软件工程界为了“范式开发” (prototyping) 而设计出来的语言，同时具有程序性与非程序性的特性，用来快速开发连接数据库的编程语言</li><li>如 PowerBuilder 等</li></ul><h5 id="1-4-1-4G语言简介"><a href="#1-4-1-4G语言简介" class="headerlink" title="1.4.1 4G语言简介"></a>1.4.1 4G语言简介</h5><ul><li>4GL是20世纪80年代初期由软件开发厂商提出来的</li><li>4GL具有“面向问题”及“非过程化程度高”等特点，可以大幅度地提高软件生产效率，缩短软件开发周期</li></ul><h5 id="1-4-2-4G语言的应用范围"><a href="#1-4-2-4G语言的应用范围" class="headerlink" title="1.4.2 4G语言的应用范围"></a>1.4.2 4G语言的应用范围</h5><ul><li>4G语言主要以数据库管理系统为应用基础</li><li>4G语言以数据库所提供的基本功能为核心，构造出开发高层软件的开发环境，提供了诸如报表生成器，菜单生成系统以及决策支持系统等开发组件，大大提高了开发的效率</li></ul><h6 id="1-4-2-1-查询语言和报告生成器"><a href="#1-4-2-1-查询语言和报告生成器" class="headerlink" title="1.4.2.1 查询语言和报告生成器"></a>1.4.2.1 查询语言和报告生成器</h6><ul><li>查询语言是数据库管理系统的主要工具，提供对数据库进行查询的功能</li><li>报表生成器为用户提供自动产生表报的工具</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412141936827.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412141936827.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412141936827" style="zoom:50%;"><h6 id="1-4-2-2-图形语言"><a href="#1-4-2-2-图形语言" class="headerlink" title="1.4.2.2 图形语言"></a>1.4.2.2 图形语言</h6><ul><li>图形语言以SQL语言为引擎，让用户在屏幕上以图形方式定义用户需求，系统自动生成相应的源代码</li><li>图形语言工具：SQL Windows</li><li>LABVIEW</li></ul><p>LabView图形开发语言</p><ul><li>4G语言利用现有的控件和组件来快速构建程序</li><li>LabView是一种图形化的4G语言工具</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142105613.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142105613.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412142105613" style="zoom:50%;"><h6 id="1-4-2-3-应用生成器"><a href="#1-4-2-3-应用生成器" class="headerlink" title="1.4.2.3 应用生成器"></a>1.4.2.3 应用生成器</h6><ul><li>应用生成器用来生成完整的应用系统，应用生成器可以分为交互式和编程式<ol><li>交互式：服务于维护、准备和处理报表，比如Power Builder</li><li>编程式：编程式应用生成器是为了构造复杂系统的专业程序人员设计的，比如: MATLAB, Informix 4GL</li></ol></li></ul><p>MATLAB开发语言</p><ul><li>MATLAB函数具有强大功能，便于快速形成应用程序</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142236197.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142236197.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412142236197" style="zoom:67%;"><h6 id="1-4-2-4-形式规格说明语言"><a href="#1-4-2-4-形式规格说明语言" class="headerlink" title="1.4.2.4 形式规格说明语言"></a>1.4.2.4 形式规格说明语言</h6><ul><li>形式规格说明语言避免了自然语言的歧义性，是软件自动化的基础，从形式需求出发可以自动或半自动生成某种执行语言，如Z语言</li><li>Z语言是基于一阶谓词逻辑和集合论的形式规格说明语言</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142321852.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142321852.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412142321852" style="zoom:50%;"><h5 id="1-4-3-4G语言的不足"><a href="#1-4-3-4G语言的不足" class="headerlink" title="1.4.3 4G语言的不足"></a>1.4.3 4G语言的不足</h5><ul><li>4G语言有以下几方面的不足：<ol><li>4G抽象级别较高，因此不通用</li><li>系统开销较大，耗费硬件资源，效率不高</li><li>产品种类繁多，缺乏标准，可移植性差</li><li>主要面向基于数据库的应用领域，不宜实现科学计算，高速实时系统等软件的开发</li></ol></li></ul><h5 id="1-4-4-4G语言的变化趋势"><a href="#1-4-4-4G语言的变化趋势" class="headerlink" title="1.4.4 4G语言的变化趋势"></a>1.4.4 4G语言的变化趋势</h5><ul><li>4G语言变化趋势包括：<ol><li>4G与面向对象技术进一步结合</li><li>将全面支持Internet为代表的网络分布式应用开发</li><li>将出现事实上的工业标准</li><li>将继续需要数据库管理系统的支持</li><li>开发方法将发生变革</li><li>将进一步与人工智能相结合</li></ol></li></ul><h4 id="1-5-未开的开发工具"><a href="#1-5-未开的开发工具" class="headerlink" title="1.5 未开的开发工具"></a>1.5 未开的开发工具</h4><ul><li>未来的开发工具与人工智能相结合</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142514311.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142514311.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412142514311" style="zoom:50%;"><h3 id="2-不同编程工具的介绍"><a href="#2-不同编程工具的介绍" class="headerlink" title="2. 不同编程工具的介绍"></a>2. 不同编程工具的介绍</h3><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142540354.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142540354.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412142540354" style="zoom:50%;"><h4 id="2-1-Fortran"><a href="#2-1-Fortran" class="headerlink" title="2.1 Fortran"></a>2.1 Fortran</h4><ul><li>Fortran源自于“公式翻译”（英语：Formula Translation）的缩写。它是世界上最早出现的计算机高级程序设计语言，广泛应用于科学和工程计算领域</li><li>1954年：美国IBM公司约翰·巴克斯(John Backus,77年图灵奖获得者)针对汇编语言的缺点着手研究开发FORTRAN语言。1957年：约翰·贝克斯在纽约正式对外发布Fortran程序设计语言</li></ul><h5 id="2-1-1-Fortran代码示例"><a href="#2-1-1-Fortran代码示例" class="headerlink" title="2.1.1 Fortran代码示例"></a>2.1.1 Fortran代码示例</h5><ul><li>求Fibonacci数列的前30项</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142659165.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142659165.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412142659165" style="zoom:50%;"><h4 id="2-2-Algol语言"><a href="#2-2-Algol语言" class="headerlink" title="2.2 Algol语言"></a>2.2 Algol语言</h4><ul><li>1960年艾伦.佩利（Alan J.Perlis）等在巴黎发表了”算法语言Algol 60报告”，确定了程序设计语言Algol 60（1966年图灵奖）</li><li>彼得.诺尔博士在1960年主编了《算法语言Algol 60报告》（2005年图灵奖）</li><li>ALGOL语言（ALGOrithmic Language）引进了许多新概念：局部性概念、动态、递归、巴科斯-诺尔范式BNF（Backus-Naur Form）等</li><li>这种编程语言影响了之后的 CPL、BCPL、B 语言、Pascal、Simula、C 语言等。</li></ul><h4 id="2-3-Cobol语言"><a href="#2-3-Cobol语言" class="headerlink" title="2.3 Cobol语言"></a>2.3 Cobol语言</h4><ul><li>Cobol（Common Business-Oriented Language）语言1959-1961年开发</li><li>Cobol语言主要适于商业应用，今天仍然被广泛应用</li><li>COBOL的重要性：2019年，世界上95％的ATM交易仍然在通过COBOL程序，80％的现场交易也间接依赖于它们，超过40％的银行仍然使用COBOL作为其系统基础。</li></ul><h5 id="2-3-1-Cobol语言代码"><a href="#2-3-1-Cobol语言代码" class="headerlink" title="2.3.1 Cobol语言代码"></a>2.3.1 Cobol语言代码</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142911678.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412142911678.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412142911678" style="zoom:50%;"><h4 id="2-4-BASIC"><a href="#2-4-BASIC" class="headerlink" title="2.4 BASIC"></a>2.4 BASIC</h4><ul><li>BASIC （Beginners’ All-purpose Symbolic Instruction Code）是一种解释性的语言</li><li>BASIC由Dartmouth学院的John G.Kemeny与Thomas E.Kurtz两位教授在1964年5月研制出来的。1975年，比尔·盖茨把它移植到PC上</li><li>BASIC语言简单易学，因此广为使用</li></ul><h5 id="2-4-1-BASIC代码示例"><a href="#2-4-1-BASIC代码示例" class="headerlink" title="2.4.1 BASIC代码示例"></a>2.4.1 BASIC代码示例</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412143033330.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412143033330.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412143033330" style="zoom:50%;"><h5 id="2-4-2-VisualBasic"><a href="#2-4-2-VisualBasic" class="headerlink" title="2.4.2 VisualBasic"></a>2.4.2 VisualBasic</h5><ul><li>Visual basic是Microsoft公司1991年开发的图形化和快速应用程序开发系统，包含事件驱动机制的可视化设计语言</li><li>该系统可以使用ADO连接到数据库，也可以创建ActiveX控件</li></ul><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412143128759.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412143128759.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412143128759"></p><h4 id="2-5-Pascal"><a href="#2-5-Pascal" class="headerlink" title="2.5 Pascal"></a>2.5 Pascal</h4><ul><li>Pascal是由瑞士Niklaus Wirth教授（84年图灵奖获得者）于六十年代末设计并创立的一种计算机通用高级程序设计语言</li><li>Pascal的取名原本就是为了纪念十七世纪法国著名哲学家和数学家Blaise Pascal</li><li>Pascal是最早出现的结构化编程语言</li></ul><h5 id="2-5-1-Pascal语言的特点"><a href="#2-5-1-Pascal语言的特点" class="headerlink" title="2.5.1 Pascal语言的特点"></a>2.5.1 Pascal语言的特点</h5><ul><li>严格的结构化形式</li><li>丰富完备的数据类型</li><li>运行效率高</li><li>查错能力强</li><li>适于描述数值和非数值的问题</li></ul><h5 id="2-5-2-Pascal代码示例"><a href="#2-5-2-Pascal代码示例" class="headerlink" title="2.5.2 Pascal代码示例"></a>2.5.2 Pascal代码示例</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412143253326.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412143253326.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412143253326" style="zoom:50%;"><h4 id="2-6-Delphi开发工具"><a href="#2-6-Delphi开发工具" class="headerlink" title="2.6 Delphi开发工具"></a>2.6 Delphi开发工具</h4><ul><li>Delphi的前身是DOS时代Borland公司的“Turbo Pascal”，最早的版本由美国Borland公司的Anders Hejlsberg(Delphi之父）于1995年开发</li><li>Delphi是一个集成开发环境（IDE），使用的核心是由传统 Pascal语言发展而来的Object Pascal，以图形用户界面为开发环境，构成一个以面向对象程序设计为中心的应用程序开发工具</li></ul><h5 id="2-6-1-Delphi7软件界面"><a href="#2-6-1-Delphi7软件界面" class="headerlink" title="2.6.1 Delphi7软件界面"></a>2.6.1 Delphi7软件界面</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412143354165.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412143354165.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412143354165" style="zoom: 50%;"><h4 id="2-7-C语言"><a href="#2-7-C语言" class="headerlink" title="2.7 C语言"></a>2.7 C语言</h4><ul><li>C语言由美国贝尔实验室的Dennis M. Ritchie在Ken Thompson的B语言基础上于1972年开发出，是一种通用的中级语言，它也被称为“可移植的汇编语言”</li><li>C语言具有某些高级语言的特征，例如结构化数据，结构化控制流程、机器无关性以及一套丰富的运算符</li><li>C语言是世界上影响最深远的语言，现在很多语言的语法规则都来源于它</li></ul><h4 id="2-8-C-与C-Builder"><a href="#2-8-C-与C-Builder" class="headerlink" title="2.8 C++与C++Builder"></a>2.8 C++与C++Builder</h4><ul><li>1983年，贝尔实验室的Bjarne Stroustrup在C语言基础上推出了C++</li><li>C++进一步扩充和完善了C语言，是一种面向对象的程序设计语言</li><li>1998年通过C++标准</li><li>2011年C++推出C++11标准</li></ul><h5 id="2-8-1-C-Builder"><a href="#2-8-1-C-Builder" class="headerlink" title="2.8.1 C++Builder"></a>2.8.1 C++Builder</h5><ul><li>C++ Builder是由Borland公司推出的一款可视化集成开发工具</li><li>C++ Builder内置了100多个完全封装了Windows公用特性且具有完全可扩展性的可重用控件；</li><li>C++ Builder具有一个专业C++开发环境所能提供的全部功能：快速、高效、灵活的编译器优化，逐步连接，CPU透视，命令行工具等</li></ul><h5 id="2-8-2-C-Builder界面"><a href="#2-8-2-C-Builder界面" class="headerlink" title="2.8.2 C++Builder界面"></a>2.8.2 C++Builder界面</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412143553699.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412143553699.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412143553699" style="zoom: 67%;"><h4 id="2-9-Java"><a href="#2-9-Java" class="headerlink" title="2.9 Java"></a>2.9 Java</h4><ul><li>Java是1995年由SUN公司的James Gosling开发的一种基于网络的开发语言</li><li>Java以C++为基础，是一种简单的，跨平台的，面向对象的，分布式的，解释的，健壮的安全的，结构中立的，可移植的，性能很优异的多线程的，动态的语言</li></ul><h5 id="2-9-1-Java开发工具Eclipse"><a href="#2-9-1-Java开发工具Eclipse" class="headerlink" title="2.9.1  Java开发工具Eclipse"></a>2.9.1  Java开发工具Eclipse</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412143653637.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412143653637.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412143653637" style="zoom:50%;"><h4 id="2-10-基于-Net的C"><a href="#2-10-基于-Net的C" class="headerlink" title="2.10 基于.Net的C#"></a>2.10 基于.Net的C#</h4><ul><li>C#是微软公司2000年发布的一种面向对象的、运行于.NET Framework之上的高级程序设计语言</li><li>C#与Java非常相似，包括：单一继承、接口、与Java几乎同样的语法和编译成中间代码再运行的过程</li><li>C#与Java的不同，它借鉴了Delphi的一个特点，与COM直接集成</li></ul><h4 id="2-11-ASP"><a href="#2-11-ASP" class="headerlink" title="2.11 ASP"></a>2.11 ASP</h4><ul><li>ASP（Active Server Pages动态网页）是微软公司推出的一种用以取代CGI（Common Gateway Interface通用网关接口）的技术</li><li>ASP是一个位于服务器端的脚本运行环境，通过这种环境，用户可以创建和运行动态的交互式Web服务器应用程序，如交互式动态网页，包括使用HTML表单收集和处理信息，上传与下载等等</li></ul><h4 id="2-12-JSP"><a href="#2-12-JSP" class="headerlink" title="2.12 JSP"></a>2.12 JSP</h4><ul><li>JSP(JavaServer Pages)是由Sun Microsystems公司倡导、许多公司参与一起建立的一种动态网页技术标准</li><li>JSP技术有点类似ASP技术，它是在传统的网页HTML文件中插入Java程序段(Script)和JSP标记(tag)，从而形成JSP文件(*.jsp)。用JSP开发的Web应用是跨平台的，既能在Linux下运行，也能在其他操作系统上运行</li></ul><h5 id="2-12-1-JSP的工作原理"><a href="#2-12-1-JSP的工作原理" class="headerlink" title="2.12.1 JSP的工作原理"></a>2.12.1 JSP的工作原理</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412144538210.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412144538210.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412144538210" style="zoom:50%;"><h5 id="2-12-2-JSP代码示例"><a href="#2-12-2-JSP代码示例" class="headerlink" title="2.12.2 JSP代码示例"></a>2.12.2 JSP代码示例</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412144601711.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412144601711.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412144601711" style="zoom: 50%;"><h4 id="2-13-Python语言"><a href="#2-13-Python语言" class="headerlink" title="2.13 Python语言"></a>2.13 Python语言</h4><ul><li>Python是一种面向对象、解释型计算机程序设计语言，由Guido van Rossum于1989年底发明</li><li>Python是一种解释性的、交互式的面向对象语言，能在多种环境下运行。它常被昵称为胶水语言，它能够把用其他语言制作的各种模块联结在一起 </li><li>它最常见的用处是编写脚本和小型Web应用程序，也支持创建大型程序</li></ul><h5 id="2-13-1-Python语言代码"><a href="#2-13-1-Python语言代码" class="headerlink" title="2.13.1 Python语言代码"></a>2.13.1 Python语言代码</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412144700409.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412144700409.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412144700409" style="zoom:50%;"><h5 id="2-13-2-Python语言应用于神经网络"><a href="#2-13-2-Python语言应用于神经网络" class="headerlink" title="2.13.2 Python语言应用于神经网络"></a>2.13.2 Python语言应用于神经网络</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412144726743.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412144726743.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412144726743" style="zoom:50%;"><h4 id="2-14-RUST"><a href="#2-14-RUST" class="headerlink" title="2.14 RUST"></a>2.14 RUST</h4><ul><li>Graydon Hoare 于2006年以Mozilla公司员工 的私人项目形式开发Rust语言，2009 年公司开始赞助这个项目。Rust 编译器于2012 年 1 月发布， 2015年5月15日发布的Rust 1.0 是第一个稳定版本。</li><li>2021年2 月 8 日，华为、微软、AWS、谷歌和 Mozilla 五大公司联合 成立 Rust 基金会</li><li>Rust以取代 C&#x2F;C++ 为目标， 与 C&#x2F;C++ 的区别在于其强大的安全保障</li></ul><h5 id="2-14-1-Rust语言的特点"><a href="#2-14-1-Rust语言的特点" class="headerlink" title="2.14.1 Rust语言的特点"></a>2.14.1 Rust语言的特点</h5><ul><li>Rust是针对多核体系提出的语言，具有高性能</li><li>Rust语言系统设计于保证内存安全，它在安全代码里不允许空指针，悬垂指针和数据竞争</li><li>Rust的具体语法和C，C++类似，都是由花括号限定代码块</li></ul><h5 id="2-14-2-Rust代码示例"><a href="#2-14-2-Rust代码示例" class="headerlink" title="2.14.2 Rust代码示例"></a>2.14.2 Rust代码示例</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412144913722.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412144913722.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412144913722" style="zoom:50%;"><h5 id="2-15-Swift语言"><a href="#2-15-Swift语言" class="headerlink" title="2.15 Swift语言"></a>2.15 Swift语言</h5><ul><li>Swift是Apple在WWDC2014所发布的一门编程语言，用来撰写mac OS和iOS应用程序，基于C和Objective-C（克里斯·拉特纳组织开发，基于LLVM）</li><li>苹果宣称Swift的特点是：快速、现代、安全、互动，且全面优于Objective-C语言。编程过程中动态展示结果</li></ul><h5 id="2-15-1-Swift语言代码"><a href="#2-15-1-Swift语言代码" class="headerlink" title="2.15.1 Swift语言代码"></a>2.15.1 Swift语言代码</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145015750.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145015750.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412145015750" style="zoom:50%;"><h4 id="2-16-世界流行软件开发语言变迁"><a href="#2-16-世界流行软件开发语言变迁" class="headerlink" title="2.16 世界流行软件开发语言变迁"></a>2.16 世界流行软件开发语言变迁</h4><ul><li>TIOBE编程语言社区排行榜是编程语言流行趋势的一个指标，每月更新，这份排行榜排名基于互联网上有经验的程序员、课程和三方厂商的数量</li><li>这个排行榜只是反映某个编程语言的热门程度，并不能说明一门编程语言好不好，或者一门语言所编写的代码数量多少</li></ul><h5 id="2-16-1-2022编程语言排行榜"><a href="#2-16-1-2022编程语言排行榜" class="headerlink" title="2.16.1 2022编程语言排行榜"></a>2.16.1 2022编程语言排行榜</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145236517.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145236517.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412145236517" style="zoom:67%;"><h5 id="2-16-2-近14年年度语言"><a href="#2-16-2-近14年年度语言" class="headerlink" title="2.16.2 近14年年度语言"></a>2.16.2 近14年年度语言</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145313335.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145313335.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412145313335" style="zoom:50%;"><h3 id="3-Visual-Studio-2010"><a href="#3-Visual-Studio-2010" class="headerlink" title="3. Visual Studio 2010"></a>3. Visual Studio 2010</h3><ul><li>2010年4月12日微软公司推出了Visual Studio 2010开发环境。它是目前最流行的Windows平台应用程序开发环境</li><li>Visual Studio 2010以NET Framework 4.0为基础，除了Microsoft SQL Server，它还支持 IBM DB2和Oracle数据库</li></ul><h4 id="3-1-Visual-Studio-2010安装"><a href="#3-1-Visual-Studio-2010安装" class="headerlink" title="3.1 Visual Studio 2010安装"></a>3.1 Visual Studio 2010安装</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145442520.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145442520.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412145442520" style="zoom:50%;"><h4 id="3-2-Visual-Studio-2010初次启动"><a href="#3-2-Visual-Studio-2010初次启动" class="headerlink" title="3.2 Visual Studio 2010初次启动"></a>3.2 Visual Studio 2010初次启动</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145503409.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145503409.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412145503409" style="zoom:50%;"><h4 id="3-3-Visual-Studio-2010的起始页"><a href="#3-3-Visual-Studio-2010的起始页" class="headerlink" title="3.3 Visual Studio 2010的起始页"></a>3.3 Visual Studio 2010的起始页</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145532208.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145532208.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412145532208" style="zoom:50%;"><h4 id="3-4-Visual-Studio-2010开发程序"><a href="#3-4-Visual-Studio-2010开发程序" class="headerlink" title="3.4 Visual Studio 2010开发程序"></a>3.4 Visual Studio 2010开发程序</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145550071.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145550071.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412145550071" style="zoom:50%;"><h5 id="3-4-1-选择程序类型"><a href="#3-4-1-选择程序类型" class="headerlink" title="3.4.1 选择程序类型"></a>3.4.1 选择程序类型</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145609116.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145609116.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412145609116" style="zoom:50%;"><h5 id="3-4-2-选择用户界面功能"><a href="#3-4-2-选择用户界面功能" class="headerlink" title="3.4.2 选择用户界面功能"></a>3.4.2 选择用户界面功能</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145635536.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145635536.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412145635536" style="zoom:50%;"><h5 id="3-4-3-高级选择功能"><a href="#3-4-3-高级选择功能" class="headerlink" title="3.4.3 高级选择功能"></a>3.4.3 高级选择功能</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145727014.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145727014.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412145727014" style="zoom:50%;"><h5 id="3-4-4-程序自动生成框架代码"><a href="#3-4-4-程序自动生成框架代码" class="headerlink" title="3.4.4 程序自动生成框架代码"></a>3.4.4 程序自动生成框架代码</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145749061.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145749061.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412145749061" style="zoom:50%;"><h5 id="3-4-5-生成的程序"><a href="#3-4-5-生成的程序" class="headerlink" title="3.4.5 生成的程序"></a>3.4.5 生成的程序</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145809190.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220412145809190.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220412145809190" style="zoom:50%;"><h2 id="第七章-软件测试工具"><a href="#第七章-软件测试工具" class="headerlink" title="第七章 软件测试工具"></a>第七章 软件测试工具</h2><h3 id="提纲-3"><a href="#提纲-3" class="headerlink" title="提纲"></a>提纲</h3><ul><li>软件测试概述</li><li>软件测试工具分类</li><li>软件测试工具选择</li><li>单元测试工具cppUnit介绍</li></ul><h3 id="1-软件测试概述"><a href="#1-软件测试概述" class="headerlink" title="1. 软件测试概述"></a>1. 软件测试概述</h3><ul><li>软件测试的基本内容</li><li>软件测试的定义</li><li>软件测试的分类</li><li>软件测试的简单过程</li></ul><h4 id="1-1-软件测试的基本内容"><a href="#1-1-软件测试的基本内容" class="headerlink" title="1.1 软件测试的基本内容"></a>1.1 软件测试的基本内容</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419140823000.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419140823000.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419140823000" style="zoom:50%;"><h4 id="1-2-软件测试的定义"><a href="#1-2-软件测试的定义" class="headerlink" title="1.2 软件测试的定义"></a>1.2 软件测试的定义</h4><p>在IEEE标准610.12-1990中将软件测试定义为：</p><ul><li>软件测试（Software Test）——在指定的条件下操作测试系统或组件(1)，观察或记录结果(2)，并对测试系统或组件的不同方面做出评估(3)的过程</li><li>总体来讲，软件测试是一个寻找和证实软件缺陷的过程</li></ul><h4 id="1-3-软件测试的分类"><a href="#1-3-软件测试的分类" class="headerlink" title="1.3 软件测试的分类"></a>1.3 软件测试的分类</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419140950011.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419140950011.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419140950011" style="zoom:50%;"><h5 id="1-3-1-各种软件测试之间的关系"><a href="#1-3-1-各种软件测试之间的关系" class="headerlink" title="1.3.1 各种软件测试之间的关系"></a>1.3.1 各种软件测试之间的关系</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141021594.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141021594.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419141021594" style="zoom:50%;"><h4 id="1-4-软件测试的简单过程"><a href="#1-4-软件测试的简单过程" class="headerlink" title="1.4 软件测试的简单过程"></a>1.4 软件测试的简单过程</h4><ul><li>在很多软件程序员的眼中，测试软件就是运行软件，看软件在运行过程中是否出错； 实际上，运行软件只是软件测试的一部分 </li><li>实际的软件测试是需要设计的，设计的结果是构建了测试用例，而测试是按照测试用例来运行软件的，运行软件得到的结果需要记录，统计</li></ul><h5 id="1-4-1-最简单的测试过程"><a href="#1-4-1-最简单的测试过程" class="headerlink" title="1.4.1  最简单的测试过程"></a>1.4.1  最简单的测试过程</h5><ul><li><p>最简单的测试过程至少包括测试设计，生成测试用例，执行测试用例以及测试结果分析几个阶段</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141131990.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141131990.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419141131990" style="zoom:50%;"></li></ul><h5 id="1-4-2-一个软件测试的例子"><a href="#1-4-2-一个软件测试的例子" class="headerlink" title="1.4.2 一个软件测试的例子"></a>1.4.2 一个软件测试的例子</h5><ul><li>对“Hello world”程序进行测试 ，程序代码如下：</li><li><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141249900.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141249900.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419141249900" style="zoom:50%;"></li></ul><h6 id="1-4-2-1-建立测试用例"><a href="#1-4-2-1-建立测试用例" class="headerlink" title="1.4.2.1 建立测试用例"></a>1.4.2.1 建立测试用例</h6><ul><li>测试最基本的方法就是建立并运行测试用例，我们通常使用表格的方式来构建简单的测试用例</li><li><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141334380.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141334380.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419141334380" style="zoom:50%;"></li></ul><h6 id="1-4-2-2-执行测试用例"><a href="#1-4-2-2-执行测试用例" class="headerlink" title="1.4.2.2 执行测试用例"></a>1.4.2.2 执行测试用例</h6><ul><li>将Hello world 程序编译、连接形成可执行程序Hello.exe，然后运行它，因为测试不要求输入值，因此运行软件即是执行测试</li><li>Hello.exe</li></ul><h6 id="1-4-2-3-记录运行的结果"><a href="#1-4-2-3-记录运行的结果" class="headerlink" title="1.4.2.3 记录运行的结果"></a>1.4.2.3 记录运行的结果</h6><ul><li>程序在控制台上打印出Hello world字样</li><li><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141446270.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141446270.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419141446270" style="zoom:50%;"></li></ul><h6 id="1-4-2-4-测试总结"><a href="#1-4-2-4-测试总结" class="headerlink" title="1.4.2.4 测试总结"></a>1.4.2.4 测试总结</h6><ul><li>测试的实际结果与期望的结果一致，程序的打印功能是正确的</li><li>上面四步就是对Hello world程序的一次正式测试，尽管它还不够完整，但是它让我们看到了测试的整个过程</li></ul><h5 id="1-4-3-对Hello-World软件的改进"><a href="#1-4-3-对Hello-World软件的改进" class="headerlink" title="1.4.3 对Hello World软件的改进"></a>1.4.3 对Hello World软件的改进</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141541184.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141541184.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419141541184" style="zoom:50%;"><h6 id="1-4-3-1-建立测试用例"><a href="#1-4-3-1-建立测试用例" class="headerlink" title="1.4.3.1 建立测试用例"></a>1.4.3.1 建立测试用例</h6><ul><li>由于该程序接受参数，我们可以选择不同的输入参数来进行软件测试</li><li><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141618386.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141618386.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419141618386" style="zoom:50%;"></li></ul><h6 id="1-4-3-2-执行测试用例"><a href="#1-4-3-2-执行测试用例" class="headerlink" title="1.4.3.2 执行测试用例"></a>1.4.3.2 执行测试用例</h6><ul><li>我们在控制台上运行该程序，分别给程序带不同的输入参数，可执行程序的名字是Hello.exe<ol><li>Hello 1</li><li>Hello 2</li><li>Hello 3</li><li>Hello</li></ol></li></ul><h6 id="1-4-3-3-记录运行的结果"><a href="#1-4-3-3-记录运行的结果" class="headerlink" title="1.4.3.3 记录运行的结果"></a>1.4.3.3 记录运行的结果</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141711098.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141711098.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419141711098" style="zoom:50%;"><h6 id="-2"><a href="#-2" class="headerlink" title></a></h6><p>错误对话框</p><ul><li>执行不带参数的Hello程序后，弹出错误对话框，程序崩溃 </li><li><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141751120.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419141751120.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419141751120" style="zoom:50%;"></li></ul><h6 id="1-4-3-4-测试总结"><a href="#1-4-3-4-测试总结" class="headerlink" title="1.4.3.4 测试总结"></a>1.4.3.4 测试总结</h6><ul><li>在程序中使用了输入参数变量*argv[1]，如果不输入任何参数，那么argv[1]为空指针（NULL），程序访问空指针会出现问题，如果我们在程序的前面对参数个数加以保护，就不会出现上面的问题</li><li>即使我们认为再简单的程序也可能包含错误，但软件测试可以找到这些错误</li></ul><h3 id="2-软件测试工具分类"><a href="#2-软件测试工具分类" class="headerlink" title="2. 软件测试工具分类"></a>2. 软件测试工具分类</h3><ul><li>测试工具是为了提高测试效率，用软件代替测试人工输入的有效方法</li><li>根据测试工具的作用，可以分类为：<ol><li>白盒测试工具</li><li>黑盒测试工具</li><li>功能测试工具</li><li>性能测试工具</li></ol></li></ul><h4 id="2-1-白盒测试"><a href="#2-1-白盒测试" class="headerlink" title="2.1 白盒测试"></a>2.1 白盒测试</h4><ul><li>白盒测试——软件测试员可以了解软件的内部结构以及实现的具体代码，从而可以根据程序的内部情况来设计更实用的测试案例</li><li>白盒测试工具就是针对代码进行测试，测试中发现的错误可以定位到代码的具体位置</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419142027190.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419142027190.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419142027190" style="zoom:50%;"><h5 id="2-1-1-白盒测试工具的分类"><a href="#2-1-1-白盒测试工具的分类" class="headerlink" title="2.1.1 白盒测试工具的分类"></a>2.1.1 白盒测试工具的分类</h5><ul><li><p>白盒测试工具可以分为两类</p><ol><li><p>静态测试工具</p><p>直接对代码进行语法分析，根据某种质量模型评估代码，不需要运行代码</p></li><li><p>动态测试工具</p><p>动态测试工具采用在程序中插桩的方式，让程序中插入一些代码，然后运行代码统计程序运行时的数据</p></li></ol></li></ul><h5 id="2-1-2-白盒静态测试工具"><a href="#2-1-2-白盒静态测试工具" class="headerlink" title="2.1.2 白盒静态测试工具"></a>2.1.2 白盒静态测试工具</h5><ul><li>白盒静态测试工具的代表是Telelogic公司的Logiscope软件</li><li>Telelogic是1983年在瑞典创立的复杂软件及系统开发解决方案供应商，其提供从需求管理、变更管理、可视化软件工程到软件测试的工具，其产品被各国军方所采用，2007年被IBM公司收购</li></ul><h6 id="2-1-2-1-Logiscope软件"><a href="#2-1-2-1-Logiscope软件" class="headerlink" title="2.1.2.1 Logiscope软件"></a>2.1.2.1 Logiscope软件</h6><ul><li>Logiscope是Telelogic公司推出的专用于软件质量保证和软件测试的产品</li><li>主要功能是对软件做质量分析和测试以保证软件的质量，并可做认证、反向工程和维护，特别是针对要求高可靠性和高安全性的软件项目和工程</li></ul><h6 id="2-1-2-2-Logiscope软件的三大功能"><a href="#2-1-2-2-Logiscope软件的三大功能" class="headerlink" title="2.1.2.2 Logiscope软件的三大功能"></a>2.1.2.2 Logiscope软件的三大功能</h6><ol><li>Audit：定位错误模块，可评估软件质量及复杂程度，提供代码的直观描述，自动生成软件文档（根据质量模型标准进行评估）</li><li>RuleChecker：根据工程中定义的编程规则自动检查软件代码的规范性。包含大量标准规则，用户也可定制创建规则，自动生成测试报告 </li><li>TestChecker：测试覆盖分析，显示没有测试的代码路径，通过插装和软件运行进行分析</li></ol><h6 id="2-1-2-3-Logiscope软件界面"><a href="#2-1-2-3-Logiscope软件界面" class="headerlink" title="2.1.2.3 Logiscope软件界面"></a>2.1.2.3 Logiscope软件界面</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419142545474.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419142545474.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419142545474" style="zoom:50%;"><h5 id="2-1-3-白盒动态测试工具"><a href="#2-1-3-白盒动态测试工具" class="headerlink" title="2.1.3 白盒动态测试工具"></a>2.1.3 白盒动态测试工具</h5><ul><li><p>白盒动态测试工具的代表包括：</p><ol><li>Rational公司的Purify（内存）</li><li>Numega公司的BoundsChecker(内存)</li><li>Compuware公司的Devpartner（代码评审、内存、性能等）</li></ol></li><li><p>Numega 1997年被Compuware收购</p></li><li><p>Micro Focus公司2009年收购Compuware公司的测试产品线</p></li></ul><h6 id="2-1-3-1-IBM-Rational-Purify简介"><a href="#2-1-3-1-IBM-Rational-Purify简介" class="headerlink" title="2.1.3.1 IBM Rational Purify简介"></a>2.1.3.1 IBM Rational Purify简介</h6><ul><li>IBM Rational Purify是一个面向VC, VB或者Java开发的测试工具，用于检查Visual C&#x2F;C++ 和Java 代码中与内存有关的错误，确保整个应用程序的质量和可靠性</li><li>主要用于查找Visual C&#x2F;C++ 程序中的传统内存访问错误，以及Java 代码中与垃圾内存收集相关的错误方面</li></ul><h6 id="2-1-3-2-Purify界面"><a href="#2-1-3-2-Purify界面" class="headerlink" title="2.1.3.2 Purify界面"></a>2.1.3.2 Purify界面</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419142844014.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419142844014.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419142844014" style="zoom:50%;"><h4 id="2-2-黑盒测试工具"><a href="#2-2-黑盒测试工具" class="headerlink" title="2.2 黑盒测试工具"></a>2.2 黑盒测试工具</h4><ul><li>黑盒测试——是基于需求说明书的软件测试，在这种测试下，我们不需要了解软件的内部结构，内部分支，以及软件代码的具体实现</li><li>黑盒测试工具一般原理是利用脚本的录制和回放，模拟用户的操作，然后比较记录结果和预先设定的结果来判定测试的正确性</li><li><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419142947857.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419142947857.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419142947857" style="zoom:50%;"></li></ul><h4 id="2-2-1-典型的黑盒测试工具"><a href="#2-2-1-典型的黑盒测试工具" class="headerlink" title="2.2.1 典型的黑盒测试工具"></a>2.2.1 典型的黑盒测试工具</h4><ul><li>典型的黑盒测试工具包括：<ol><li>Compuware公司的QACenter（集成）</li><li>Rational公司的teamTest（测试管理）、Robot（功能、性能）等</li></ol></li></ul><h6 id="2-2-1-1-QACenter简介"><a href="#2-2-1-1-QACenter简介" class="headerlink" title="2.2.1.1 QACenter简介"></a>2.2.1.1 QACenter简介</h6><ul><li>Compuware公司的QACenter测试软件是一个综合型的测试工具集，它帮助测试人员创建快速、可重用的测试过程</li><li>这些测试工具自动帮助管理测试过程，快速分析和调试程序，包括针对回归，强度，单元，并发，集成，移植，容量和负载建立测试用例，自动执行测试和产生文档结果</li></ul><h6 id="2-2-1-2-QACenter的组成"><a href="#2-2-1-2-QACenter的组成" class="headerlink" title="2.2.1.2 QACenter的组成"></a>2.2.1.2 QACenter的组成</h6><ul><li>QACenter主要包括以下几个模块：<ol><li>QARun：应用的功能测试工具</li><li>QALoad：强负载下应用的性能测试工具</li><li>QADirector：测试的组织设计和创建以及管理工具</li><li>TrackRecord：集成的缺陷跟踪管理工具</li><li>EcoTools：高层次的性能监测工具</li></ol></li></ul><h4 id="2-3-功能测试工具"><a href="#2-3-功能测试工具" class="headerlink" title="2.3 功能测试工具"></a>2.3 功能测试工具</h4><ul><li>功能测试是对产品各功能进行验证，根据功能测试用例，逐项测试，检查产品是否达到用户要求的功能</li><li>功能测试工具包括：<ol><li>Rational Robot </li><li>SilkTest</li><li>WinRunner</li></ol></li></ul><h5 id="2-3-1-Rational-Robot"><a href="#2-3-1-Rational-Robot" class="headerlink" title="2.3.1 Rational Robot"></a>2.3.1 Rational Robot</h5><ul><li>Rational Robot 是Rational 的产品之一，提供了软件的功能测试，它提供了许多类似机器人的重复过程</li><li>IBM Rational Robot 可以让测试人员对 .NET、Java、Web和其他基于 GUI 的应用程序进行自动的功能性回归测试</li><li>Rational Robot 可开发三种测试脚本，包括用于功能测试的GUI脚本、用于性能测试的VU以及VB脚本</li></ul><h4 id="2-4-性能测试工具"><a href="#2-4-性能测试工具" class="headerlink" title="2.4 性能测试工具"></a>2.4 性能测试工具</h4><ul><li>性能测试是指通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试</li><li>性能测试工具用于测试软件的性能，包括：<ol><li>HP公司的LoadRunner</li><li>Microsoft公司的WebStress</li><li>Apache Jmeter（开源软件）</li></ol></li></ul><h5 id="2-4-1-LoadRunner"><a href="#2-4-1-LoadRunner" class="headerlink" title="2.4.1 LoadRunner"></a>2.4.1 LoadRunner</h5><ul><li>LoadRunner是一种预测系统行为和性能的负载测试工具</li><li>LoadRunner通过以模拟成千上万用户实施并发负载及实时性能监测的方式来确认和查找问题，其对整个企业架构进行测试</li><li>LoadRunner可适用于各种体系架构的自动负载测试，能预测系统行为并评估系统性能</li></ul><h5 id="2-4-2-LoadRunner工作原理"><a href="#2-4-2-LoadRunner工作原理" class="headerlink" title="2.4.2 LoadRunner工作原理"></a>2.4.2 LoadRunner工作原理</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419143429663.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419143429663.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419143429663" style="zoom:50%;"><h5 id="2-4-3-LoadRunner界面"><a href="#2-4-3-LoadRunner界面" class="headerlink" title="2.4.3 LoadRunner界面"></a>2.4.3 LoadRunner界面</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419143533111.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419143533111.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419143533111" style="zoom:50%;"><h4 id="2-5-测试管理工具"><a href="#2-5-测试管理工具" class="headerlink" title="2.5 测试管理工具"></a>2.5 测试管理工具</h4><ul><li>测试管理包括对测试计划、测试用例、测试实施以及测试缺陷进行管理</li><li>测试管理工具是对测试过程进行管理的工具，典型的测试管理工具包括：</li><li>Mercury Interactive公司（2006年被HP收购）TestDirector</li><li>Rational公司的testManager</li><li>Mozilla公司的Bugzilla（开源工具）</li></ul><h5 id="2-5-1-TestDirector"><a href="#2-5-1-TestDirector" class="headerlink" title="2.5.1 TestDirector"></a>2.5.1 TestDirector</h5><ul><li>TestDirector是HP(Mercury Interactive)公司生产的企业级测试管理工具，也是业界第一个基于Web的测试管理系统，它可以在公司内部或外部进行全球范围内测试的管理</li><li>通过在一个整体的应用系统中集成了测试管理的各个部分，包括需求管理，测试计划，测试执行以及错误跟踪等功能</li></ul><h5 id="2-5-2-TestDirector项目管理"><a href="#2-5-2-TestDirector项目管理" class="headerlink" title="2.5.2 TestDirector项目管理"></a>2.5.2 TestDirector项目管理</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419143720588.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419143720588.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419143720588" style="zoom:50%;"><h5 id="2-5-3-TestDirector界面"><a href="#2-5-3-TestDirector界面" class="headerlink" title="2.5.3 TestDirector界面"></a>2.5.3 TestDirector界面</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419143808860.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419143808860.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419143808860" style="zoom:50%;"><h4 id="2-6-测试工具的主要生产商"><a href="#2-6-测试工具的主要生产商" class="headerlink" title="2.6 测试工具的主要生产商"></a>2.6 测试工具的主要生产商</h4><ul><li>测试工具主要集中在以下几家厂商：<ol><li>IBM（TestManager、Robot、Purify）</li><li>HP(Quality Center、QTP、Loadrunner)</li><li>Micro Focus(QACenter)</li></ol></li></ul><h3 id="3-测试工具的选择"><a href="#3-测试工具的选择" class="headerlink" title="3. 测试工具的选择"></a>3. 测试工具的选择</h3><ul><li>测试工具众多，因此需要根据一定的条件来选择适合自己要求的测试工具</li><li>测试工具众多，因此需要根据一定的条件来选择适合自己要求的测试工具<ol><li>功能</li><li>价格</li><li>测试自动化</li><li>适合软件生命周期的各个阶段</li></ol></li></ul><h4 id="3-1-选择的步骤"><a href="#3-1-选择的步骤" class="headerlink" title="3.1 选择的步骤"></a>3.1 选择的步骤</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419144014418.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419144014418.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419144014418" style="zoom:50%;"><h5 id="3-1-1-选择的步骤说明"><a href="#3-1-1-选择的步骤说明" class="headerlink" title="3.1.1 选择的步骤说明"></a>3.1.1 选择的步骤说明</h5><ol><li>成立小组负责测试工具的选择和决策，制定时间表</li><li>确定需求，并研究不同的解决方案</li><li>了解市场上满足需求的产品，包括：基本功能、价格、限制以及服务等</li><li>根据了解的情况，决定是自己开发还是从市场上购买</li><li>确定2~3种候选产品</li><li>请候选产品厂家介绍、演示产品</li><li>初步确定</li><li>商务谈判</li><li>最后决定</li></ol><h3 id="4-CppUnit单元测试"><a href="#4-CppUnit单元测试" class="headerlink" title="4. CppUnit单元测试"></a>4. CppUnit单元测试</h3><ul><li>测试驱动开发(TDD)是以测试作为开发过程的中心，它坚持在编写实际代码之前，先写好基于产品代码的测试代码</li><li>XUnit是一个基于测试驱动开发的测试框架，它为我们在开发过程中使用测试驱动开发提供了一个方便的工具，使我们得以快速的进行单元测试</li><li>XUnit成员有很多，如JUnit，PythonUnit等；CppUnit是XUnit家族中一个专门面向C++的测试框架</li></ul><h4 id="4-1-CppUnit的组织"><a href="#4-1-CppUnit的组织" class="headerlink" title="4.1 CppUnit的组织"></a>4.1 CppUnit的组织</h4><ul><li>CppUnit将所有的单元测试按照树的结构来表示</li><li>在CppUnit中，最小的测试单元称为测试方法TestMethod；而多个相关的测试方法又可以组成一个测试用例TestCase；多个测试用例又组成测试包 TestSuite</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419144231078.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220419144231078.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220419144231078" style="zoom:50%;"><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>有众多的测试工具</li><li>按照测试技术可以将测试工具分为：<ol><li>白盒测试</li><li>黑盒测试</li></ol></li><li>按照测试的应用可以将测试工具分为：<ol><li>功能测试工具</li><li>性能测试工具</li><li>测试管理工具</li></ol></li></ul><h2 id="第八章-软件项目管理工具"><a href="#第八章-软件项目管理工具" class="headerlink" title="第八章 软件项目管理工具"></a>第八章 软件项目管理工具</h2><h3 id="提纲-4"><a href="#提纲-4" class="headerlink" title="提纲"></a>提纲</h3><ul><li>项目管理概述</li><li>项目管理软件</li><li>项目管理软件的特征</li><li>项目管理软件的选择标准</li><li>禅道项目管理软件简介</li></ul><h3 id="1-项目管理概述"><a href="#1-项目管理概述" class="headerlink" title="1. 项目管理概述"></a>1. 项目管理概述</h3><p>战略计划 + 项目管理 &#x3D; 当代公司的竞争力</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424135609171.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424135609171.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424135609171" style="zoom:50%;"><h4 id="1-1-项目管理例子—鲁布革冲击"><a href="#1-1-项目管理例子—鲁布革冲击" class="headerlink" title="1.1 项目管理例子—鲁布革冲击"></a>1.1 项目管理例子—鲁布革冲击</h4><p>1984年4月，鲁布革工程引水隧洞工程<br>日本大成公司以比中国与外国公司联营体投标价低3600万元中标<br>日本大成公司派到中国来的是30人的管理队伍，从14局雇了424名（平均计算）劳动工人<br>比合同计划提前了5个月</p><h4 id="1-2-项目（Project）"><a href="#1-2-项目（Project）" class="headerlink" title="1.2 项目（Project）"></a>1.2 项目（Project）</h4><ul><li><p>项目是为完成某一独特的产品、服务或成果所做的一次性努力</p></li><li><p>一次性 是指项目有明确的开始时间和明确的结束时间</p><ol><li>不一定历时短；</li><li>所提供的产品或服务通常不是一次性的;      </li><li>市场机会稍纵即逝；</li><li>项目团队的临时性</li></ol></li></ul><h5 id="1-2-1-项目举例"><a href="#1-2-1-项目举例" class="headerlink" title="1.2.1 项目举例"></a>1.2.1 项目举例</h5><ul><li>一切都将是项目，一切都将变成项目<ul><li>举办世界杯</li><li>申奥</li><li>软件开发</li><li>主办一次会议</li><li>组织的一次聚会</li><li>家庭购房</li><li>子女培养</li></ul></li></ul><h5 id="1-2-2-项目和运作的比较"><a href="#1-2-2-项目和运作的比较" class="headerlink" title="1.2.2 项目和运作的比较"></a>1.2.2 项目和运作的比较</h5><table><thead><tr><th><strong>项 目</strong></th><th><strong>运 作</strong></th></tr></thead><tbody><tr><td>创建项目任务书、成立组织和目标</td><td>任务书、组织和目标都是半固定的</td></tr><tr><td>推动变更</td><td>维持现状</td></tr><tr><td>独特的产品或服务（时间&#x2F;客户等）</td><td>标准的产品或服务</td></tr><tr><td>不同种类的团队</td><td>同种类的团队</td></tr><tr><td>有起止日期</td><td>持续不断</td></tr></tbody></table><h4 id="1-3-项目管理"><a href="#1-3-项目管理" class="headerlink" title="1.3 项目管理"></a>1.3 项目管理</h4><ul><li>在项目活动中运用各种知识、技能、工具和技术，以实现项目的需求</li><li>项目管理是指通过项目经理和项目组织的努力，运用系统理论和方法对项目及其资源进行计划、组织、协调、控制，旨在实现项目特定目标的管理方法体系</li></ul><h5 id="1-3-1-项目管理的问题"><a href="#1-3-1-项目管理的问题" class="headerlink" title="1.3.1 项目管理的问题"></a>1.3.1 项目管理的问题</h5><ul><li>客户的需求经常变动怎么办？</li><li>人手不够如何办？</li><li>项目成员跳槽怎么办？</li><li>进度拖延怎么办？</li><li>项目的进程如何监控？</li><li>实际成本低于预算就一定好？</li><li>项目的风险如何防范？</li></ul><h5 id="1-3-2-项目管理好处"><a href="#1-3-2-项目管理好处" class="headerlink" title="1.3.2 项目管理好处"></a>1.3.2 项目管理好处</h5><ul><li>更好的控制</li><li>更好的客户关系</li><li>较短的开发时间</li><li>较低成本</li><li>更高的质量和可靠性</li><li>精确的瞄准目标</li><li>部门之间更好的协调</li><li>更高的员工士气</li></ul><h5 id="1-3-3-项目管理知识域"><a href="#1-3-3-项目管理知识域" class="headerlink" title="1.3.3 项目管理知识域"></a>1.3.3 项目管理知识域</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140424917.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140424917.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424140424917" style="zoom:50%;"><h4 id="1-4-项目管理的五个过程组"><a href="#1-4-项目管理的五个过程组" class="headerlink" title="1.4 项目管理的五个过程组"></a>1.4 项目管理的五个过程组</h4><ol><li>启动</li><li>计划</li><li>执行</li><li>控制</li><li>收尾</li></ol><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140525829.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140525829.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424140525829" style="zoom:50%;"><h5 id="1-4-1-某一阶段中各过程的交叉"><a href="#1-4-1-某一阶段中各过程的交叉" class="headerlink" title="1.4.1 某一阶段中各过程的交叉"></a>1.4.1 某一阶段中各过程的交叉</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140733452.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140733452.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424140733452" style="zoom:50%;"><h5 id="1-4-2-各阶段的交互作用"><a href="#1-4-2-各阶段的交互作用" class="headerlink" title="1.4.2 各阶段的交互作用"></a>1.4.2 各阶段的交互作用</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140800284.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140800284.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424140800284" style="zoom:50%;"><h5 id="1-4-3-项目边界"><a href="#1-4-3-项目边界" class="headerlink" title="1.4.3 项目边界"></a>1.4.3 项目边界</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140845307.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140845307.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424140845307" style="zoom:50%;"><ul><li>明确的项目边界是项目管理的基础</li></ul><h5 id="1-4-4-启动过程组"><a href="#1-4-4-启动过程组" class="headerlink" title="1.4.4 启动过程组"></a>1.4.4 启动过程组</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140928439.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140928439.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424140928439" style="zoom:50%;"><h5 id="1-4-5-计划过程组"><a href="#1-4-5-计划过程组" class="headerlink" title="1.4.5 计划过程组"></a>1.4.5 计划过程组</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140958454.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424140958454.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424140958454" style="zoom:50%;"><h5 id="1-4-6-执行过程组"><a href="#1-4-6-执行过程组" class="headerlink" title="1.4.6 执行过程组"></a>1.4.6 执行过程组</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424141031511.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424141031511.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424141031511" style="zoom:50%;"><h5 id="1-4-7-监督与控制过程组"><a href="#1-4-7-监督与控制过程组" class="headerlink" title="1.4.7 监督与控制过程组"></a>1.4.7 监督与控制过程组</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424141109581.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424141109581.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424141108957" style="zoom:50%;"><h5 id="1-4-8-收尾过程组"><a href="#1-4-8-收尾过程组" class="headerlink" title="1.4.8 收尾过程组"></a>1.4.8 收尾过程组</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424141153683.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424141153683.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424141153683" style="zoom:50%;"><h4 id="1-5-项目经理的地位"><a href="#1-5-项目经理的地位" class="headerlink" title="1.5  项目经理的地位"></a>1.5  项目经理的地位</h4><ul><li><p>项目经理与部门经理</p><p>项目经理：<br>通才，促成者（做什么、如何做、获取资源），运用系统方法<br>取得支持，由高层任命，权力由总经理决<br>部门经理：</p><p>​    领域专家，直接技术监督者，运用分析方法</p></li></ul><h5 id="1-5-1-项目经理的责任"><a href="#1-5-1-项目经理的责任" class="headerlink" title="1.5.1  项目经理的责任"></a>1.5.1  项目经理的责任</h5><ul><li><p>对企业所应承担的责任</p><p>与企业经营目标一致，管理利用资源，与高层领导及时有效沟通</p></li><li><p>对项目</p><p>对项目成功负主要责任，保证项目整体性</p></li><li><p>对项目小组</p><p>提供良好的工作环境和氛围，进行绩效考评，激励项目成员并为成员将来作打算</p></li></ul><h5 id="1-5-2-项目经理应具备的能力"><a href="#1-5-2-项目经理应具备的能力" class="headerlink" title="1.5.2 项目经理应具备的能力"></a>1.5.2 项目经理应具备的能力</h5><ul><li>获得充分资源的能力</li><li>组织及组建团队的能力</li><li>权衡项目目标的能力（综合平衡能力）</li><li>应付危机及解决冲突的能力</li><li>谈判及广泛沟通的能力</li><li>领导才能及管理技能（确定方向、协调思想、激励等）</li><li>技术能力</li><li>创业能力</li></ul><h5 id="1-5-3-项目经理的素质"><a href="#1-5-3-项目经理的素质" class="headerlink" title="1.5.3 项目经理的素质"></a>1.5.3 项目经理的素质</h5><ul><li>领导：<br>确定方向<br>团结群众<br>激励与动员</li><li>沟通：</li><li>谈判：</li><li>问题解决：<br>问题识别<br>决策</li><li>对组织施加影响：<br>权力的运用<br>政治手段</li></ul><h4 id="1-6-项目管理的发展历程"><a href="#1-6-项目管理的发展历程" class="headerlink" title="1.6 项目管理的发展历程"></a>1.6 项目管理的发展历程</h4><ul><li>1944, 英国土木工程学会在《战后国家发展》中提出对于公共工程项目需要采用一种系统化工作方法</li><li>1950s，PM起步<br>1950s, 美国海军“北极星计划”：参加项目的遍及美国 48个州 200多个主要承包商和 11000多个企业<br>1960s, 美国航空航天局“阿波罗计划”：耗资 250多亿美元 ,有20000多个企业参加的</li></ul><h5 id="1-6-1-项目管理的发展历程-1"><a href="#1-6-1-项目管理的发展历程-1" class="headerlink" title="1.6.1 项目管理的发展历程(1)"></a>1.6.1 项目管理的发展历程(1)</h5><ul><li>1965：国际项目管理协会（IPMA）成立</li><li>1969：美国项目管理学会（PMI）成立<ul><li>目前有10.5万名会员(130个国家)</li><li>致力于向全球推行项目管理</li><li>是项目管理专业最大的全球性专业组织</li></ul></li><li>1970s-1980s: PM开始向系统研发、实施、 建设工程、城市发展和教育等领域渗透</li></ul><h5 id="1-6-2-项目管理的发展历程-2"><a href="#1-6-2-项目管理的发展历程-2" class="headerlink" title="1.6.2 项目管理的发展历程(2)"></a>1.6.2 项目管理的发展历程(2)</h5><ul><li><p>1980s-1990s：现代项目管理兴起</p><ul><li><p>1984：PMP认证开始</p></li><li><p>1987：PMI开始着手创建PMBOK</p></li><li><p>1996: PMBOK</p><p>被世界项目管理界公认为一个全球性标准<br>国际标准化组织 (ISO) 以该文件为框架 ,制定了 ISO10006 标准</p></li></ul></li><li><p>2000：PMBOK 2000 出版</p><ul><li>被美国国家标准学会（ANSI）接受为美国标准 （2001. 3）</li></ul></li></ul><h5 id="1-6-3-国际项目管理协会IPMA"><a href="#1-6-3-国际项目管理协会IPMA" class="headerlink" title="1.6.3 国际项目管理协会IPMA"></a>1.6.3 国际项目管理协会IPMA</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424141925867.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424141925867.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424141925867" style="zoom:50%;"><h5 id="1-6-4-美国项目管理协会PMI"><a href="#1-6-4-美国项目管理协会PMI" class="headerlink" title="1.6.4 美国项目管理协会PMI"></a>1.6.4 美国项目管理协会PMI</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424141948403.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424141948403.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424141948403" style="zoom:50%;"><h4 id="1-7-IPMP简介"><a href="#1-7-IPMP简介" class="headerlink" title="1.7   IPMP简介"></a>1.7   IPMP简介</h4><ul><li>IPMP：国际项目管理专业人士</li><li>认证： 由IPMA组织，分A、B、C、D四级<ul><li>Ａ级（认证高级项目经理）</li><li>Ｂ级（认证项目经理）</li><li>Ｃ级（认证项目管理专家）</li><li>Ｄ级（认证项目管理专业水平人员）</li></ul></li><li>笔试＋项目报告＋面试</li></ul><h5 id="1-7-1-IPMP的四个级别"><a href="#1-7-1-IPMP的四个级别" class="headerlink" title="1.7.1 IPMP的四个级别"></a>1.7.1 IPMP的四个级别</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424142101221.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424142101221.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424142101221" style="zoom:50%;"><h4 id="1-8-PM与其它管理学科的关系"><a href="#1-8-PM与其它管理学科的关系" class="headerlink" title="1.8 PM与其它管理学科的关系"></a>1.8 PM与其它管理学科的关系</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424142154675.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424142154675.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424142154675" style="zoom:50%;"><h4 id="1-9-有关项目管理的16条至理名言"><a href="#1-9-有关项目管理的16条至理名言" class="headerlink" title="1.9 有关项目管理的16条至理名言"></a>1.9 有关项目管理的16条至理名言</h4><ol><li>接受项目管理理论，并持续地使用它</li><li>采用促使公司向着成熟的项目管理发展的管理哲学, 并将其传达给每一个人 </li><li>在每一个项目开始时, 制定有效的计划</li><li>在付诸实施时, 尽可能小地变动范围</li><li>要认识到成本和进度管理是紧密相连的</li><li>选择合适的人做项目经理 </li><li>向高层管理者提供项目发起人的信息 , 而不是项目管理的信息</li><li>加强直线管理层的参与和支持</li><li>关注可交付成果而不是资源   </li><li>培育有效的沟通、合作及相互信任 , 以实现项目管理的快速成熟 </li><li>与全部的项目团队成员和直线管理层分享项目的成功</li><li>消除非生产性会议</li><li>应尽可能早而快地以有效的成本识别并解决问题</li><li>定期测评项目进展</li><li>将项目管理软件作为一种工具 , 而不是一种计划或人际关系技巧的替代品来使用</li><li>制定全员培训计划 , 让员工学习正规的、定期更新的课程</li></ol><h3 id="2-软件项目管理概述"><a href="#2-软件项目管理概述" class="headerlink" title="2. 软件项目管理概述"></a>2. 软件项目管理概述</h3><ul><li>软件项目管理是为了完成一个既定的软件开发目标，在规定的时间内，通过特殊形式的临时性组织运行机制，通过计划、组织、领导与控制，在明确的可利用资源范围内完成软件开发</li></ul><h4 id="2-1-CMMI简介"><a href="#2-1-CMMI简介" class="headerlink" title="2.1 CMMI简介"></a>2.1 CMMI简介</h4><ul><li>CMMI 的全称为：Capability Maturity Model Integration，即能力成熟度模型集成</li><li>1994年由美国国防部与CMU的软件工程研究中心以及美国国防工业协会共同开发和研制</li><li>CMMI为改进一个组织的各种过程提供了一个单一的集成化框架</li></ul><h5 id="2-1-1-CMMI目的和依据"><a href="#2-1-1-CMMI目的和依据" class="headerlink" title="2.1.1 CMMI目的和依据"></a>2.1.1 CMMI目的和依据</h5><ul><li>目的：帮助软件企业对软件工程过程进行管理和改进，增强开发与改进能力，从而能按时地、不超预算地开发出高质量的软件</li><li>依据：只要集中精力持续努力去建立有效的软件工程过程的基础结构，不断进行管理的实践和过程的改进，就可以克服软件开发中的困难</li></ul><h4 id="2-2-CMMI的分级表示"><a href="#2-2-CMMI的分级表示" class="headerlink" title="2.2 CMMI的分级表示"></a>2.2 CMMI的分级表示</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424142706503.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424142706503.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424142706503" style="zoom:50%;"><h4 id="2-3-过程域按类别来划分"><a href="#2-3-过程域按类别来划分" class="headerlink" title="2.3 过程域按类别来划分"></a>2.3 过程域按类别来划分</h4><ul><li>过程管理<br>包括5个过程域：组织过程焦点、组织过程定义+集成的产品和过程开发、组织培训、组织过程绩效、组织创新和部署；</li><li>项目管理<br>包括6个过程域：项目计划、项目监督与控制、供应合同管理、集成项目管理+集成的产品和过程开发、风险管理、量化项目管理；</li><li>工程组<br>包括6个过程域：需求开发、需求管理、技术解决方案、产品集成、验证和确认；</li><li>支持组<br>包括5个过程域：配置管理、过程和产品质量保证、度量和分析、决策分析与决议、原因分析与决议</li></ul><h3 id="3-项目管理软件"><a href="#3-项目管理软件" class="headerlink" title="3. 项目管理软件"></a>3. 项目管理软件</h3><ul><li>项目管理软件是为了使工作项目能够按照预定成本、进度、质量顺利完成，而对人员、产品、过程以及项目进行分析和管理活动的软件</li><li>通常，项目管理软件具有预算、成本控制、计算进度计划、分配资源、项目数据的转入和转出、处理多个项目和子项目、制作报表，创建工作分析结构以及计划跟踪等功能</li></ul><h4 id="3-1项目管理软件的发展"><a href="#3-1项目管理软件的发展" class="headerlink" title="3.1项目管理软件的发展"></a>3.1项目管理软件的发展</h4><ul><li>20世纪80年代后期项目管理技术呈现出繁荣发展的趋势，因此涌现出了大量的项目管理软件，包括：<ol><li>独立内容的项目管理软件，比如对进度进行管理，对合同进行管理等</li><li>综合的项目管理软件，同时对各种项目管理内容进行管理，包括计划、风险、资源等</li><li>基于Web的项目管理软件</li></ol></li></ul><h3 id="4-软件项目管理的特征"><a href="#4-软件项目管理的特征" class="headerlink" title="4. 软件项目管理的特征"></a><strong>4. 软件项目管理的特征</strong></h3><ul><li>项目管理软件包括众多特征<ol><li>预算及成本控制：项目管理软件都可以用来获得项目中各种活动、资源的有关情况，还可以利用用户自定义的公式进行成本计算</li><li>日程表：项目管理软件可以设置项目的基本工作时间，比如每周一至五，每天9:00~18:00等</li></ol></li></ul><h4 id="4-1-日程表"><a href="#4-1-日程表" class="headerlink" title="4.1 日程表"></a>4.1 日程表</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424143004220.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424143004220.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424143004220" style="zoom:50%;"><h4 id="4-1-软件项目管理的特征1"><a href="#4-1-软件项目管理的特征1" class="headerlink" title="4.1 软件项目管理的特征1"></a>4.1 软件项目管理的特征1</h4><ol><li>项目计划：项目管理软件能够维护项目的活动或任务清单，每项任务包括标题、起始时间和结束时间等</li><li>进度安排：项目管理软件可以人工或自动根据项目计划进行进度安排</li><li>项目监督及跟踪：项目管理软件允许用户确定一个基准计划，并就实际进程及成本与基准计划里的相应部分进行比较，监督和跟踪项目的执行</li></ol><h4 id="4-2-软件项目管理的特征2"><a href="#4-2-软件项目管理的特征2" class="headerlink" title="4.2 软件项目管理的特征2"></a>4.2 软件项目管理的特征2</h4><ol><li>图形表达：项目管理软件可以在活动和计划的基础上绘制直观表达项目进度的甘特图等图形</li><li>制作报表：项目管理软件可以制作报表，以展示项目的进度计划，资源或预算情况等</li><li>转入&#x2F;转出：项目管理软件可以和其他应用软件通讯</li></ol><p>图形表达</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424143156919.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424143156919.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424143156919" style="zoom:50%;"><h4 id="4-3-软件项目管理的特征3"><a href="#4-3-软件项目管理的特征3" class="headerlink" title="4.3 软件项目管理的特征3"></a>4.3 软件项目管理的特征3</h4><ol><li>资源管理：项目管理软件都有一份资源清单，列明各种资源的名称、资源可以利用的时间、资源标准及过时率、资源的收益方法以及文本说明等</li><li>电子邮件：项目管理软件支持通过电子邮件发送项目信息</li><li>假设分析：对项目的当前状态进行分析，分析不同情况下对用户产生的影响，比如项目推迟产生的影响</li></ol><h3 id="5-项目管理软件选择标准"><a href="#5-项目管理软件选择标准" class="headerlink" title="5 项目管理软件选择标准"></a>5 项目管理软件选择标准</h3><ul><li>选择项目管理软件，可以考虑以下因素：<ol><li>容量：主要考虑系统是否能够处理预计同时管理的项目数量，预计需要的资源数等</li><li>功能：考虑程序是否包含自己需要的项目管理功能，比如甘特图以及项目预算等</li><li>报表：考虑程序是否提供报表功能</li><li>操作性：考虑系统是否方便操作</li><li>安全性：项目管理软件是否具有安全性</li></ol></li></ul><h3 id="6-项目管理软件举例"><a href="#6-项目管理软件举例" class="headerlink" title="6. 项目管理软件举例"></a>6. 项目管理软件举例</h3><ul><li><p>禅道是一款国产的开源项目管理软件</p></li><li><p>该软件集产品管理、项目管理、质量管理、文档管理、组织管理和事务管理于一体，是一款功能完备的项目管理软件，完美地覆盖了项目管理的核心流程</p><p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424143326446.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220424143326446.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220424143326446"></p></li></ul><h2 id="第九章-软件配置管理工具"><a href="#第九章-软件配置管理工具" class="headerlink" title="第九章 软件配置管理工具"></a>第九章 软件配置管理工具</h2><h3 id="提纲-5"><a href="#提纲-5" class="headerlink" title="提纲"></a>提纲</h3><ul><li>软件配置管理</li><li>软件配置管理工具的功能</li><li>成熟软件配置管理工具的特征</li></ul><h3 id="1-软件配置管理"><a href="#1-软件配置管理" class="headerlink" title="1 软件配置管理"></a>1 软件配置管理</h3><ul><li>软件配置管理概述</li><li>软件配置管理内容</li><li>软件配置管理模式</li><li>软件配置管理作用</li><li>软件配置管理过程</li><li>软件配置管理活动</li><li>软件配置管理主要任务</li></ul><h4 id="1-1软件配置管理概述"><a href="#1-1软件配置管理概述" class="headerlink" title="1.1软件配置管理概述"></a>1.1软件配置管理概述</h4><ul><li>软件配置管理（Software Configuration Management，SCM），又称为软件形态管理，软件构建管理，其对每个软件项目的变更进行管理，维护不同项目之间的版本关联，以使软件在开发过程中任何一时间的内容都可以被追溯</li><li>软件配置管理贯穿于整个软件生命周期全过程</li></ul><h5 id="1-1-1-软件配置管理的概念"><a href="#1-1-1-软件配置管理的概念" class="headerlink" title="1.1.1 软件配置管理的概念"></a>1.1.1 软件配置管理的概念</h5><ul><li>ISO 9000-3 :1997<br>配置管理是一门管理学科，它对软件配置项的开发和支持生存期给予技术和管理上的指导；配置管理的应用取决于项目的规模、复杂程度和风险大小</li><li>W.Babich 的解释<br>软件配置管理能协调软件开发，使混乱减少到最小。软件配置管理是一种标识、组织和控制修改的技术，目的是最有效的提高生产率</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426135303035.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426135303035.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220426135303035" style="zoom:50%;"><h5 id="1-1-2-忽视软件配置管理可能导致的混乱现象"><a href="#1-1-2-忽视软件配置管理可能导致的混乱现象" class="headerlink" title="1.1.2 忽视软件配置管理可能导致的混乱现象"></a>1.1.2 忽视软件配置管理可能导致的混乱现象</h5><ol><li>发错了软件版本</li><li>软件安装后不工作</li><li>不同软件版本的混淆</li><li>已经解决的缺陷过后又出现</li><li>找不到最新修改了的源程序</li></ol><h5 id="1-1-3-软件配置管理失效导致找不到源代码"><a href="#1-1-3-软件配置管理失效导致找不到源代码" class="headerlink" title="1.1.3 软件配置管理失效导致找不到源代码"></a>1.1.3 软件配置管理失效导致找不到源代码</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426135614400.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426135614400.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220426135614400" style="zoom:50%;"><h4 id="1-2-软件配置管理的内容"><a href="#1-2-软件配置管理的内容" class="headerlink" title="1.2 软件配置管理的内容"></a>1.2 软件配置管理的内容</h4><ul><li>软件配置管理包含三个方面的内容：<ol><li>版本管理（Version Control）</li><li>变更控制（Change Control）</li><li>过程支持（Process Support）</li></ol></li></ul><h5 id="1-2-1-版本控制"><a href="#1-2-1-版本控制" class="headerlink" title="1.2.1  版本控制"></a>1.2.1  版本控制</h5><ul><li>版本控制是全面实行软件配置管理的基础，可以保证软件技术状态的一致性</li><li>版本控制是对系统不同版本进行标识和跟踪；版本标识的目的是便于对版本加以区分、检索和跟踪，以表明不同版本之间的关系</li><li>版本控制包括检入检出控制、版本的分支和合并，版本的历史记录和版本发行等对软件的操作控制</li></ul><h5 id="1-2-2-变更控制"><a href="#1-2-2-变更控制" class="headerlink" title="1.2.2 变更控制"></a>1.2.2 变更控制</h5><ul><li>变更控制是按照一定的规程控制软件的修改</li><li>对于稳定的软件，往往由于不经意的修改造成软件的不稳定，如果不控制软件产品的变更，可能会得不到一个可以正常工作的软件基线</li></ul><h5 id="1-2-3-过程支持"><a href="#1-2-3-过程支持" class="headerlink" title="1.2.3 过程支持"></a>1.2.3 过程支持</h5><ul><li>过程支持是指按照软件工程过程的标准进行软件的开发和管理</li><li>软件过程是一个为建造高质量软件所需完成任务的框架，即形成软件产品的一系列步骤，包括中间产品、资源、角色及过程中采取的方法、工具等范畴 </li><li>软件过程支持与配置管理紧密联系</li></ul><h4 id="1-3-软件配置管理模式"><a href="#1-3-软件配置管理模式" class="headerlink" title="1.3 软件配置管理模式"></a>1.3 软件配置管理模式</h4><ul><li>软件配置管理包括四种模式<ol><li>恢复提交模式：面向文件的软件配置管理</li><li>合成模式：面向软件系统的配置管理</li><li>长事务模式：面向团队开发的整个工作空间的配置管理</li><li>面向改变模式：针对基线版本改变的管理（跟踪组件变化）</li></ol></li></ul><h4 id="1-4-配置管理的作用"><a href="#1-4-配置管理的作用" class="headerlink" title="1.4 配置管理的作用"></a>1.4 配置管理的作用</h4><ul><li>软件配置管理的最终目标是管理软件产品，包括软件需求，源码以及文档等</li><li>好的配置管理过程能覆盖软件开发和维护的各个方面，同时对软件的项目管理也起到重要支持作用</li><li>好的配置管理能使软件开发过程有好的可预测性，使软件系统具有可重复性，使用户和主管部门对软件质量更有信心</li></ul><h4 id="1-5-软件配置管理过程"><a href="#1-5-软件配置管理过程" class="headerlink" title="1.5 软件配置管理过程"></a>1.5 软件配置管理过程</h4><ul><li>软件配置管理要回答以下问题：<ol><li>采用什么方式来标识和管理已存在程序的各种版本</li><li>在软件交付用户之前和之后如何控制变更</li><li>谁有权批准和对变更安排优先级</li><li>利用什么办法来估计变更可能引起的其他问题</li></ol></li></ul><h4 id="1-6-配置管理过程的活动"><a href="#1-6-配置管理过程的活动" class="headerlink" title="1.6 配置管理过程的活动"></a>1.6 配置管理过程的活动</h4><ul><li>配置管理过程包含七个活动：<ol><li>配置管理计划</li><li>配置项识别</li><li>工作空间管理</li><li>版本控制</li><li>变更控制</li><li>状态报告</li><li>配置审计</li></ol></li></ul><h5 id="1-6-1软件配置管理计划"><a href="#1-6-1软件配置管理计划" class="headerlink" title="1.6.1软件配置管理计划"></a>1.6.1软件配置管理计划</h5><ul><li>配置管理计划标准——IEEE 828-1990<ol><li>引言<ul><li>配置管理计划的目的、适应范围、使用要求</li><li>项目概述</li><li>项目中需关注的配置管理问题和风险</li><li>软件配置管理严格性要求的等级</li><li>限制和假设</li><li>术语</li><li>参考文件</li></ul></li><li>软件配置管理<ul><li>配置管理的组织结构</li><li>职责和权限</li><li>指令和方针</li><li>参照的规程（组织的规程或客户的规程）</li><li>遵循的标准</li></ul></li><li>软件配置管理活动<ul><li>配置管理活动</li><li>变更管理和配置控制</li><li>配置状态说明</li><li>配置审核</li><li>接口和子合同方控制</li></ul></li><li>软件配置管理进度安排<ul><li>软件配置管理重要事件的顺序</li><li>软件配置管理各项活动间的依赖关系</li></ul></li><li>软件配置管理所需的资源<ul><li>采用的工具</li><li>使用的设备</li><li>所需的培训</li><li>对其他人员的要求</li></ul></li><li>软件配置管理计划的维护<ul><li>维护的职责</li><li>计划更新的条件和审批</li><li>计划变更的交流和通报</li></ul></li></ol></li></ul><h5 id="1-6-2-配置项识别"><a href="#1-6-2-配置项识别" class="headerlink" title="1.6.2 配置项识别"></a>1.6.2 配置项识别</h5><ul><li>软件配置项（Software Configuration Item，简称SCI）是指软件开发过程中产生的所有信息，这些信息是软件配置管理的基础，包括：<ol><li>计算机程序（源码和可执行代码）</li><li>计算机文档（技术和用户手册）</li><li>程序数据（程序内部和外部数据）</li></ol></li></ul><h6 id="1-6-2-1-软件配置项"><a href="#1-6-2-1-软件配置项" class="headerlink" title="1.6.2.1 软件配置项"></a>1.6.2.1 软件配置项</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426141113409.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426141113409.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220426141113409" style="zoom:50%;"><h5 id="1-6-2-2-基线"><a href="#1-6-2-2-基线" class="headerlink" title="1.6.2.2 基线"></a>1.6.2.2 基线</h5><ul><li>基线（Baseline）是指已经通过复审批准的某规约或产品，它可以作为进一步开发的基础，并且只能通过正式的变更控制过程进行改变</li><li>软件配置项可以分为：<ol><li>基线配置项，包括设计文档和源码，原则上向软件开发人员开放读取权限</li><li>非基线配置项，包括各类计划和报告，原则上向PM、CCB（Configuration Control Board）及相关管理人员开放</li></ol></li></ul><h6 id="1-6-2-3-配置基线"><a href="#1-6-2-3-配置基线" class="headerlink" title="1.6.2.3 配置基线"></a>1.6.2.3 配置基线</h6><ul><li>基线是软件生存期各开发阶段末尾的特定点，也称为里程碑</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426141254110.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426141254110.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220426141254110" style="zoom:50%;"><h5 id="1-6-3-工作空间管理"><a href="#1-6-3-工作空间管理" class="headerlink" title="1.6.3 工作空间管理"></a>1.6.3 工作空间管理</h5><ul><li>引入软件配置管理之后，要求所有开发人员把工作成果都存放到由软件配置管理工具所管理的配置库中</li><li>为了让每个开发人员和各个开发团队能既分工合作又互不干扰，需要对存放软件配置项的工作空间进行管理和维护</li></ul><h6 id="1-6-3-1-工作空间分类"><a href="#1-6-3-1-工作空间分类" class="headerlink" title="1.6.3.1 工作空间分类"></a>1.6.3.1 工作空间分类</h6><ul><li>工作空间可以分为三类：<ol><li>私有的工作空间：开发人员的专属工作空间，其他人员不得操作</li><li>团队的工作空间：开发团队成员具有操作的权利</li><li>公共的工作空间：用于统一存放各个开发团队的阶段性工作成果，它提供全组统一的标准</li></ol></li></ul><h6 id="1-6-3-2-工作空间举例"><a href="#1-6-3-2-工作空间举例" class="headerlink" title="1.6.3.2 工作空间举例"></a>1.6.3.2 工作空间举例</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426141415084.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426141415084.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220426141415084" style="zoom:50%;"><h5 id="1-6-4-版本控制"><a href="#1-6-4-版本控制" class="headerlink" title="1.6.4 版本控制"></a>1.6.4 版本控制</h5><ul><li>版本控制是软件配置管理的核心功能</li><li>所有配置库中的元素都应自动予以版本标识，并保证版本命名的唯一性</li><li>对于配置库中的各个基线控制项，应该根据其基线的位置和状态来设置相应的访问权限</li></ul><h5 id="1-6-5-变更控制"><a href="#1-6-5-变更控制" class="headerlink" title="1.6.5 变更控制"></a>1.6.5 变更控制</h5><ul><li><p>变更控制是和基线紧密相连的</p></li><li><p>变更管理的一般流程是：</p><ol><li>提出变更请求</li><li>由CCB （Configuration Control Board）审核并决定是否批准</li><li>批准后指定人员提取SCI进行修改</li><li>复审变化</li><li>提交修改后的SCI</li><li>建立测试基线并测试</li><li>重建软件的适当版本</li><li>复审所有SCI的变化</li><li>发布新版本</li></ol></li><li><p>在变更控制流程中，使用配置管理工具来进行访问控制和同步控制</p></li></ul><h5 id="1-6-6-配置状态报告"><a href="#1-6-6-配置状态报告" class="headerlink" title="1.6.6 配置状态报告"></a>1.6.6 配置状态报告</h5><ul><li>配置状态报告就是根据配置项操作数据库中的记录来向管理者报告软件开发活动的进展情况</li><li>报告通常由CASE工具根据数据库中的记录情况定期自动生成</li></ul><h6 id="1-6-6-1-配置状态报告的内容"><a href="#1-6-6-1-配置状态报告的内容" class="headerlink" title="1.6.6.1 配置状态报告的内容"></a>1.6.6.1 配置状态报告的内容</h6><ul><li>配置状态报告包括七方面的内容：<ol><li>配置库结构和相关说明</li><li>开发起始基线的构成</li><li>当前基线位置和状态</li><li>各基线配置项集成分支的情况</li><li>各私有开发分支类型的分布情况</li><li>关键元素的版本演进记录</li><li>其它应予报告的情况</li></ol></li></ul><h5 id="1-6-7-配置审计"><a href="#1-6-7-配置审计" class="headerlink" title="1.6.7 配置审计"></a>1.6.7 配置审计</h5><ul><li>配置审计的主要作用是作为变更控制的补充手段，以确保某一变更需求已经被切实完成</li><li>配置审计作为技术复审的一部分，由SQA人员独立执行</li></ul><h5 id="1-6-8-软件配置管理的主要任务"><a href="#1-6-8-软件配置管理的主要任务" class="headerlink" title="1.6.8 软件配置管理的主要任务"></a>1.6.8 软件配置管理的主要任务</h5><ul><li>配置管理的主要任务包括：<ol><li>制定项目的配置管理计划</li><li>对配置项进行识别</li><li>对配置项进行版本控制</li><li>对配置项进行版本变更控制</li><li>定期进行配置审计</li><li>向相关人员报告配置状态</li></ol></li></ul><h5 id="1-6-9-配置管理流程"><a href="#1-6-9-配置管理流程" class="headerlink" title="1.6.9 配置管理流程"></a>1.6.9 配置管理流程</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426141911444.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426141911444.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220426141911444" style="zoom:50%;"><h3 id="2-软件配置管理工具的功能"><a href="#2-软件配置管理工具的功能" class="headerlink" title="2. 软件配置管理工具的功能"></a>2. 软件配置管理工具的功能</h3><ul><li>软件配置管理为软件开发提供了一套管理办法和活动原则，成为贯穿软件开发始终的重要质量保证活动</li><li>软件配置管理工具支持则对软件配置管理起到重要的支撑作用</li></ul><h4 id="2-1-软件配置管理工具功能"><a href="#2-1-软件配置管理工具功能" class="headerlink" title="2.1 软件配置管理工具功能"></a>2.1 软件配置管理工具功能</h4><ul><li>软件配置管理工具包括八个方面的功能<ol><li>权限控制</li><li>版本控制</li><li>变更管理</li><li>独立的工作空间</li><li>报告</li><li>过程自动化</li><li>管理项目的整个生命周期</li><li>与主流开发环境的集成</li></ol></li></ul><h5 id="2-1-1-权限控制"><a href="#2-1-1-权限控制" class="headerlink" title="2.1.1 权限控制"></a>2.1.1 权限控制</h5><ul><li>权限控制是指控制不同团队开发人员的操作权限，防止误操作</li><li>权限是一个四元向量（主体、客体、行为、布尔值），即主体对客体施加的某种操作行为是否被批准</li><li>权限控制的基本工作就是维护主体集合、客体集合、行为集合以及权限向量集合</li></ul><h5 id="2-1-2-版本控制"><a href="#2-1-2-版本控制" class="headerlink" title="2.1.2 版本控制"></a>2.1.2 版本控制</h5><ul><li>版本控制是软件配置管理的基本要求<ol><li>版本控制工具可以记录项目和文件的修改轨迹</li><li>版本控制工具可以对同一文件的不同版本进行差异比较，从而可以恢复到任意一个版本</li><li>版本控制工具对用户提供了多种途径来标识版本</li></ol></li></ul><h5 id="2-1-3-变更控制"><a href="#2-1-3-变更控制" class="headerlink" title="2.1.3 变更控制"></a>2.1.3 变更控制</h5><ul><li>变更控制是指在整个软件生命周期中对软件变更的控制</li><li>变更控制工具提供有效的问题跟踪和系统变更请求管理</li><li>通过对软件生命周期各阶段所有的问题和变更请求进行跟踪记录，来支持团队成员报告、抓取和跟踪与软件变更相关的问题</li></ul><h6 id="2-1-3-1-变更请求表"><a href="#2-1-3-1-变更请求表" class="headerlink" title="2.1.3.1 变更请求表"></a>2.1.3.1 变更请求表</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426142308789.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220426142308789.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220426142308789" style="zoom:50%;"><h5 id="2-1-4-独立工作空间"><a href="#2-1-4-独立工作空间" class="headerlink" title="2.1.4 独立工作空间"></a>2.1.4 独立工作空间</h5><ul><li>开发团队成员需要在开发项目上协同、并发的工作，但又不相互影响，就需要为开发人员提供独立工作空间</li><li>沙箱（Sandbox）是为并发开发提供的独立工作空间，有时也称为工作目录（Working Folder）</li><li>开发人员在沙箱上进行开发，完成后可以合并到开发主线上，通过刷新操作，开发人员可以在沙箱内看到其他人员的开发成果</li></ul><h5 id="2-1-5-报告"><a href="#2-1-5-报告" class="headerlink" title="2.1.5 报告"></a>2.1.5 报告</h5><ul><li>为保证项目按时完成，项目经理必须监控开发进程并对发生的问题迅速做出反应</li><li>报告功能能使项目经理随时了解项目的进展情况</li></ul><h6 id="2-1-5-1-报告内容"><a href="#2-1-5-1-报告内容" class="headerlink" title="2.1.5.1 报告内容"></a>2.1.5.1 报告内容</h6><ul><li>定期提交的配置状态报告的内容示例<ul><li>各份变更请求概要：变更请求号、日期、申请人、状态、估计工作量、实际工作量、发行版本、变更结束日期</li><li>基线库状态：库标识、至某日预计库内配置项数、实际配置项数</li><li>发行信息：发行版本、计划发行时间、实际发行时间、说明</li><li>备份信息：备份日期、介质、备份存放位置</li><li>配置管理工具状态</li><li>配置管理培训状态</li></ul></li></ul><h5 id="2-1-6-过程自动化"><a href="#2-1-6-过程自动化" class="headerlink" title="2.1.6 过程自动化"></a>2.1.6 过程自动化</h5><ul><li>过程详细描述了各种人员在整个软件生存周期中如何使用整个系统，过程控制可以保证每一步都按照正确的顺序由合适的人员实施</li><li>过程自动化工具使用事物触发工具，让一个事物触发另一个事件产生行为，来实现过程自动化，比如时间节点达到自动生成状态报告</li></ul><h5 id="2-1-7-管理项目的整个生命周期"><a href="#2-1-7-管理项目的整个生命周期" class="headerlink" title="2.1.7 管理项目的整个生命周期"></a>2.1.7 管理项目的整个生命周期</h5><ul><li>软件配置工具应提供典型的开发模式模板，支持从软件需求、设计、编码、测试到发布后维护的整个项目生命周期</li><li>同时也支持用户自定义生命周期模式，比如迭代开发模式，以适应特殊的开发需求</li></ul><h5 id="2-1-8-与主流开发环境的集成"><a href="#2-1-8-与主流开发环境的集成" class="headerlink" title="2.1.8 与主流开发环境的集成"></a>2.1.8 与主流开发环境的集成</h5><ul><li>配置管理工具逐渐与主流开发工具集成在一起，方便了软件的开发过程</li><li>从集成开发环境的角度看，版本控制是其一项新的功能</li><li>从配置管理的角度看，集成开发环境充当了沙箱的角色</li></ul><h3 id="3-成熟软件配置管理工具的特征"><a href="#3-成熟软件配置管理工具的特征" class="headerlink" title="3 成熟软件配置管理工具的特征"></a>3 成熟软件配置管理工具的特征</h3><ul><li>软件配置管理工具的发展</li><li>成熟软件配置管理工具的特征</li></ul><h4 id="3-1软件配置管理工具的发展"><a href="#3-1软件配置管理工具的发展" class="headerlink" title="3.1软件配置管理工具的发展"></a>3.1软件配置管理工具的发展</h4><ul><li>软件配置管理工具的发展过程：<ol><li>第一代：基于文件，以版本控制为特征，如Microsoft VSS</li><li>第二代：基于项目库，支持并行开发团队协作及过程管理，最显著的特征形成了项目库的概念，如CVS，SVN</li><li>第三代：配置管理的整体解决方案，涵盖配置管理的整个过程，如Rational Clear Case</li></ol></li></ul><h4 id="3-2-成熟软件配置管理工具特征"><a href="#3-2-成熟软件配置管理工具特征" class="headerlink" title="3.2 成熟软件配置管理工具特征"></a>3.2 成熟软件配置管理工具特征</h4><ul><li>成熟的软件配置管理工具具有的特征：<ol><li>配置项管理</li><li>工作空间管理</li><li>流程管理</li><li>分布式开发的支持</li><li>易用性、易管理性</li><li>构建与发布管理</li><li>与其他工具的集成能力</li></ol></li></ul><h5 id="3-2-1-配置项管理"><a href="#3-2-1-配置项管理" class="headerlink" title="3.2.1 配置项管理"></a>3.2.1 配置项管理</h5><ul><li>配置项管理包括：<ol><li>版本控制</li><li>并行开发支持</li><li>基线支持</li></ol></li></ul><h5 id="3-2-2-工作空间管理"><a href="#3-2-2-工作空间管理" class="headerlink" title="3.2.2 工作空间管理"></a>3.2.2 工作空间管理</h5><ul><li>工作空间管理包括：<ol><li>能自动跟踪工作空间中所有类型的变更</li><li>能应用不同配置填充工作空间</li><li>工作空间既允许隔离又允许更新</li></ol></li></ul><h5 id="3-2-3-流程管理"><a href="#3-2-3-流程管理" class="headerlink" title="3.2.3 流程管理"></a>3.2.3 流程管理</h5><ul><li>流程管理包括：<ol><li>不同类型的对象都应具备流程定制能力</li><li>流程的范围可定制</li><li>支持测试和发布流程</li></ol></li></ul><h5 id="3-2-4-分布式开发的支持"><a href="#3-2-4-分布式开发的支持" class="headerlink" title="3.2.4 分布式开发的支持"></a>3.2.4 分布式开发的支持</h5><ul><li>支持分布式开发：<ol><li>可以进行负载均衡</li><li>支持数据管理</li></ol></li></ul><h5 id="3-2-5-易用性、易管理性"><a href="#3-2-5-易用性、易管理性" class="headerlink" title="3.2.5 易用性、易管理性"></a>3.2.5 易用性、易管理性</h5><ul><li>易用性、易管理性包括：<ol><li>报告能力</li><li>构架的弹性</li></ol></li></ul><h5 id="3-2-6-构建与发布管理"><a href="#3-2-6-构建与发布管理" class="headerlink" title="3.2.6 构建与发布管理"></a>3.2.6 构建与发布管理</h5><ul><li>构建与发布管理包括：<ol><li>能利用流程的构建工具</li><li>支持多平台构建</li><li>支持并行构建</li><li>能自动处理构建依赖关系</li><li>能收集和维护重新产生之前构建所需要的信息</li></ol></li></ul><h5 id="3-2-7-与其它工具的集成能力"><a href="#3-2-7-与其它工具的集成能力" class="headerlink" title="3.2.7 与其它工具的集成能力"></a>3.2.7 与其它工具的集成能力</h5><ul><li>集成的其它工具包括：<ol><li>变更请求工具</li><li>开发工具</li><li>其它CASE工具</li><li>SDK工具等</li></ol></li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>配置管理是对软件配置项（SCI）整个生命周期过程的管理，主要功能包括：<ol><li>配置项识别</li><li>工作空间管理</li><li>版本管理</li><li>变更控制</li><li>状态报告</li><li>审计跟踪</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件开发环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to software engineer</title>
      <link href="/2022/02/28/Introduction%20to%20software%20engineer/"/>
      <url>/2022/02/28/Introduction%20to%20software%20engineer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Introduction-to-software-engineer"><a href="#Introduction-to-software-engineer" class="headerlink" title="Introduction to software engineer"></a>Introduction to software engineer</h1><h2 id="1-Software-and-Software-Engineering"><a href="#1-Software-and-Software-Engineering" class="headerlink" title="1.Software and Software Engineering"></a>1.Software and Software Engineering</h2><h3 id="1-1The-Nature-of-Software"><a href="#1-1The-Nature-of-Software" class="headerlink" title="1.1The Nature of Software"></a>1.1The Nature of Software</h3><h4 id="defining-software"><a href="#defining-software" class="headerlink" title="defining software"></a>defining software</h4><p>software is :</p><ol><li>instructions that when executed provide desired features, function and performance</li><li>data structures that enable the programs to adequately manipulate information</li><li>descriptive information in both hard copy and virtual forms that describes the operation and use of the program</li></ol><p><strong>software has one fundamental characteristics that makes it considerably different from hardware: <u>software doesn’t wear out</u></strong></p><p><strong>bathtub curve</strong></p><h4 id="software-Application-Domain"><a href="#software-Application-Domain" class="headerlink" title="software Application Domain"></a>software Application Domain</h4><ul><li>System software</li><li>Application software</li><li>Engineering&#x2F;scientific software</li><li>Embedded software</li><li>Product-line software</li><li>Web&#x2F;mobile applications</li><li>artificial intelligence software</li></ul><h4 id="The-legacy-Software"><a href="#The-legacy-Software" class="headerlink" title="The legacy Software"></a>The legacy Software</h4><p>The legacy software can be described in the following way:</p><p><strong>Legacy software systems were developed decades ago and have been continually modified to meet changes in business requirements and computing platforms</strong></p><p><strong>The proliferation of such systems is causing headaches for large organizations who find them costly to maintain and risky to evolve</strong></p><p>The reason for the legacy software to be fixed only include:</p><ul><li>The software must be adapted to meet the needs of new computing environments of technology</li><li>The software must be enhanced tp implement new business requirements</li><li>The software must be enhanced to make it work with other more modern systems of databases</li><li>The software must be re-architected to make it viable within an evolving computing environment</li></ul><h2 id="2-Process-model"><a href="#2-Process-model" class="headerlink" title="2.Process model"></a>2.Process model</h2><h3 id="2-0-Preview"><a href="#2-0-Preview" class="headerlink" title="2.0 Preview"></a>2.0 Preview</h3><p><strong>“Software Process”</strong> Definition: A series of predictable steps (a road map) that helps you deliver a high-quality product on time</p><p>A process provides stability, control, and organization to an activity so that it does not become chaotic</p><p>The process that you adopt depends on the software that you are building.</p><h4 id="2-0-1-Software-process-model"><a href="#2-0-1-Software-process-model" class="headerlink" title="2.0.1 Software process model"></a>2.0.1 <strong>Software process model</strong></h4><ul><li><p><strong>Process model</strong></p><ul><li>Determine the order of stages involved in software development and evolution;</li><li>Establish the transition criteria for progressing from one stage to the next;</li><li><u><strong>Addresses the following software project questions:</strong></u><ul><li><u><strong>What shall we do next?</strong></u></li><li><u><strong>How long shall we continue to do it?</strong></u></li></ul></li></ul></li><li><p>Attempt to organize the software cycle by </p><ul><li>defining activities involved in software production</li><li>order of activities and their reationships</li></ul></li><li><p>Goals of a software process</p><ul><li>standardization</li><li>predictability</li><li>productivity</li><li>high product quality</li><li>ability to plan time and budget requirements</li></ul></li></ul><h4 id="2-0-2-The-reason-for-models"><a href="#2-0-2-The-reason-for-models" class="headerlink" title="2.0.2 The reason for models:"></a>2.0.2 <strong>The reason for models:</strong></h4><ul><li>Software crisis<ul><li>scheduled time and cost exceeded</li><li>user expectations not met</li><li>poor quality</li></ul></li><li>The size and economic value of software applications required appropriate “<u>process models</u>“</li></ul><h4 id="2-0-3-Problems"><a href="#2-0-3-Problems" class="headerlink" title="2.0.3 Problems"></a>2.0.3 Problems</h4><ul><li>The assumptions is that requirements can be fully understood prior to development</li><li>Interaction with the customer occurs only at the beginning(requirements) and end(after delivery)</li></ul><p><strong><u>Unfortunately the assumption almost never holds</u></strong></p><h4 id="2-0-4-Advantages"><a href="#2-0-4-Advantages" class="headerlink" title="2.0.4 Advantages"></a>2.0.4 Advantages</h4><ul><li>Reduce risks by improving visibility</li><li>Allow project changes as the project progresses</li><li>The changes based on feedback from the customer</li></ul><h3 id="2-1-A-generic-process-model"><a href="#2-1-A-generic-process-model" class="headerlink" title="2.1 A generic process model"></a>2.1 A generic process model</h3><h4 id="2-1-1-Process-define"><a href="#2-1-1-Process-define" class="headerlink" title="2.1.1 Process define"></a>2.1.1 Process define</h4><p>**A process was defined as a collection of activities, actions, and tasks that are performed when some product is to be created. **</p><p><strong>Each of the activities, actions, and tasks resides within <u>a framework or model that defines their relationship with the process and with another</u>.</strong></p><p>Each framework activity is populated by a set of software engineering actions</p><p>Each software engineering action is defined by a task set that identifies the work tasks that are to be completed.</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220307143810330.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220307143810330.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom:50%;"><p><strong>A generic process framework for software engineering defines five framework activities:</strong></p><ul><li>communication</li><li>planning </li><li>modeling</li><li>construction</li><li>deployment</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220307144011382.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220307144011382.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom:50%;"><h4 id="2-1-2Process-flow"><a href="#2-1-2Process-flow" class="headerlink" title="2.1.2Process flow:"></a>2.1.2<strong>Process flow:</strong></h4><p><strong>Linear flow:</strong></p><p>A linear process flow executes each of the five framework activities in sequence</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f44a28c6aec3a047b5eb880024c6295e.png" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/img_convert/f44a28c6aec3a047b5eb880024c6295e.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><strong>Iterative process flow:</strong></p><p>May repeats one or more of the activities before proceeding to the next</p><img src="https://img-blog.csdnimg.cn/img_convert/cf11e9dccd3c25263b98f6860b214ff0.png" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/img_convert/cf11e9dccd3c25263b98f6860b214ff0.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img" style="zoom: 67%;"><p><strong>Evolutionary process flow:</strong></p><p> This executes the activities in a “circular” manner, each circuit through the five activities leads to a more complete version of the software.</p><img src="https://img-blog.csdnimg.cn/img_convert/a8a7615a48f0b6c8d54eb3fbb47fa786.png" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/img_convert/a8a7615a48f0b6c8d54eb3fbb47fa786.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img" style="zoom: 67%;"><p><strong>Parallel process flow:</strong></p><p>This executes one or more activities in parallel with other activities(modeling for one aspect of the software might be executed in parallel with construction of another aspect of the software)</p><img src="https://img-blog.csdnimg.cn/img_convert/6417d23c758a1c60a5a4a40beb8c179f.png" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/img_convert/6417d23c758a1c60a5a4a40beb8c179f.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img" style="zoom: 67%;"><h3 id="2-2Prescriptive-process-model"><a href="#2-2Prescriptive-process-model" class="headerlink" title="2.2Prescriptive process model"></a>2.2Prescriptive process model</h3><p>Prescriptive process models define a predefined set of process elements and a predictable process work flow</p><h4 id="2-2-1The-waterfall-model"><a href="#2-2-1The-waterfall-model" class="headerlink" title="2.2.1The waterfall model"></a>2.2.1The waterfall model</h4><p>The waterfall model, sometimes called the “linear sequential model”, suggests a systematic, sequential approach to software development</p><p><strong>Waterfall models needs that the requirements for a problem are well understood, this situation is sometimes encountered when well-defined adaptations or enhancements are well defined and reasonably stable</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312131312356.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312131312356.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220312131312356" style="zoom:50%;"><ul><li>PRO: the most widely used model; a template for use</li><li>CON: inflexible to changing customer requirements, this is a good model to use when requirements are well</li></ul><p>Drawback:</p><ul><li>customer has to state all requirements explicitly; </li><li>doesn’t support change; </li><li>customer can see a working version of the program until code phase.</li></ul><p>The reason for waterfall failure:</p><ol><li>Real projects rarely follow the sequential flow that the model proposes;</li><li>It is often difficult for the customer to state all requirements explicitly;</li><li>The customer must have patience.</li></ol><h4 id="2-2-2Incremental-model"><a href="#2-2-2Incremental-model" class="headerlink" title="2.2.2Incremental model"></a>2.2.2Incremental model</h4><p><strong>Delivers software in small but usable pieces, each piece builds on pieces already delivered:</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312133145520.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312133145520.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220312133145520" style="zoom:50%;"><p><strong><u>RAD model</u></strong>:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312133509524.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312133509524.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220312133509524" style="zoom:50%;"><p><strong>Makes heavy use of reusable software components with an extremely short development cycle</strong> </p><ul><li>The RAD model is a high-speed adaptation of the linear sequential model. Project requirements must be well understood and the project scope tightly constrained</li><li>Developers can use component-based construction techniques to build a fully functional system in a short time period</li></ul><p>Pro: may shorten development time significantly<br>Con: the system may not be modularized; performance issue; risk issue</p><h4 id="2-2-3-Prototyping-process-model"><a href="#2-2-3-Prototyping-process-model" class="headerlink" title="2.2.3 Prototyping process model"></a>2.2.3 Prototyping process model</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312135039886.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312135039886.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220312135039886" style="zoom:50%;"><p><strong>Good first step when customer has a legitimate need, but is clueless about the details, developer needs to resist pressure to extend a rough prototype into a production product</strong></p><p><strong>This model is good to use when the customer has legitimate needs, but is not able to articulate the details at the start of the project. A small mock-up of a working system is developed and presented to the customer.</strong> </p><ul><li><strong>Pro: evaluated by user and used to refine requirements</strong></li><li><strong>Con: the first system built is barely usable; unrealistic expectations from the customer; the performance issue</strong></li></ul><p>Aspects:</p><ul><li>Designed to assist the customer or developer in understanding requirements.</li><li>Quick design (focus on representation of software aspects visible to the user)</li><li>Prototype is evaluated by the customer, and used to identify and refine requirements</li><li>Prototype  is discarded (at least in part)</li></ul><h4 id="2-2-4-Evolutionary-process-model"><a href="#2-2-4-Evolutionary-process-model" class="headerlink" title="2.2.4 Evolutionary process model"></a>2.2.4 Evolutionary process model</h4><h5 id="Spiral-model"><a href="#Spiral-model" class="headerlink" title="**Spiral model: **"></a>**Spiral model: **</h5><p><strong><u>Spiral model: is an evolutionary software process model</u> that couples iterative nature of prototyping with the controlled and systematic aspects of the linear sequential model</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312140313213.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312140313213.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220312140313213" style="zoom:50%;"><p><strong>Distinguishing features:</strong></p><ul><li>A cyclic approach for incrementally growing a system’s degree of definition and implementation while decreasing its degree of risk;</li><li>A set of anchor point milestones for ensuring stakeholder commitment to feasible and mutually satisfactory system solutions.</li></ul><p><strong>Process features of spiral model:</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312142423000.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312142423000.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220312142423000" style="zoom:50%;"><ul><li>Simplified form<br>Waterfall model plus risk analysis</li><li>Precede each phase by<br>Alternatives<br>Risk analysis</li><li>Follow each phase by<br>Evaluation<br>Planning of next phase</li></ul><p><strong>Full Spiral Model:</strong> </p><p><strong><u>If risks cannot be resolved, project is immediately terminated</u></strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312142859521.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312142859521.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220312142859521" style="zoom:50%;"><p>Analysis of Spiral Model:</p><ul><li>Strengths<ul><li>Easy to judge how much to test</li><li>No distinction between development, maintenance</li></ul></li><li>Weaknesses<ul><li>For large-scale software only </li><li>For internal (in-house) software only</li></ul></li></ul><h5 id="Concerns-of-Evolutionary-Software-Process"><a href="#Concerns-of-Evolutionary-Software-Process" class="headerlink" title="Concerns of Evolutionary Software Process"></a>Concerns of Evolutionary Software Process</h5><ul><li>Prototyping poses a problem to project planning because of the uncertain number of cycles required to construct the product;</li><li>Evolutionary software processes do not establish the maximum speed of the evolution;</li><li>Software processes should be focused on flexibility and extensibility rather than on high quality;</li></ul><h4 id="2-2-5-Specialized-Process-Models"><a href="#2-2-5-Specialized-Process-Models" class="headerlink" title="2.2.5 Specialized Process Models"></a>2.2.5 Specialized Process Models</h4><p>Component-Based Development: Software reuse</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312143945970.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312143945970.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220312143945970" style="zoom:50%;"><p>This is a formal Methods Model:</p><ul><li>Emphasizes the mathematical specification of requirements</li><li>Rigorous mathematical notation used to specify, design, and verify computer-based systems</li></ul><p>The reason of formal Methods model:</p><ul><li>The development of formal models is time-consuming and expensive;</li><li>Extensive developers training is required;</li><li>It is difficult to use the models as a communication mechanism for customers;</li></ul><h4 id="2-2-6-Unified-Process-Model"><a href="#2-2-6-Unified-Process-Model" class="headerlink" title="2.2.6 Unified Process Model"></a>2.2.6 Unified Process Model</h4><p>A Unified Modeling Language (UML) that is:</p><ul><li>use-case driven: A text narrative or template that describes a system function or feature from the user’s point of view</li><li>architecture-centric</li><li>iterative and incremental</li></ul><p>Steps:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312145322396.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312145322396.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220312145322396" style="zoom:50%;"><p>Generic activities of the Unified Process:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312145518058.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312145518058.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220312145518058" style="zoom:50%;"><p><strong>Lifecycle for Enterprise Unified Process:</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312145755437.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220312145755437.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220312145755437" style="zoom:50%;"><h2 id="3-Agility-and-process"><a href="#3-Agility-and-process" class="headerlink" title="3. Agility and process"></a>3. Agility and process</h2><h3 id="Quick-look"><a href="#Quick-look" class="headerlink" title="Quick look:"></a>Quick look:</h3><p> What is it:</p><p>Agile software engineering combines a philosophy and a set of development guidelines.</p><p>The philosophy encourages customer satisfaction and early incremental delivery of software</p><h2 id="8-Understanding-Requirements"><a href="#8-Understanding-Requirements" class="headerlink" title="8. Understanding Requirements"></a>8. Understanding Requirements</h2><h3 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h3><ul><li>What is RE?</li><li>RE tasks</li><li>RE process</li><li>Eliciting requirements</li><li>Development Use-Case</li><li>Building the Analysis Model</li><li>Negotiating Requirements</li><li>Validating</li></ul><h3 id="8-1-Requirements"><a href="#8-1-Requirements" class="headerlink" title="8.1 Requirements"></a>8.1 Requirements</h3><p><strong>Requirements unambiguously specify the solution to the customer’s problems you trying to solve</strong></p><p>(include external behavior&#x2F;functionality, product and process quality, project constraints)</p><ul><li>Requirements drive all software activities</li><li>They are needed by:<ul><li>Project managers … to know what your team must deliver</li><li>Designers … to know what to design</li><li>Coders … to know what to code</li><li>Testers … to know what to test</li><li>Documentation writers … to know what to write in the user’s manual</li></ul></li><li>Requirements represent contract between your team and you customer</li></ul><p>Importance of Requirements </p><ul><li>The set of requirements constitute a contract between the client and the software developer<ul><li>It should be written such that all stakeholders can understand what the system will do.</li><li>It allows developer to map problem domain concepts to solution domain concepts</li></ul></li></ul><p>Requirements Engineering:</p><ul><li>It helps software engineering to better understand the problem to be solved;</li><li>It encompasses the set of questions:<ul><li>What is the business impact of the software?</li><li>What the customer wants? </li><li>How end-users will interact with the software?</li></ul></li></ul><h3 id="8-2-RE-Tasks"><a href="#8-2-RE-Tasks" class="headerlink" title="8.2 RE Tasks"></a>8.2 RE Tasks</h3><h4 id="Requirements-Engineering-Tasks"><a href="#Requirements-Engineering-Tasks" class="headerlink" title="Requirements Engineering Tasks:"></a><strong>Requirements Engineering Tasks</strong>:</h4><ul><li>Inception（初启）—Establish a basic understanding of the problem and the nature of the solution. </li><li>Elicitation（导出）—Draw out the requirements from stakeholders.</li><li>Elaboration（精化）—Create an analysis model that represents information, functional, and behavioral aspects of the requirements.</li><li>Negotiation（谈判）—Agree on a deliverable system that is realistic for developers and customers.</li><li>Specification（规格说明）—Describe the requirements formally or informally.</li><li>Validation（确认）—Review the requirement specification for errors, ambiguities（模糊）, omissions（遗漏）, and conflicts. </li><li>Requirements management（管理）—Manage changing requirements.</li></ul><h5 id="8-2-1-Inception"><a href="#8-2-1-Inception" class="headerlink" title="8.2.1 Inception"></a>8.2.1 Inception</h5><p>Ask “context-free” questions:</p><ul><li><p>Who is behind the request for this work?</p></li><li><p>Who will use the solution (product&#x2F;system)?</p></li><li><p>What will be the economic benefits?</p></li><li><p>How would you characterize “good” output from the system?</p></li><li><p>What problems does this solution address?</p></li><li><p>What environment will the product be used in?</p></li><li><p>Are you the right person to answer these questions?</p></li><li><p>Are these question relevant?</p></li><li><p>Can anyone else provide additional information?</p></li><li><p>Should I be asking you anything else?</p></li></ul><h5 id="8-2-2-Elicitation"><a href="#8-2-2-Elicitation" class="headerlink" title="8.2.2 Elicitation"></a>8.2.2 Elicitation</h5><p>Why is it so difficult to clearly understand what the customer wants?</p><ul><li>Scope<ul><li>The boundary of the system is ill-defined.</li><li>Customers&#x2F;users specify unnecessary technical detail that may confuse rather than clarify objectives.</li></ul></li><li>Understanding<ul><li>Customers are not completely sure of what is needed.</li><li>Customers have a poor understanding of the capabilities and limitations of the computing environment.</li><li>Customers don’t have a full understanding of their problem domain.</li><li>Customers have trouble communicating needs to the system engineer.</li><li>Customers omit detail that is believed to be obvious.</li><li>Customers specify requirements that are ambiguous or untestable.</li></ul></li><li>Volatility（不稳定性）<ul><li>Requirements change over time.</li></ul></li></ul><h5 id="8-2-3-Elaboration（求精）"><a href="#8-2-3-Elaboration（求精）" class="headerlink" title="8.2.3 Elaboration（求精）"></a>8.2.3 Elaboration（求精）</h5><ul><li>It is a good thing, but you have to know when to stop;</li><li>The key is to describe the problem in a way that establishes a firm base for design;</li><li>If you work beyond that point, you’re doing design;</li></ul><h5 id="8-2-4-Negotiation（谈判）"><a href="#8-2-4-Negotiation（谈判）" class="headerlink" title="8.2.4 Negotiation（谈判）"></a>8.2.4 Negotiation（谈判）</h5><ul><li>There should be no winner and no loser in an effective negotiation（ Win – Win );</li><li>Both sides win because a “deal” that both can live with is solidified.</li></ul><h5 id="8-2-5-Specification（规格说明）"><a href="#8-2-5-Specification（规格说明）" class="headerlink" title="8.2.5 Specification（规格说明）"></a>8.2.5 Specification（规格说明）</h5><p><strong>The formality and format of a specification varies with the size and the complexity of the software to be built.</strong></p><h5 id="8-2-6-Validation（确认）"><a href="#8-2-6-Validation（确认）" class="headerlink" title="8.2.6 Validation（确认）"></a>8.2.6 Validation（确认）</h5><ul><li>A key concern during requirements validation is consistency（一致性）;</li><li>Use the analysis model to ensure that requirements have been consistently stated;</li></ul><h5 id="8-2-7-Requirements-Management"><a href="#8-2-7-Requirements-Management" class="headerlink" title="8.2.7 Requirements Management"></a>8.2.7 Requirements Management</h5><ul><li>Features traceability table;</li><li>Source traceability table;</li><li>Dependency traceability table;</li><li>Subsystem traceability table;</li><li>Interface traceability table;</li></ul><h4 id="How-to-maintain-traceability-relationships-…"><a href="#How-to-maintain-traceability-relationships-…" class="headerlink" title="How to maintain traceability relationships …"></a>How to maintain traceability relationships …</h4><ul><li>Most easily maintained using tools.</li><li>Low tech tools: Excel, Word, …<ul><li>Can be good enough (and better than nothing).</li></ul></li><li>Specialized tools: RequisitePro.<ul><li>Tools can be used to automatically generate views in the form to Matrices.</li><li>NOTE: consider the cost of learning and using tools.</li></ul></li></ul><h3 id="8-3-RE-process"><a href="#8-3-RE-process" class="headerlink" title="8.3 RE process"></a>8.3 RE process</h3><ul><li>Identifying the stakeholders</li><li>Recognizing multiple viewpoints</li><li>Working toward collaboration</li><li>Asking the first questions</li></ul><p><strong>Stakeholders in SE:</strong></p><ul><li>Customers<ul><li>Those who pay for the software</li></ul></li><li>Users<ul><li>Those who use the software</li></ul></li><li>Software developers</li><li>Development Managers</li></ul><p><strong><u> Problem: The customer often doesn’t have good grasp of what he wants.</u></strong></p><h3 id="8-4-Eliciting-Requirements"><a href="#8-4-Eliciting-Requirements" class="headerlink" title="8.4 Eliciting Requirements"></a>8.4 Eliciting Requirements</h3><ul><li>Collaborative Requirements Gathering;</li><li>Quality Function Deployment;</li><li>User Scenarios;</li><li>Elicitation Work Products;</li></ul><h4 id="8-4-1-Collaborative-Requirements-Gathering"><a href="#8-4-1-Collaborative-Requirements-Gathering" class="headerlink" title="8.4.1 Collaborative Requirements Gathering"></a>8.4.1 Collaborative Requirements Gathering</h4><p><strong><u>Meeting</u></strong></p><p><strong>How to conduct a meeting?</strong></p><ul><li>Meetings are attended by all interested stakeholders.</li><li>Rules established for preparation and participation.</li><li>Agenda should be formal enough to cover all important points, but informal enough to encourage the free flow of ideas.</li><li>A facilitator controls the meeting.</li><li>A definition mechanism (blackboard, flip charts, etc.) is used.</li></ul><p><strong>During the meeting:</strong></p><ul><li>The problem is identified.</li><li>Elements of the solution are proposed.</li><li>Different approaches are negotiated.</li><li>A preliminary set of solution requirements are obtained.</li><li>The atmosphere is collaborative and non-threatening.</li></ul><h4 id="8-4-2-Quality-Function-Deployment"><a href="#8-4-2-Quality-Function-Deployment" class="headerlink" title="8.4.2 Quality Function Deployment"></a>8.4.2 Quality Function Deployment</h4><ul><li>QFD Defines requirements in a way that maximizes customer satisfaction.</li><li>Three types of requirements:<ul><li>Normal Requirements;    </li><li>Expected Requirements;</li><li>Exciting Requirements;</li></ul></li></ul><h5 id="8-4-2-1Three-Level-Requirements"><a href="#8-4-2-1Three-Level-Requirements" class="headerlink" title="8.4.2.1Three Level Requirements:"></a>8.4.2.1<strong>Three Level Requirements:</strong></h5><ul><li>Stakeholder Needs</li><li>Features of the System</li><li>Software Requirements</li></ul><h5 id="8-4-2-2Software-Requirements-Types"><a href="#8-4-2-2Software-Requirements-Types" class="headerlink" title="8.4.2.2Software Requirements Types:"></a>8.4.2.2<strong>Software Requirements Types:</strong></h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220314161609102.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220314161609102.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220314161609102" style="zoom:33%;"><ul><li><p>Functional Requirements(FR):</p><ul><li>Describe the functionality or services that the system is expected to provide </li><li>Address the input-output behavior of a system</li></ul></li><li><p>Non-Functional Requirement(NFRS):</p><p><strong>Specifying various quality attributes of the system</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319164350389.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319164350389.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220319164350389" style="zoom:50%;"></li></ul><h5 id="8-4-2-3-Design-Constraints"><a href="#8-4-2-3-Design-Constraints" class="headerlink" title="8.4.2.3 Design Constraints"></a>8.4.2.3 Design Constraints</h5><ul><li>Restrictions upon the design of a system, or the process by which a system is developed ,which do not affect the external behavior must be fulfilled to meet technical, business, or contractual obligations</li><li>They constrain the way a designer and implementer can make decisions</li></ul><h3 id="8-5-User-Scenarios（用户脚本）"><a href="#8-5-User-Scenarios（用户脚本）" class="headerlink" title="8.5 User Scenarios（用户脚本）"></a>8.5 User Scenarios（用户脚本）</h3><ul><li><p>Scenarios ( use-case ):</p><ul><li>identify a thread of usage for the system to be constructed.</li><li>Provide a description of how the system will be used</li></ul><p>Example:</p></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319165652047.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319165652047.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220319165652047" style="zoom: 67%;"><ul><li>Elicitation Work Products<ul><li>Statement of need and feasibility.</li><li>Statement of scope.</li><li>List of participants in requirements elicitation.</li><li>Description of the system’s technical environment.</li><li>List of requirements and associated domain constraints.</li><li>List of usage scenarios.</li><li>Any prototypes developed to refine requirements.</li></ul></li></ul><h3 id="8-6-Developing-Use-Cases"><a href="#8-6-Developing-Use-Cases" class="headerlink" title="8.6 Developing Use-Cases"></a>8.6 Developing Use-Cases</h3><ul><li>A use-case is a story about how someone or something external to the software (known as an actor) interacts with the system.</li><li>Use-case are defined from an actor’s point of view.</li><li>An actor is a role that people or devices play as they interact with the software.</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319170957340.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319170957340.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220319170957340" style="zoom:50%;"><ul><li>Each scenario answers the following questions:<ul><li>Who is the primary actor, the secondary actor(s)?</li><li>What are the actor’s goals?</li><li>What preconditions should exist before the story begins?</li><li>What main tasks or functions are performed by the actor?</li><li>What exceptions might be considered as the story is described?</li><li>What variations in the actor’s interaction are possible?</li><li>What system information will the actor acquire, produce, or change? </li><li>Will the actor have to inform the system about changes in the external environment?</li><li>What information does the actor desire from the system?</li><li>Does the actor wish to be informed about unexpected changes?</li></ul></li></ul><h3 id="8-6-Building-the-Analysis-Model"><a href="#8-6-Building-the-Analysis-Model" class="headerlink" title="8.6 Building the Analysis Model"></a>8.6 Building the Analysis Model</h3><ul><li>Elements of the Analysis Model;</li><li>Analysis Patterns;</li></ul><h4 id="Elements-of-the-Analysis-Model"><a href="#Elements-of-the-Analysis-Model" class="headerlink" title="Elements of the Analysis Model"></a>Elements of the Analysis Model</h4><ul><li>Scenario-based elements<ul><li>Use-case—How external actors interact with the system (use-case diagrams; detailed templates)</li><li>Functional—How software functions are processed in the system (flow charts; activity diagrams)</li></ul></li><li>Class-based elements<ul><li>The various system objects (obtained from scenarios) including their attributes and functions (class diagram)</li></ul></li><li>Behavioral elements<ul><li>How the system behaves in response to different events (state diagram)</li></ul></li><li>Flow-oriented elements<ul><li>How information is transformed as if flows through the system (data flow diagram)</li></ul></li></ul><h5 id="Use-Case-Diagram"><a href="#Use-Case-Diagram" class="headerlink" title="Use-Case Diagram"></a>Use-Case Diagram</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319171528803.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319171528803.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220319171528803" style="zoom:50%;"><h5 id="Activity-Diagram-for-RE"><a href="#Activity-Diagram-for-RE" class="headerlink" title="Activity Diagram for RE"></a>Activity Diagram for RE</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319171604459.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319171604459.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220319171604459" style="zoom:50%;"><h5 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319171704345.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319171704345.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220319171704345" style="zoom:50%;"><h5 id="State-Diagram"><a href="#State-Diagram" class="headerlink" title="State Diagram"></a>State Diagram</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319171742317.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319171742317.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220319171742317" style="zoom:50%;"><h4 id="Analysis-Patterns"><a href="#Analysis-Patterns" class="headerlink" title="Analysis Patterns"></a>Analysis Patterns</h4><ul><li>They  are conceptual models, which capture an abstraction of a situation that can often be encountered in modeling. </li><li>Analysis patterns suggest solutions within the application domain that can be reused when modeling many application.<ul><li>Analysis patterns speed up the development of abstract analysis models.</li><li>Analysis patterns facilitate the transformation of the analysis model into a design model.</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319172159037.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220319172159037.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220319172159037" style="zoom:67%;"><h5 id="Normal-format"><a href="#Normal-format" class="headerlink" title="Normal format:"></a>Normal format:</h5><ul><li><p>Pattern name:  Captures the essence of the pattern. </p></li><li><p>Intent: What the pattern accomplishes or represents. </p></li><li><p>Motivation:  A scenario that illustrates how the pattern solves a problem.</p></li><li><p>Forces and context:  External issues (forces) that affect how the pattern is used, and external issues resolved when the pattern is applied. </p></li><li><p>Solution:  How the pattern is applied to solve the problem; emphasizes structural and behavioral issues.</p></li><li><p>Consequences:  What happens when the pattern is applied; what trade-offs exist during its application.</p></li><li><p>Design:  How the pattern can be achieved via known design patterns.</p></li><li><p>Known uses:  Examples of uses within actual systems.</p></li><li><p>Related patterns:  Patterns related to the named pattern because</p><ol><li>they are commonly used with the named pattern;</li><li>they are structurally similar to the named pattern;</li><li>they are a variation of the named pattern.</li></ol></li></ul><h3 id="8-7-Negotiating-Requirements"><a href="#8-7-Negotiating-Requirements" class="headerlink" title="8.7 Negotiating Requirements"></a>8.7 Negotiating Requirements</h3><ul><li>Identify the key stakeholders<ul><li>These are the people who will be involved in the negotiation</li></ul></li><li>Determine each of the stakeholders “win conditions”<ul><li>Win conditions are not always obvious</li></ul></li><li>Negotiate<ul><li>Work toward a set of requirements that lead to “win-win”</li></ul></li></ul><h3 id="8-8-Validating-Requirements"><a href="#8-8-Validating-Requirements" class="headerlink" title="8.8 Validating Requirements"></a>8.8 Validating Requirements</h3><ul><li>Is each requirement consistent with the objective of the system?</li><li>Have all requirements been specified at the proper level of abstraction? </li><li>Is the requirement really necessary?</li><li>Is each requirement bounded and unambiguous?</li><li>Does each requirement have attribution? </li><li>Do any requirements conflict with other requirements?</li><li>Is each requirement achievable in the system’s technical environment?</li><li>Is each requirement testable, once implemented?</li><li>Does the model reflect the system’s information, function and behavior?</li><li>Has the model been appropriately “partitioned”?</li><li>Have appropriate requirements patterns been used?</li></ul><h2 id="9-Requirements-Modeling"><a href="#9-Requirements-Modeling" class="headerlink" title="9. Requirements Modeling"></a>9. Requirements Modeling</h2><h3 id="9-1-What-is-a-Requirement"><a href="#9-1-What-is-a-Requirement" class="headerlink" title="9.1 What is a Requirement ?"></a>9.1 What is a Requirement ?</h3><ul><li><p>Requirement（用户需求）:</p><ul><li>contractual condition and&#x2F;or capability (external customer(*))</li><li>industrial constraint (system engineering group, marketing, …)</li><li>states WHAT the system&#x2F;software item must do, not HOW it does it.</li></ul></li><li><p>Specification（软件规格）: a list of technical requirements</p></li><li><p>Requirement trace-ability, necessary to ensure development coherence</p></li></ul><h4 id="Types-of-Requirements"><a href="#Types-of-Requirements" class="headerlink" title="Types of Requirements"></a>Types of Requirements</h4><ul><li><p>Non-functional technical requirements</p><ul><li>Operational security</li><li>Safety</li><li>Availability</li><li>Reliability</li><li>Maintainability</li><li>Ergonomics</li><li>Performance</li><li>Constraints</li></ul></li><li><p>Non-technical requirements</p><ul><li>Contractual milestones</li><li>Required methods and techniques</li></ul></li><li><p>Functional technical requirements</p><ul><li>Capabilities</li><li>Dynamic behaviour</li><li>Data manipulation</li></ul></li></ul><h4 id="How-Must-Be-A-Requirement"><a href="#How-Must-Be-A-Requirement" class="headerlink" title="How Must Be A Requirement ?"></a>How Must Be A Requirement ?</h4><ul><li>Easily Identifiable<ul><li>by a well–determined name and a unique reference in the system.</li></ul></li><li>Unambiguous<ul><li>Only 1 possible interpretation is possible</li></ul></li><li>Testable<ul><li>A test case can be defined to test the requirement</li></ul></li></ul><h3 id="9-2-Requirements-Analysis"><a href="#9-2-Requirements-Analysis" class="headerlink" title="9.2 Requirements Analysis"></a>9.2 Requirements Analysis</h3><p>What is Software Requirements Analysis?</p><ul><li>To understand the specific requirements that must be achieved to build high quality software.</li><li>The results of requirements analysis are analysis models and requirements specification.</li><li>The analysis model and requirements specification provide a means for assessing quality once the software is built.</li></ul><p>Software Requirements Analysis as a Bridge</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328165043938.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328165043938.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220328165043938" style="zoom:33%;"><p><strong>Analysis Model -&gt; Design Model</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328165126070.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328165126070.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220328165126070" style="zoom: 50%;"><h4 id="9-2-1-Software-Requirements-Analysis"><a href="#9-2-1-Software-Requirements-Analysis" class="headerlink" title="9.2.1 Software Requirements Analysis"></a>9.2.1 Software Requirements Analysis</h4><ul><li><p>The objectives of analysis modeling:</p><ul><li>to describe what the customer requires;</li><li>to establish a basis for the creation of a software design;</li><li>to define a set of requirements that can be validated;</li></ul></li><li><p>Software requirements analysis may be divided into five areas of effort:</p><ul><li>Problem recognition</li><li>Evaluation and synthesis</li><li>Modeling</li><li>Specification</li><li>Review</li></ul></li></ul><p>The Software requirements Analysis Process</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328165806673.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328165806673.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220328165806673" style="zoom: 50%;"><h5 id="Analysis-Rules-of-Thumb（经验法则）"><a href="#Analysis-Rules-of-Thumb（经验法则）" class="headerlink" title="Analysis Rules of Thumb（经验法则）"></a>Analysis Rules of Thumb（经验法则）</h5><ul><li>The model should focus on requirements that are visible within the problem or business domain;</li><li>Each element of the analysis model should add to an overall understanding of software requirements and provide insight into the information domain, function, and behavior of the system;</li><li>Delay consideration of infrastructure and other non-functional models until design;</li><li>Minimize coupling throughout the system;</li><li>Be certain that the analysis model provides value to all stakeholders;</li><li>Keep the model as simple as it can be.</li></ul><h5 id="Domain-Analysis"><a href="#Domain-Analysis" class="headerlink" title="Domain Analysis"></a>Domain Analysis</h5><ul><li><p>What?</p><p>The identification, analysis, and specification of common requirements</p></li><li><p>Why?</p><p>For reuse on multiple projects in the domain;</p></li><li><p>How?</p><ul><li>Input: technical literature, existing applications, customer surveys, expert advice, current&#x2F;future requirements;</li><li>Output: Class taxonomies, reuse standards, functional models, domain language;</li></ul></li></ul><h5 id="The-Phases-of-Analysis"><a href="#The-Phases-of-Analysis" class="headerlink" title="The Phases of Analysis"></a>The Phases of Analysis</h5><ul><li><p>identify the “customer” and work together to negotiate “product-level” requirements</p></li><li><p>build an analysis model</p><ul><li>focus on data</li><li>define function</li><li>represent behavior</li></ul></li><li><p>give out prototype areas of uncertainty</p></li><li><p>develop a specification that will guide design</p></li><li><p>conduct formal technical reviews</p></li></ul><h4 id="9-2-2-Real-problems-of-Analysis"><a href="#9-2-2-Real-problems-of-Analysis" class="headerlink" title="9.2.2 Real problems of Analysis"></a>9.2.2 Real problems of Analysis</h4><p>What Are the Real Problems of Analysis?</p><ul><li>the customer has only a vague idea of what is required</li><li>the developer is willing to proceed with the “vague idea” on the assumption that “we’ll fill in the details as we go”</li><li>the customer keeps changing requirements</li><li>the developer is “racketed（敲诈）” by these changes, making errors in specifications and development</li><li>and so it goes…</li></ul><h4 id="9-2-3-The-Analysis-Model"><a href="#9-2-3-The-Analysis-Model" class="headerlink" title="9.2.3 The Analysis Model"></a>9.2.3 The Analysis Model</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328171359392.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328171359392.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220328171359392" style="zoom:33%;"><p>Elements of Requirements Analysis</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328171423257.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328171423257.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220328171423257" style="zoom: 50%;"><h5 id="Analysis-Principle"><a href="#Analysis-Principle" class="headerlink" title="Analysis Principle:"></a>Analysis Principle:</h5><ol><li>Model the Data Domain<ul><li>Define data objects</li><li>Describe data attributes</li><li>Establish data relationships</li></ul></li><li>Model Function<ul><li>Identify functions that transform data objects</li><li>Indicate how data flow through the system</li><li>Represent producers and consumers of data</li></ul></li><li>Model Behavior<ul><li>Indicate different states of the system</li><li>Specify events that cause the system to change state</li></ul></li><li>Partition the Models<ul><li>Refine each model to represent lower levels of abstraction<ol><li>Refine data objects</li><li>Create a functional hierarchy</li><li>Represent behavior at different levels of detail</li></ol></li></ul></li><li>Essence<ul><li>Begin by focusing on the essence of the problem without regard to implementation details</li></ul></li></ol><h5 id="Notes-of-Requirements-Analysis"><a href="#Notes-of-Requirements-Analysis" class="headerlink" title="Notes of Requirements Analysis"></a>Notes of Requirements Analysis</h5><ul><li>Understand the problem before you begin to create the analysis model. </li><li>Develop prototypes that enable a user to understand how human-machine interaction will occur.  </li><li>Record the origin and the reason for every requirement.  </li><li>Use multiple views of requirements.  </li><li>Prioritize requirements.  </li><li>Work to eliminate ambiguity.</li></ul><h3 id="9-3-Specification"><a href="#9-3-Specification" class="headerlink" title="9.3 Specification"></a>9.3 Specification</h3><p>What is a Specification ?</p><ul><li>Its main objective is to lay down the foundations of the agreement to be ratified by the customer and the manufacturer</li><li>It consists in a list of technical requirements which the system&#x2F;software must meet</li><li>It ensures, as far as possible, the feasibility of the system &#x2F; software.</li></ul><h5 id="Objective-1-Analysis-and-Understand"><a href="#Objective-1-Analysis-and-Understand" class="headerlink" title="Objective 1: Analysis and Understand"></a>Objective 1: Analysis and Understand</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328172041645.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328172041645.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220328172041645" style="zoom:50%;"><h5 id="Objective-2-Communicate"><a href="#Objective-2-Communicate" class="headerlink" title="Objective 2: Communicate"></a>Objective 2: Communicate</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328172120811.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328172120811.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220328172120811" style="zoom:50%;"><h5 id="Objective-3-Ensure-the-Feasibility-（可行性）"><a href="#Objective-3-Ensure-the-Feasibility-（可行性）" class="headerlink" title="Objective 3: Ensure the Feasibility （可行性）"></a>Objective 3: Ensure the Feasibility （可行性）</h5><ul><li>Logical Feasibility:<ul><li>The availability of all required information must be guaranteed,</li><li>The complements required to ensure such availability must be identified.</li></ul></li><li>Technical Feasibility:<ul><li>Complementary studies</li><li>Prototypes</li><li>Mock-up</li></ul></li><li>Economic Feasibility<ul><li>Respect cost &amp; delay</li></ul></li></ul><h5 id="Objective-4-Requirements"><a href="#Objective-4-Requirements" class="headerlink" title="Objective 4: Requirements"></a>Objective 4: Requirements</h5><p>A major specification goal:</p><ul><li>System Requirements versus Software Requirements</li><li>Software Requirements versus Software Design</li><li>Software Requirements versus Software Qualification</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328172441549.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328172441549.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220328172441549" style="zoom: 50%;"><h5 id="Objective-5-Prepare-the-Design"><a href="#Objective-5-Prepare-the-Design" class="headerlink" title="Objective 5: Prepare the Design"></a>Objective 5: Prepare the Design</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328172559456.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328172559456.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220328172559456" style="zoom:50%;"><h5 id="Objective-6-Qualify-the-Software-Product"><a href="#Objective-6-Qualify-the-Software-Product" class="headerlink" title="Objective 6: Qualify the Software Product"></a>Objective 6: Qualify the Software Product</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328172820970.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220328172820970.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220328172820970" style="zoom:50%;"><h5 id="Objective-7-Organize-amp-Manage-the-Development"><a href="#Objective-7-Organize-amp-Manage-the-Development" class="headerlink" title="Objective 7: Organize &amp; Manage the Development"></a>Objective 7: Organize &amp; Manage the Development</h5><ul><li>Consolidation of the cost<ul><li>Specification enables refining of initial estimations: size, costs, lead times.</li></ul></li><li>Definition of increments<ul><li>Where the incremental developmentapproach is adopted.</li></ul></li></ul><h5 id="Specification-Principles"><a href="#Specification-Principles" class="headerlink" title="Specification Principles"></a>Specification Principles</h5><ol><li>Separate functionality from implementation.</li><li>Develop a model of the desired behavior of a system.</li><li>Establish the context of software operates.</li><li>Define the environment of system operates.</li><li>Create a cognitive model（认知模型）.</li><li>Recognize that “the specification must be tolerant of incompleteness and augment-able（可扩充）.”</li><li>Establish the content and structure of a specification.</li></ol><h5 id="Software-Context"><a href="#Software-Context" class="headerlink" title="Software Context"></a>Software Context</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329153705521.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329153705521.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329153705521" style="zoom: 33%;"><h5 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h5><ul><li>The steps of creating a specification of requirements:<ol><li>Representation</li><li>The Software Requirements Specification</li><li>Specification Review</li></ol></li></ul><h3 id="9-4-Begin"><a href="#9-4-Begin" class="headerlink" title="9.4 Begin"></a>9.4 Begin</h3><ul><li>A statement of scope can be acquired from:<ol><li>the system (FAST) working document </li><li>A set of use-cases</li></ol></li><li>The statement of scope must be “parsed” to extract data, function and behavioral domain information.</li></ul><h4 id="9-4-1-Statement-of-Scope"><a href="#9-4-1-Statement-of-Scope" class="headerlink" title="9.4.1 Statement of Scope"></a>9.4.1 Statement of Scope</h4><ul><li>A relatively brief description of the system to be built</li></ul><ol><li>Indicates data that are input and output and basic functionality</li><li>Indicates conditional processing (at a high level)</li><li>Implies certain constraints and limitation</li></ol><h4 id="9-4-2-Identifying-Objects-and-Operations"><a href="#9-4-2-Identifying-Objects-and-Operations" class="headerlink" title="9.4.2 Identifying Objects and Operations"></a>9.4.2 Identifying Objects and Operations</h4><ul><li>Define “objects” by underlining all nouns in the written statement of scope<ol><li>producers &#x2F; consumers of data</li><li>places where data are stored</li><li>“composite” data items</li></ol></li><li>Define “operations” by double underlining all active verbs <ol><li>processes relevant to the application</li><li>data transformations</li></ol></li><li>Consider other “services” that will be required by the objects</li></ul><h4 id="9-4-3-Requirements-Analysis-Methods"><a href="#9-4-3-Requirements-Analysis-Methods" class="headerlink" title="9.4.3 Requirements Analysis Methods"></a>9.4.3 Requirements Analysis Methods</h4><ul><li>Structured Analysis and Design Technique (SADT);<ul><li>Data</li></ul></li><li>Object Oriented Analysis and Design Technique (OOAD);<ul><li>Object</li></ul></li></ul><h4 id="9-4-4-Structured-Analysis"><a href="#9-4-4-Structured-Analysis" class="headerlink" title="9.4.4 Structured Analysis"></a>9.4.4 Structured Analysis</h4><ul><li>Structured analysis is a model building activity:<ul><li>The products of analysis must be highly maintainable.</li><li>The size of problems must be controlled.</li><li>Graphics have to be used whenever possible.</li><li>We have to differentiate between logical and physical.</li></ul></li></ul><h4 id="9-4-5-SADT-Analysis-Model"><a href="#9-4-5-SADT-Analysis-Model" class="headerlink" title="9.4.5 SADT Analysis Model"></a>9.4.5 SADT Analysis Model</h4><ul><li>Entity Relation Diagram (ERD);</li><li>Data Dictionary (DD);</li><li>Data Object Description (DOD); </li><li>Data Flow Diagram (DFD);</li><li>State Transition Diagram (STD);</li><li>Process Specification (PSPEC);</li><li>Control Specification (CSPEC);</li></ul><h3 id="9-5-Data-Modeling"><a href="#9-5-Data-Modeling" class="headerlink" title="9.5 Data Modeling"></a>9.5 Data Modeling</h3><h4 id="9-5-1-Why-Data-Modeling"><a href="#9-5-1-Why-Data-Modeling" class="headerlink" title="9.5.1 Why Data Modeling?"></a>9.5.1 Why Data Modeling?</h4><ul><li>Examine the data objects of processing independently.</li><li>Focus attention on the data domain.</li><li>Create a model of abstraction at the customer’s level</li><li>Indicate how data objects relate to one another</li></ul><h4 id="9-5-2-Entity-Relationship-E-R-Diagram"><a href="#9-5-2-Entity-Relationship-E-R-Diagram" class="headerlink" title="9.5.2 Entity Relationship (E-R) Diagram"></a>9.5.2 Entity Relationship (E-R) Diagram</h4><h5 id="What-is-a-Data-Object"><a href="#What-is-a-Data-Object" class="headerlink" title="What is a Data Object?"></a>What is a Data Object?</h5><p>Object—something that is described by a set of attributes (data items) and that will be manipulated within the software (system).</p><ul><li>each instance of an object (e.g., a book) can be identified uniquely (e.g., ISBN #) </li><li>each plays a necessary role in the system , the system could not function without access to instances of the object</li><li>each is described by attributes that are themselves data items</li></ul><h5 id="Typical-Objects"><a href="#Typical-Objects" class="headerlink" title="Typical Objects:"></a>Typical Objects:</h5><ul><li>external entities  (printer, user, sensor)</li><li>things (e.g, reports, displays, signals) </li><li>occurrences or events  (e.g., interrupt, alarm)</li><li>roles (e.g., manager, engineer, salesperson)</li><li>organizational units (e.g., division, team)</li><li>places (e.g., manufacturing floor) </li><li>structures  (e.g., employee record)</li></ul><h5 id="Data-Objects-and-Attributes"><a href="#Data-Objects-and-Attributes" class="headerlink" title="Data Objects and Attributes"></a>Data Objects and Attributes</h5><p>A data object contains a set of attributes that act as an aspect, quality, characteristic, or descriptor of the object</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329164912954.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329164912954.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329164912954" style="zoom:50%;"><h5 id="Relationships"><a href="#Relationships" class="headerlink" title="Relationships"></a>Relationships</h5><p>relationship—indicates “connectedness”; </p><ul><li>A “fact” that must be “remembered” by the system and cannot or is not computed or derived mechanically<ul><li>several instances of a relationship can exist</li><li>objects can be related in many different ways</li></ul></li></ul><h5 id="ERD-Notation"><a href="#ERD-Notation" class="headerlink" title="ERD Notation"></a>ERD Notation</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329165045091.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329165045091.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329165045091" style="zoom:50%;"><h5 id="Building-an-ERD"><a href="#Building-an-ERD" class="headerlink" title="Building an ERD"></a>Building an ERD</h5><ul><li>Level 1—model all the data objects (entities) </li><li>Level 2—model all the relationships among entities</li><li>Level 3—model all attributes of entities</li></ul><p>Examples:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329165135517.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329165135517.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329165135517" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329165159421.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329165159421.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329165159421" style="zoom:50%;"><h4 id="9-5-3-Data-Dictionary"><a href="#9-5-3-Data-Dictionary" class="headerlink" title="9.5.3 Data Dictionary"></a>9.5.3 Data Dictionary</h4><p>The Data Dictionary:</p><ul><li>A quasi-formal grammar for describing the content of data that the software will process and create</li><li>A notation for describing control data and the values that control data can take, e.g., “on” or “off”</li><li>A repository that also contains “where-used” &#x2F; “how used” information</li><li>A notation that can be represented manually, but is best developed using CASE tools</li></ul><h5 id="Building-a-Data-Dictionary"><a href="#Building-a-Data-Dictionary" class="headerlink" title="Building a Data Dictionary"></a>Building a Data Dictionary</h5><ul><li>Name: the primary name of the composite data item </li><li>Aliases: other names for the data item</li><li>Where used: data transforms (processes) that use the composite data item</li><li>How used: the role of the data item (input, output, temporary storage, etc.)</li><li>Description: A notation for representing content (presented on next slide)</li><li>Format: specific information about data types, pre-set values(if know)</li></ul><h5 id="Data-Dictionary-Notation"><a href="#Data-Dictionary-Notation" class="headerlink" title="Data Dictionary Notation"></a>Data Dictionary Notation</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170058032.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170058032.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329170058032" style="zoom:50%;"><h5 id="Data-Dictionary-Example"><a href="#Data-Dictionary-Example" class="headerlink" title="Data Dictionary Example"></a>Data Dictionary Example</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170119791.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170119791.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329170119791" style="zoom:50%;"><h4 id="9-5-4-Data-Flow-Diagram-DFD"><a href="#9-5-4-Data-Flow-Diagram-DFD" class="headerlink" title="9.5.4 Data Flow Diagram (DFD)"></a>9.5.4 Data Flow Diagram (DFD)</h4><p>The Flow Model: Every computer-based system is an information transform ….</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170228077.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170228077.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329170228077" style="zoom:50%;"><h5 id="Flow-Modeling-Notation"><a href="#Flow-Modeling-Notation" class="headerlink" title="Flow Modeling Notation"></a>Flow Modeling Notation</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170253829.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170253829.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329170253829" style="zoom:50%;"><p>External Entity:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170504559.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170504559.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329170504559" style="zoom:33%;"><p>Process:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170521026.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170521026.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329170521026" style="zoom:33%;"><p>Data Flow:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170542460.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170542460.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329170542460" style="zoom:33%;"><p>Data Stores:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170559532.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170559532.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329170559532" style="zoom:33%;"><h5 id="Guidelines"><a href="#Guidelines" class="headerlink" title="Guidelines"></a>Guidelines</h5><p>Data Flow Diagramming: Guidelines</p><ul><li>all icons must be labeled with meaningful names</li><li>the DFD evolves through a number of levels of detail</li><li>always begin with a context level diagram (also called level 0)</li><li>always show external entities at level 0</li><li>always label data flow arrows</li><li>do not represent procedural logic</li></ul><h5 id="Constructing-a-DFD—I"><a href="#Constructing-a-DFD—I" class="headerlink" title="Constructing a DFD—I"></a>Constructing a DFD—I</h5><ul><li>review ERD to isolate data objects and grammatical parse to determine “operations”</li><li>determine external entities producers and consumers of data</li><li>create a level 0 DFD</li></ul><h6 id="Level-0-DFD-Example"><a href="#Level-0-DFD-Example" class="headerlink" title="Level 0 DFD Example"></a>Level 0 DFD Example</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170759410.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170759410.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329170759410" style="zoom:33%;"><h5 id="Constructing-a-DFD—II"><a href="#Constructing-a-DFD—II" class="headerlink" title="Constructing a DFD—II"></a>Constructing a DFD—II</h5><ul><li>write a narrative describing the transform</li><li>parse to determine next level transforms</li><li>“balance” the flow to maintain data flow continuity</li><li>develop a level 1 DFD</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170842967.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170842967.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329170842967" style="zoom: 50%;"><p><strong>The Data Flow Hierarchy</strong></p><h6 id="Level-1-DFD-Example"><a href="#Level-1-DFD-Example" class="headerlink" title="Level 1 DFD Example"></a>Level 1 DFD Example</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170947327.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329170947327.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329170947327" style="zoom: 50%;"><h6 id="Level-2-DFD-Example"><a href="#Level-2-DFD-Example" class="headerlink" title="Level 2 DFD Example"></a>Level 2 DFD Example</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171017627.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171017627.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329171017627" style="zoom:50%;"><h6 id="Level-3-DFD-Example"><a href="#Level-3-DFD-Example" class="headerlink" title="Level 3 DFD Example"></a>Level 3 DFD Example</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171102648.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171102648.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329171102648" style="zoom:50%;"><h5 id="Flow-Modeling-Notes"><a href="#Flow-Modeling-Notes" class="headerlink" title="Flow Modeling Notes"></a>Flow Modeling Notes</h5><ul><li>each bubble is refined until it does just one thing</li><li>the expansion ratio decreases as the number of levels increase</li><li>most systems require between 3 and 7 levels for an adequate flow model</li><li>a single data flow item (arrow) may be expanded as levels increase (data dictionary provides information)</li></ul><h5 id="A-Look-Ahead"><a href="#A-Look-Ahead" class="headerlink" title="A Look Ahead"></a>A Look Ahead</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171220806.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171220806.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329171220806" style="zoom:33%;"><p>First-level Factoring Example</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171517090.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171517090.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329171517090" style="zoom:50%;"><p>Second-level Factoring Example </p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171610724.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171610724.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329171610724" style="zoom:50%;"><p>“First Iteration” Program Structure</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171629102.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171629102.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329171629102" style="zoom:50%;"><p>“Refined” Program Structure:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171656322.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171656322.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329171656322" style="zoom:50%;"><h4 id="9-5-5-Behavioral-Modeling"><a href="#9-5-5-Behavioral-Modeling" class="headerlink" title="9.5.5 Behavioral Modeling"></a>9.5.5 Behavioral Modeling</h4><ul><li>State Transition Diagram (STD)</li><li>Control Specification (CSPEC)</li><li>Process Specification (PSPEC)</li></ul><p>Behavioral Modeling</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171800006.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220329171800006.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220329171800006" style="zoom:50%;"><h5 id="The-States-of-a-System"><a href="#The-States-of-a-System" class="headerlink" title="The States of a System:"></a>The States of a System:</h5><ul><li>state—a set of observable circum-stances that characterizes the behavior of a system at a given time</li><li>state transition—the movement from one state to another</li><li>event—an occurrence that causes the system to exhibit some predictable form of behavior</li><li>action—process that occurs as a consequence of making a transition</li></ul><h5 id="State-Transition-Diagram-STD"><a href="#State-Transition-Diagram-STD" class="headerlink" title="State Transition Diagram (STD)"></a>State Transition Diagram (STD)</h5>]]></content>
      
      
      <categories>
          
          <category> introduction to software engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>computer network</title>
      <link href="/2022/02/24/computer-network/"/>
      <url>/2022/02/24/computer-network/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="computer-network"><a href="#computer-network" class="headerlink" title="computer network"></a>computer network</h1><h2 id="1-chapter1-computer-networks-and-the-Internet"><a href="#1-chapter1-computer-networks-and-the-Internet" class="headerlink" title="1.chapter1  computer networks and the Internet"></a>1.chapter1  computer networks and the Internet</h2><h3 id="Internet"><a href="#Internet" class="headerlink" title="Internet"></a>Internet</h3><ul><li>Internet: “network of networks” Interconnected ISPs</li><li>protocols: control sending , receiving of message. TCP,IP,HTTP,Skype</li><li>Internet standards:<ul><li>RFC: Request for comments</li><li>IETF: Internet Engineering task force</li></ul></li><li>Internet: a serve view<ul><li>infrastructure that provides services to applications: Web,VoIP,email,games,ecommerce,social nets</li></ul></li></ul><h3 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h3><p>protocol define format, order of message sent and received among network entities , and actions taken on message transmission ,receipt</p><h3 id="1-1network-structure"><a href="#1-1network-structure" class="headerlink" title="1.1network structure"></a>1.1network structure</h3><ul><li><p>network edge: </p><ul><li>hosts: clients and servers </li><li>servers often in data centers</li></ul></li><li><p>access networks,physical media:</p><p>wired,wireless,communication links</p></li><li><p>network core :</p><ul><li>interconnected routers</li><li>network of networks</li></ul></li></ul><h3 id="1-2network-edge"><a href="#1-2network-edge" class="headerlink" title="1.2network edge"></a>1.2network edge</h3><h4 id="ISP-internet-service-provider"><a href="#ISP-internet-service-provider" class="headerlink" title="ISP(internet service provider)"></a>ISP(internet service provider)</h4><p>End system access the Internet through ISP, such as local cable or telephone companies</p><h4 id="Access-networks"><a href="#Access-networks" class="headerlink" title="Access networks"></a>Access networks</h4><ul><li>serveral connect methods<ul><li>ressidential access nets</li><li>institutional nets wnetworks</li><li>mobile access networks</li></ul></li></ul><ol><li><p><strong>DSL(digitl subscriber line)</strong></p><ul><li>use existing telephone line to central office DSLAM<ul><li>data over DSL phone line goes to internet</li><li>voice over DSL phone line goes to telephone net</li></ul></li><li><u>&lt;2.5Mbps Upstream rtansmission rate (typically &lt; 1Mbps)</u></li><li><u>&lt;24Mbps downstream transmission rate (typically &lt; 10Mbps)</u></li></ul></li><li><p>Cable network</p><p>frequency division multiplexing : different channels transmitted in different frequency bands</p><ul><li><p>HFC: hybrid fiber coax</p><p>asymmetric network: <u>30Mbps downstream transmission rate, 2Mbps upstream transmission rate</u></p></li><li><p>network of cable,fiber attaches homes to ISP router</p><ul><li>home share access network to cable headend</li><li>unlike DSL, which has dedicated access to central office</li></ul></li></ul></li><li><p>home network: various devices </p></li><li><p>Ethernet (Enterprise access networks)</p><ul><li>typically used in companies,universities etc.</li><li>10Mbps,100Mbps,1Gbps,10Gbps transmission rates</li><li>today,end system typcally connect into Ethernet switch</li></ul></li><li><p>wireless access networks</p><ul><li>shared wireless access network connects end system to router : via base station aka “access point”</li><li><u>Wireless LANs</u><ol><li>within building (100ft.)</li><li>wifi: 1,54,450Mbps transimission rate</li></ol></li><li><u>wide area wireless access</u><ol><li>provided by telco(cellular) operator</li><li>between 1 and 10Mbps</li><li>3G,4G:LTE</li></ol></li></ul></li></ol><h4 id="sending-message"><a href="#sending-message" class="headerlink" title="sending message"></a>sending message</h4><p>link transmission rate, aka link capacity , aka link bandwidth</p><p>packet transmission delay &#x3D; L(bits)&#x2F;R(bits&#x2F;sec)</p><h4 id="Physical-media"><a href="#Physical-media" class="headerlink" title="Physical media"></a>Physical media</h4><ul><li><p>bit: propagates between transmitter&#x2F;receiver pairs</p></li><li><p>physical link: what lies between transmitter&amp;receiver</p></li><li><p>guide media: </p><p>signals propagate in solid media: copper,fiber,coax</p></li><li><p>unguided media</p><p>signals propagate freely,ratio</p></li><li><p>Twisted pair(TP)</p><p>two insulated copper wires</p><p>category5: 100Mbps,1Gbps Ethernet</p><p>category6: 10Gbps</p></li><li><p><u>coaxial cable</u></p><ul><li>two concentric copper conductors</li><li>bidirectional</li><li>broadband<ul><li>Mutiple channels on cable</li><li>HFC</li></ul></li></ul></li><li><p>fiber optic cable</p><ul><li>glass fiber carrying light pulses , each pulse a bit</li><li>high-speed operation: high-speed point-to-point ransmission(10’s-100’sGbps transmission rate)</li></ul></li><li><p>lowrer error rate</p><ul><li>repeaters spaced far apart </li><li>immune to electronmagnetic noise</li></ul></li><li><p>radio</p><ul><li><p>no phsical “wire”  bidirectional </p></li><li><p>radio link types:</p><ol><li><p>terrestrial microwave </p><p>up to 45Mbps channels</p></li><li><p>LAN(wifi)</p><p>54Mbps</p></li><li><p>wide area</p><p>4G cellular:~10 Mbps</p></li><li><p>satellite</p><ul><li>Kbps to 45Mbps channel(or mutiple smaller channels)</li><li>270 msec end-to-end delays</li><li>geosynchronous versus low altitude</li></ul></li></ol></li></ul></li></ul><h3 id="1-3network-core"><a href="#1-3network-core" class="headerlink" title="1.3network core"></a>1.3network core</h3><ul><li>mesh of interconnected router</li><li>packet-switching: hosts break application-layer message into packets<ul><li>forward packets form one router to the next ,across links on path from source to destination</li><li>each packet transmitted at full link capacity</li></ul></li></ul><h4 id="Packet-switch-store-and-forward"><a href="#Packet-switch-store-and-forward" class="headerlink" title="Packet-switch: store-and-forward"></a>Packet-switch: store-and-forward</h4><ul><li>It takes L&#x2F;R seconds to transmit L-bit packet into link at R bps</li><li>store and forward: entire packet must arrive at router before it can be transmitted on next link</li><li>end-end delay &#x3D;2L&#x2F;R(assuming zero propagation delay)</li></ul><h4 id="Packet-switching-queueing-delaying-loss"><a href="#Packet-switching-queueing-delaying-loss" class="headerlink" title="Packet-switching: queueing delaying,loss"></a>Packet-switching: queueing delaying,loss</h4><p>if arrival rate(in bits)to link exceeds transmission rate of link for a period of time:</p><ul><li>packets will queue, wait to be transimitted on link </li><li>packets can be dropped(lost) if memory(buffers) fills up</li></ul><h4 id="Tow-key-network-core-functions"><a href="#Tow-key-network-core-functions" class="headerlink" title="Tow key network-core functions"></a>Tow key network-core functions</h4><ul><li>routing: determines source-destination route taken by packets</li><li>forwarding: move packets from router’ input to appropriate router ouput</li></ul><h4 id="Alternative-core-circuit-switching"><a href="#Alternative-core-circuit-switching" class="headerlink" title="Alternative core: circuit switching"></a>Alternative core: circuit switching</h4><p>end-end resources allocated to,reserved for “call” between source&amp;destination</p><ul><li><p>in diagram, each links has four circuits </p><p>call gets 2nd circuit in top link and 1st circuit in right link</p></li><li><p>dedicated resources: no sharing</p><p>circuit-like(guaranteed) performance</p></li><li><p>circuit segment idle if not used by call(no sharing)</p></li><li><p>commonly used in traditional telephone networks</p></li></ul><h4 id="FDM-versus-TDM"><a href="#FDM-versus-TDM" class="headerlink" title="FDM versus TDM"></a>FDM versus TDM</h4><p>FDM: frequency-division multiplexing</p><p>TDM: time-division multiplexing</p><ul><li>With FDM each circuit continuously gets a fraction of the bandwidth</li><li>With TDM each circuit gets all of the bandwidth periodically during brief of time</li></ul><h4 id="Packet-switching-versus-circuit-switching"><a href="#Packet-switching-versus-circuit-switching" class="headerlink" title="Packet switching versus circuit switching"></a>Packet switching versus circuit switching</h4><ul><li><p>Packet switching </p><p>Advantages:</p><ul><li>great for bursty data</li><li>resource sharing</li><li>simpler, no call set up</li></ul><p>excessive congestion possible: </p><ul><li>packet delay and loss</li><li>protocols needed for reliable data transfer, congestion control</li></ul></li><li><p>circuit switching </p><ul><li>bandwidth guarantees needed for audio&#x2F;video apps</li><li>still an unsolved problem(chapter 7)</li></ul></li></ul><h4 id="Internet-structure-network-of-networks"><a href="#Internet-structure-network-of-networks" class="headerlink" title="Internet structure: network of networks"></a>Internet structure: network of networks</h4><ul><li>End-system connect to the access ISP</li><li>access ISP connect to the regional ISP </li><li>regional access connect to tier ISP</li></ul><h3 id="1-4Delay-loss-and-throughput-in-packet-switched-Networks"><a href="#1-4Delay-loss-and-throughput-in-packet-switched-Networks" class="headerlink" title="1.4Delay,loss,and throughput in packet-switched Networks"></a>1.4Delay,loss,and throughput in packet-switched Networks</h3><h4 id="Delay"><a href="#Delay" class="headerlink" title="Delay:"></a>Delay:</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228233531690.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228233531690.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom:50%;"><ul><li><p>Processing delay (<u>this relates to router’s cycle of instruction</u>) (constant)</p><p>The time required to examine the packet’s header and determine where to direct the part</p><p>Processing delays in high-speed routers are typically on the order of microseconds or less</p><p><u>After this nodal processing, the router directs the packet to the queue that precedes the links to router B</u> </p></li><li><p>Queuing delay (variable)</p><p>The time it waits to be transmitted onto the link.</p><p>This can be on the order of microseconds to milliseconds in practice</p></li><li><p>Transmission delay (constant)</p><p>This can be different in various way </p><p>Typically , the first-come-first-served manner, the delay formula is</p><p><strong>D(delay)&#x3D;L(Packet length)&#x2F;R(link bandwidth)</strong></p><p>Transmission delays are typically on the order of microseconds to milliseconds in practice</p></li><li><p>Propagation delay (constant)</p><p>The time required to propagate from the beginning of the link to router B </p><p>This propagation speed is the range of </p><p><strong>2<em>10^8 meter&#x2F;sec to 3</em>10^8 meters&#x2F;sec</strong></p><p>The formula is</p><p><strong>D(delay)&#x3D;d(length of physical link)&#x2F;s(propagation speed)</strong></p></li></ul><p><strong>link : the device transform the digital signal to the analog signal</strong></p><p><strong>relay device: the intermedium device transmit the analog signal</strong>  </p><h4 id="Queuing-delay-and-packet-loss"><a href="#Queuing-delay-and-packet-loss" class="headerlink" title="Queuing delay and packet loss"></a>Queuing delay and packet loss</h4><ul><li><p>Queuing delay:</p><p>traffic intensity: terminology to describe the congestion of the queue</p><p>The fofmula:</p><p><strong>Traffic intensity &#x3D; L*a&#x2F;R</strong></p><p>L:Per packet consists of L bits data</p><p>a:Average rate of link packets arrive the queue (packets&#x2F;sec)</p><p>R:The rate at witch bits are pushed out the queue (bits&#x2F;sec)</p></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228233646419.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228233646419.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220228233646419" style="zoom:50%;"><ul><li><p>Packet loss</p><p>Queue preceding link n buffer has finite capacity</p><p>packet arriving to full queue dropped </p><p>lost packet may be retransmitted by previous node, by source end system, or not at all</p></li></ul><h4 id="Throughput"><a href="#Throughput" class="headerlink" title="Throughput"></a>Throughput</h4><p>The rate(bits&#x2F;time unit) at witch bits transferred between sender and receiver</p><ul><li><p>instantaneous: rate at given point in time</p></li><li><p>average: rate over longer period of time</p></li><li><p>The formula for throughput</p><p><strong>The bottleneck link: The minimal transmission rate of witch router has in the entire network</strong></p><ul><li>throughput &#x3D; min{Rs,Rc} only client and server</li><li>throughut &#x3D; min {R1,R2,…,Rn,Rs,Rc} include other routers</li><li>throughput &#x3D; min{R1,R2,…,Rn,Rs,Rc,R(<u>bottleneck&#x2F;users</u>)} multiple users sharing one network</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228233249932.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228233249932.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom:50%;"><h3 id="1-5Protocol-layers-service-models"><a href="#1-5Protocol-layers-service-models" class="headerlink" title="1.5Protocol layers, service models"></a>1.5Protocol layers, service models</h3><h4 id="Layers"><a href="#Layers" class="headerlink" title="Layers:"></a>Layers:</h4><p> Each layer implements a service</p><ul><li>via its own internal-layer actions</li><li>relying on services provides by layer below</li></ul><p>dealing with complex systems:</p><ul><li>explicit structure allows identification, relationship of complex system’s pieces<ul><li>layered reference model for discussion</li></ul></li><li>modularization eases maintenance, updating of system<ul><li>change of implementation of layers’ service transparent to rest of system</li><li>change in gate procedure doesn’t affect rest of system</li></ul></li></ul><p><strong>Internet protocol stack</strong> (From bottom to top)</p><ul><li><p>Application: supporting network applications</p><p>FTP,SMTP,HTTP</p></li><li><p>Transport: process-process data transfer</p><p>TCP(typical),UDP(no-frills)</p></li><li><p>Network: the routing of datagrams from source to destination</p><p>IP,routing protocol</p></li><li><p>link: data transfer between neighboring network elements</p><p>Ethernet,Wifi,PPP</p></li><li><p>physical: bits “on the wire”</p></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228231507652.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228231507652.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom: 33%;"><p><strong>IOS&#x2F;OSI reference model</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301205238242.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301205238242.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220301205238242" style="zoom:50%;"><ul><li>presentation: allow applications to interpret meaning of data, encryption, compression, machine-specific conventions</li><li>session: synchronization, checkpointing, recovery of data exchange</li></ul><p><strong>Internet stack “missing” these layers!</strong></p><p>these services, if needed, must be implemented in application</p><h4 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation:"></a>Encapsulation:</h4><ul><li>Application: append message</li><li>transport: append segment</li><li>network: append datagram</li><li>link: append frame</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228231927492.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228231927492.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom: 50%;"><p>Typically, switch only has link and physical layers, no network layer ,witch means it doesn’t have IP address and cannot be found by uesers </p><p><strong>PDU: Each layer in protocol stack, except layer-1(physical), has its PDU(protocol data unit)</strong></p><p><strong>Data + header &#x3D; PDU</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228232827461.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228232827461.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" style="zoom: 50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301211157835.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220301211157835.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220301211157835" style="zoom:50%;"><ul><li>Application-layer-<strong>message</strong>: Exchange of packet information</li><li>Transport-layer-<strong>segment</strong>: Appending <strong><u>additional information</u></strong>(so-called transport-layer header information, the added information may include information allowing the receiver-side transport layer to deliver the message up to the appropriate application, and error detection bits which show whether the message have been changed), which will be used by the receiver-side transport-layer, <strong><u>the message and header comprise of segment</u></strong></li><li>Network-layer-<strong>datagram</strong>: Appending network-layer header, such as source and destination end system address, creating a <strong><u>datagram</u></strong></li><li>Link-layer-frame: appending linked-layer header</li><li>Each packet has two type of fields: header and payload(A packet form the layer above)</li></ul><h2 id="Homework1-supplements-（extension-and-correct）"><a href="#Homework1-supplements-（extension-and-correct）" class="headerlink" title="Homework1 supplements （extension and correct）"></a>Homework1 supplements （extension and correct）</h2><ul><li>NAT(Network Address Transmission)</li><li>A router equipped with NAT software is called a NAT router and has at least one valid external global IP address (public IP address)</li><li>Host &#x3D; end system; end system &#x3D; clients + server (page 11)</li><li>Two nodes in the internet are connected together by communication links</li><li>socket: A interface that specifies how a program running on one end system asks the internet infrastructure to deliver data to a specific destination program running on other end system</li><li>FDDI(Fiber Distributed Data Interface): typically used in area network(campus network)</li><li>Two types of packet-switch network: datagram networks and virtual-circuit networks<ul><li>virtual-circuit: no destination code, just have a virtual code(int, witch points the next Router), then, a virtual circuit are constructed, the transmission direction has been fixed.</li></ul></li><li>There is no congestion in a circuit switching network</li><li>The drawbacks of message segmentation(packet-switch): <ul><li>Packets have to be put in sequence at the destination </li><li>Message segmentation results in many smaller packets. Since header size is usually the same for all packets regardless of their size, with message segmentation the total amount of header bytes is more</li></ul></li></ul><h2 id="2-chaper2-Application-layer"><a href="#2-chaper2-Application-layer" class="headerlink" title="2. chaper2 Application layer"></a>2. chaper2 Application layer</h2><h3 id="Outline"><a href="#Outline" class="headerlink" title="Outline:"></a>Outline:</h3><p>2.1 principles of network applications</p><p>2.2 Web and HTTP</p><p>2.3 electronic mail</p><ul><li>SMTP, POP3, IMAP</li></ul><p>2.4 DNS</p><p>2.5 P2P applications</p><p>2.6 video streaming and </p><ul><li>content distribution </li><li>networks</li></ul><p>2.7 socket programming </p><ul><li>with UDP and TCP</li></ul><h3 id="2-1-principles-of-network-applications"><a href="#2-1-principles-of-network-applications" class="headerlink" title="2.1 principles of network applications"></a>2.1 principles of network applications</h3><h4 id="2-1-1-Goals："><a href="#2-1-1-Goals：" class="headerlink" title="2.1.1 Goals："></a>2.1.1 Goals：</h4><ul><li><p>conceptual,  implementation aspects  of network application  protocols</p><ul><li>transport-layer  </li><li>service models </li><li>client-server paradigm </li><li>peer-to-peer paradigm </li><li>content distribution networks</li></ul></li><li><p>learn about protocols by  examining popular  application-level  protocols</p><ul><li>HTTP </li><li>FTP </li><li>SMTP &#x2F; POP3 &#x2F; IMAP </li><li>DNS</li></ul></li><li><p>creating network</p><ul><li>socket API</li></ul></li></ul><h4 id="2-1-2-Creating-a-network-app"><a href="#2-1-2-Creating-a-network-app" class="headerlink" title="2.1.2 Creating a network app"></a>2.1.2 Creating a network app</h4><p><strong>write programs that:</strong></p><ul><li>run on (different) end systems</li><li>communicate over network</li><li>e.g., web server software  communicates with browser  software</li></ul><p><strong>no need to write software  for network-core devices</strong></p><ul><li>network-core devices do not  run user applications</li><li>applications on end systems  allows for rapid app  development, propagation</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326165226295.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326165226295.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326165226295" style="zoom: 50%;"><h4 id="2-1-3-Application-architectures"><a href="#2-1-3-Application-architectures" class="headerlink" title="2.1.3 Application architectures"></a>2.1.3 Application architectures</h4><p>possible structure of applications: </p><ul><li>client-server </li><li>peer-to-peer (P2P)</li></ul><h4 id="2-1-4-Client-server-architecture"><a href="#2-1-4-Client-server-architecture" class="headerlink" title="2.1.4 Client-server architecture"></a>2.1.4 Client-server architecture</h4><p>server: </p><ul><li>always-on host </li><li>permanent IP address </li><li>data centers for scaling</li></ul><p>clients:</p><ul><li>Communicate with server </li><li>May be intermittently connected </li><li>May have dynamic IP addresses </li><li>Do not communicate directly with each other</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326165647217.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326165647217.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326165647217" style="zoom:50%;"><h4 id="2-1-5-P2P-architecture"><a href="#2-1-5-P2P-architecture" class="headerlink" title="2.1.5 P2P architecture"></a>2.1.5 P2P architecture</h4><ul><li>no always-on server </li><li>arbitrary end systems directly communicate </li><li>peers request service from other peers, provide service in return to other peers </li><li>self scalability – new peers bring new service capacity, as well as new  service demands </li><li>peers are intermittently connected and change IP addresses <ul><li>complex management</li></ul></li></ul><h4 id="2-1-6-Processes-communicating"><a href="#2-1-6-Processes-communicating" class="headerlink" title="2.1.6 Processes communicating"></a>2.1.6 Processes communicating</h4><ul><li><p>process: program running  within a host</p><ul><li>within same host, two processes communicate using inter-process communication (defined by  OS) </li><li>processes in different hosts communicate by exchanging messages</li></ul></li><li><p>aside: applications with P2P architectures have client processes &amp; server processes</p></li></ul><h4 id="2-1-7-Sockets"><a href="#2-1-7-Sockets" class="headerlink" title="2.1.7 Sockets"></a>2.1.7 Sockets</h4><ul><li>process sends&#x2F;receives messages to&#x2F;from its socket </li><li>socket analogous to door <ul><li>sending process shoves message out door </li><li>sending process relies on transport infrastructure on other side of door to deliver message to socket at receiving process</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326170347226.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326170347226.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326170347226" style="zoom:67%;"><h4 id="2-1-8-Addressing-processes"><a href="#2-1-8-Addressing-processes" class="headerlink" title="2.1.8 Addressing processes"></a>2.1.8 Addressing processes</h4><ul><li>to receive messages, process must have identifier </li><li>host device has unique 32- bit IP address </li><li>Q: does IP address of host  on which process runs suffice for identifying the process?<ul><li>A: no, many processes  can be running on same host</li></ul></li><li>identifier includes both IP address and port numbers associated with process on host</li><li>example port numbers: <ul><li>HTTP server: 80 </li><li>mail server: 25</li></ul></li><li>to send HTTP message to gaia.cs.umass.edu web  server: <ul><li>IP address: 128.119.245.12 </li><li>port number: 80</li></ul></li></ul><h4 id="2-1-9App-layer-protocol-defines"><a href="#2-1-9App-layer-protocol-defines" class="headerlink" title="2.1.9App-layer protocol defines"></a>2.1.9App-layer protocol defines</h4><ul><li>types of messages  exchanged<ul><li>e.g., request, response</li></ul></li><li>message syntax:<ul><li>hat fields in messages  &amp; how fields are  delineated</li></ul></li><li>message semantics<ul><li>meaning of information  in fields</li></ul></li><li>rules for when and how  processes send &amp; respond  to messages</li><li>open protocols:<ul><li>defined in RFCs </li><li>allows for interoperability </li><li>e.g., HTTP, SMTP</li></ul></li><li>proprietary protocols: <ul><li>e.g., Skype</li></ul></li></ul><h4 id="2-1-10-What-transport-service-does-an-app-need"><a href="#2-1-10-What-transport-service-does-an-app-need" class="headerlink" title="2.1.10 What transport service does an app need?"></a>2.1.10 What transport service does an app need?</h4><ul><li><h5 id="data-integrity"><a href="#data-integrity" class="headerlink" title="data integrity"></a>data integrity</h5><ul><li>some apps (e.g., file transfer, web transactions) require 100% reliable data transfer </li><li>other apps (e.g., audio) can tolerate some loss</li></ul></li><li><p>timing </p><ul><li>some apps (e.g., Internet telephony, interactive games) require low delay to be “effective”</li></ul></li><li><p>throughput </p><ul><li>some apps (e.g., multimedia) require minimum amount of throughput to be “effective” </li><li>other apps (“elastic apps”) make use of whatever throughput they get</li></ul></li></ul><h4 id="2-1-11-Transport-service-requirements-common-apps"><a href="#2-1-11-Transport-service-requirements-common-apps" class="headerlink" title="2.1.11 Transport service requirements: common apps"></a>2.1.11 Transport service requirements: common apps</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326171736908.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326171736908.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326171736908" style="zoom:50%;"><h4 id="2-1-12-Internet-transport-protocols-services"><a href="#2-1-12-Internet-transport-protocols-services" class="headerlink" title="2.1.12 Internet transport protocols services"></a>2.1.12 Internet transport protocols services</h4><ul><li><p>TCP service: </p><ul><li>reliable transport between sending and receiving process </li><li>flow control: sender won’ t overwhelm receiver </li><li>congestion control: throttle sender when network overloaded </li><li>does not provide: timing, minimum throughput guarantee, security </li><li>connection-oriented: setup required between client and server processes</li></ul></li><li><p>UDP service: </p><ul><li>unreliable data transfer between sending and receiving process </li><li>does not provide: reliability, flow control, congestion control, timing, throughput guarantee, security, or connection setup</li></ul></li></ul><h4 id="2-1-13-Internet-apps-application-transport-protocols"><a href="#2-1-13-Internet-apps-application-transport-protocols" class="headerlink" title="2.1.13 Internet apps: application, transport protocols"></a>2.1.13 Internet apps: application, transport protocols</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326172120563.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326172120563.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326172120563" style="zoom:50%;"><h4 id="2-1-14-Securing-TCP"><a href="#2-1-14-Securing-TCP" class="headerlink" title="2.1.14 Securing TCP"></a>2.1.14 Securing TCP</h4><ul><li><p>TCP &amp; UDP  </p><ul><li><p>no encryption </p></li><li><p>cleartext passwords sent into socket traverse Internet in cleartext</p></li></ul></li><li><p>SSL </p><ul><li>provides encrypted TCP  connection </li><li>data integrity </li><li>end-point authentication</li></ul></li><li><p>SSL is at app layer </p><ul><li>apps use SSL libraries, that  “talk” to TCP</li></ul></li><li><p>SSL socket API </p><ul><li><p>cleartext passwords sent into socket traverse Internet encrypted  </p></li><li><p>see Chapter 8</p></li></ul></li></ul><h3 id="2-2-Web-and-HTTP"><a href="#2-2-Web-and-HTTP" class="headerlink" title="2.2 Web and HTTP"></a>2.2 Web and HTTP</h3><h4 id="2-2-1-Preview"><a href="#2-2-1-Preview" class="headerlink" title="2.2.1 Preview"></a>2.2.1 Preview</h4><ul><li>web page consists of objects </li><li>object can be HTML file, JPEG image, Java applet,  udio file,… </li><li>web page consists of base HTML-file which includes several referenced objects </li><li>each object is addressable by a URL, e.g.</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326173006283.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326173006283.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326173006283" style="zoom:50%;"><h4 id="2-2-2-HTTP-overview"><a href="#2-2-2-HTTP-overview" class="headerlink" title="2.2.2 HTTP overview"></a>2.2.2 HTTP overview</h4><p>HTTP: hypertext transfer protocol</p><ul><li>Web’s application layer protocol </li><li>client&#x2F;server model <ul><li>client: browser that requests, receives, (using HTTP protocol) and “displays” Web objects </li><li>server: Web server sends (using HTTP  protocol) objects in response to requests</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326173142865.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326173142865.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326173142865" style="zoom:50%;"><ul><li>uses TCP: <ul><li>client initiates TCP connection (creates  socket) to server, port 80 </li><li>server accepts TCP connection from client </li><li>HTTP messages (application-layer protocol messages) exchanged between browser (HTTP client) and Web server (HTTP server) </li><li>TCP connection closed</li></ul></li><li>HTTP is “stateless” <ul><li>server maintains no information about past client requests</li></ul></li></ul><p>aside:</p><ul><li>protocols that maintain “ state ” are complex! <ul><li>past history (state) must be maintained </li><li>if server&#x2F;client crashes, their views of “ state ” may be  inconsistent, must be reconciled</li></ul></li></ul><h4 id="2-2-3-HTTP-connections"><a href="#2-2-3-HTTP-connections" class="headerlink" title="2.2.3 HTTP connections"></a>2.2.3 HTTP connections</h4><ul><li>non-persistent HTTP<ul><li>at most one object sent over TCP connection <ul><li>connection then closed</li></ul></li><li>downloading multiple objects required multiple connections</li></ul></li><li>persistent HTTP<ul><li>multiple objects can be sent over single TCP connection between client, server</li></ul></li></ul><h5 id="Non-persistent-HTTP"><a href="#Non-persistent-HTTP" class="headerlink" title="Non-persistent HTTP"></a><strong>Non-persistent HTTP</strong></h5><p>suppose user enters URL:</p><p><a href="http://www.someschool.edu/someDepartment/home.index">http://www.someschool.edu/someDepartment/home.index</a></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326174540188.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326174540188.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326174540188" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326174551021.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326174551021.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326174551021" style="zoom:50%;"><h5 id="Non-persistent-HTTP-response-time"><a href="#Non-persistent-HTTP-response-time" class="headerlink" title="Non-persistent HTTP: response time"></a>Non-persistent HTTP: response time</h5><p>RTT (definition): time for a small packet to travel from client to server and back</p><p>HTTP response time:</p><ul><li>one RTT to initiate TCP connection </li><li>one RTT for HTTP request and first few bytes of HTTP response to return </li><li>file transmission time</li><li>non-persistent HTTP  response time &#x3D; 2RTT + file transmission time</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326174807388.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326174807388.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326174807388" style="zoom:50%;"><h5 id="Persistent-HTTP"><a href="#Persistent-HTTP" class="headerlink" title="Persistent HTTP"></a>Persistent HTTP</h5><ul><li>non-persistent HTTP issues: <ul><li>requires 2 RTTs per object </li><li>OS overhead for each TCP connection </li><li>browsers often open parallel TCP connections to fetch referenced objects</li></ul></li><li>persistent HTTP: <ul><li>server leaves connection open after sending response </li><li>subsequent HTTP  messages between same client&#x2F;server sent over open connection </li><li>client sends requests as  soon as it encounters a referenced object </li><li>as little as one RTT for all the referenced objects</li></ul></li></ul><h4 id="2-2-4-HTTP-request-message"><a href="#2-2-4-HTTP-request-message" class="headerlink" title="2.2.4 HTTP request message"></a>2.2.4 HTTP request message</h4><ul><li>two types of HTTP messages: request, response </li><li>HTTP request message: <ul><li>ASCII (human-readable format)</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326175056578.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326175056578.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326175056578" style="zoom:50%;"><h5 id="HTTP-request-message-general-format"><a href="#HTTP-request-message-general-format" class="headerlink" title="HTTP request message: general format"></a>HTTP request message: general format</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326175225959.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326175225959.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326175225959" style="zoom:50%;"><h5 id="Uploading-form-input"><a href="#Uploading-form-input" class="headerlink" title="Uploading form input"></a>Uploading form input</h5><ul><li><p>POST method: </p><ul><li><p>web page often includes form input </p></li><li><p>input is uploaded to server in entity body</p></li></ul></li><li><p>URL method: </p><ul><li>uses GET method </li><li>input is uploaded in URL field of request line:</li></ul></li></ul><h5 id="Method-types"><a href="#Method-types" class="headerlink" title="Method types"></a>Method types</h5><ul><li>HTTP&#x2F;1.0: <ul><li>GET</li><li>POST </li><li>HEAD <ul><li>asks server to leave requested object out of response</li></ul></li></ul></li><li>HTTP&#x2F;1.1: <ul><li>GET, POST, HEAD </li><li>PUT <ul><li>uploads file in entity body to path specified  in URL field</li></ul></li><li>DELETE <ul><li>deletes file specified in the URL field</li></ul></li></ul></li></ul><h4 id="2-2-5-HTTP-response-message"><a href="#2-2-5-HTTP-response-message" class="headerlink" title="2.2.5 HTTP response message"></a>2.2.5 HTTP response message</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326175647911.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326175647911.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326175647911" style="zoom:50%;"><h5 id="HTTP-response-status-codes"><a href="#HTTP-response-status-codes" class="headerlink" title="HTTP response status codes"></a>HTTP response status codes</h5><ul><li>status code appears in 1st line in server-toclient response message.</li><li>some sample codes:<ul><li>200 OK <ul><li>request succeeded, requested object later in this msg</li></ul></li><li>301 Moved Permanently <ul><li>requested object moved, new location specified later in this msg (Location:)</li></ul></li><li>400 Bad Request <ul><li>request msg not understood by server</li></ul></li><li>404 Not Found <ul><li>requested document not found on this server</li></ul></li><li>505 HTTP Version Not Supported</li></ul></li></ul><h5 id="User-server-state-cookies"><a href="#User-server-state-cookies" class="headerlink" title="User-server state: cookies"></a>User-server state: cookies</h5><p>many Web sites use cookies four components:</p><ol><li>cookie header line of HTTP response message </li><li>cookie header line in next HTTP request message </li><li>cookie file kept on user ’s host, managed by user’s browser </li><li>back-end database at Web site</li></ol><p>example:</p><ul><li>Susan always access Internet from PC </li><li>visits specific e-commerce site for first time </li><li>when initial HTTP requests arrives at site, site creates: <ul><li>unique ID </li><li>entry in backend  database for ID</li></ul></li></ul><h6 id="Cookies-keeping-“-state-”"><a href="#Cookies-keeping-“-state-”" class="headerlink" title="Cookies: keeping “ state ”"></a>Cookies: keeping “ state ”</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326180056977.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326180056977.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326180056977" style="zoom: 50%;"><p>what cookies can be used  for: </p><ul><li>authorization </li><li>shopping carts </li><li>recommendations </li><li>user session state (Web e-mail)</li></ul><p>how to keep “ state ” : </p><ul><li>protocol endpoints: maintain state at sender&#x2F;receiver over multiple transactions </li><li>cookies: http messages carry state</li></ul><p>aside:</p><p>cookies and privacy:</p><ul><li>cookies permit sites to learn a lot about you </li><li>you may supply name and e-mail to sites</li></ul><h4 id="2-2-6-Web-caches-proxy-server"><a href="#2-2-6-Web-caches-proxy-server" class="headerlink" title="2.2.6 Web caches (proxy server)"></a>2.2.6 Web caches (proxy server)</h4><p>Goal: satisfy client request without involving origin server</p><ul><li>user sets browser: Web accesses via cache </li><li>browser sends all HTTP requests to cache <ul><li>object in cache: cache returns object </li><li>else cache requests object from origin server, then returns object to client</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326180400483.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326180400483.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326180400483" style="zoom:50%;"><h5 id="More-about-Web-caching"><a href="#More-about-Web-caching" class="headerlink" title="More about Web caching:"></a>More about Web caching:</h5><ul><li><p>cache acts as both client and server </p><ul><li>server for original requesting client </li><li>client to origin server</li></ul></li><li><p>typically cache is installed by ISP (university, company, residential ISP)</p></li></ul><p>why Web caching?</p><ul><li>reduce response time for client request </li><li>reduce traffic on an institution’s access link </li><li>Internet dense with caches: enables “poor” content providers to effectively deliver content (so too does P2P file sharing)</li></ul><p>Caching example: </p><p>Method 1: Low access rate without cache</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181205889.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181205889.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326181205889" style="zoom:50%;"><p>consequence:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181234796.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181234796.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326181234796" style="zoom: 50%;"><p>Method 2: High access rate without cache</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181323168.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181323168.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326181323168" style="zoom:50%;"><p>consequence:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181345960.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181345960.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326181345960" style="zoom:50%;"><p>Method 3: Low access rate with cache</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181511953.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181511953.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326181511953" style="zoom:50%;"><p>consequence:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181528314.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181528314.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326181528314" style="zoom:50%;"><h5 id="Conditional-GET"><a href="#Conditional-GET" class="headerlink" title="Conditional GET"></a>Conditional GET</h5><ul><li><p>Goal: don’t send object if cache has up-to-date cached version </p><ul><li>no object transmission  delay </li><li>lower link utilization</li></ul></li><li><p>cache: specify date of cached copy in HTTP request </p><ul><li>If-modified-since: date</li></ul></li><li><p>server: response contains no object if cached copy is not up-to-date:</p><p>HTTP&#x2F;1.0 304 Not Modified</p></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181815633.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220326181815633.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220326181815633" style="zoom:50%;"><h3 id="2-3-Electronic-mail"><a href="#2-3-Electronic-mail" class="headerlink" title="2.3 Electronic mail"></a>2.3 Electronic mail</h3><h4 id="2-3-1-preview"><a href="#2-3-1-preview" class="headerlink" title="2.3.1 preview"></a>2.3.1 preview</h4><ul><li><p>Three major components: </p><ul><li>user agents </li><li>mail servers </li><li>simple mail transfer protocol: SMTP</li></ul></li><li><p>User Agent </p><ul><li>a.k.a. “mail reader” </li><li>composing, editing, reading smail messages </li><li>e.g., Outlook, Thunderbird, iPhone mail client </li><li>outgoing, incoming messages stored on server</li></ul></li></ul><p><strong>Mail server</strong></p><ul><li>mailbox contains incoming messages for user </li><li>message queue of outgoing (to be sent) mail messages </li><li>SMTP protocol between mail servers to send email messages<ul><li>client: sending mail server </li><li>“server”: receiving mail server</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327103254234.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327103254234.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327103254234" style="zoom:50%;"><h4 id="2-3-2-SMTP-RFC-2821"><a href="#2-3-2-SMTP-RFC-2821" class="headerlink" title="2.3.2 SMTP [RFC 2821]"></a>2.3.2 SMTP [RFC 2821]</h4><ul><li><p>uses TCP to reliably transfer email message from client to server, port 25 </p></li><li><p>direct transfer: sending server to receiving  server </p></li><li><p>three phases of transfer </p><ul><li>handshaking (greeting) </li><li>transfer of messages </li><li>closure</li></ul></li><li><p>command&#x2F;response interaction (like HTTP) </p><ul><li>commands: ASCII text </li><li>response: status code and phrase</li></ul></li><li><p>messages must be in 7-bit ASCI</p></li></ul><h5 id="Scenario-Alice-sends-message-to-Bob"><a href="#Scenario-Alice-sends-message-to-Bob" class="headerlink" title="Scenario: Alice sends message to Bob"></a>Scenario: Alice sends message to Bob</h5><ol><li>Alice uses UA to compose message “ to ” <a href="mailto:&#x62;&#111;&#98;&#64;&#115;&#x6f;&#109;&#101;&#x73;&#x63;&#x68;&#111;&#x6f;&#108;&#46;&#101;&#x64;&#x75;">&#x62;&#111;&#98;&#64;&#115;&#x6f;&#109;&#101;&#x73;&#x63;&#x68;&#111;&#x6f;&#108;&#46;&#101;&#x64;&#x75;</a> </li><li>Alice’s UA sends message to her mail server; message placed in message queue </li><li>client side of SMTP opens TCP connection with Bob’ s mail server </li><li>SMTP client sends Alice’ s message over the TCP connection </li><li>Bob’s mail server places the message in Bob’s mailbox </li><li>Bob invokes his user agent  to read message</li></ol><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327103711929.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327103711929.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327103711929" style="zoom:50%;"><h5 id="Final-words"><a href="#Final-words" class="headerlink" title="Final words"></a>Final words</h5><ul><li><strong>SMTP uses persistent connections</strong> </li><li>SMTP requires message (header &amp; body) to be in 7-bit ASCII </li><li>SMTP server uses CRLF.CRLF to determine end of message</li></ul><p><strong>comparison with HTTP:</strong></p><ul><li>HTTP: pull </li><li>SMTP: push </li><li>both have ASCII command&#x2F;response interaction, status codes </li><li>HTTP: each object encapsulated in its own response message </li><li>SMTP: multiple objects sent in multipart message</li></ul><h4 id="2-3-3-Mail-message-format"><a href="#2-3-3-Mail-message-format" class="headerlink" title="2.3.3 Mail message format"></a>2.3.3 Mail message format</h4><p>SMTP: protocol for exchanging email messages</p><p>RFC 822: standard for text  message format:</p><ul><li><p>header lines, e.g., </p><ul><li><p>To: </p></li><li><p>From: </p></li><li><p>Subject: </p><p>different from SMTP MAIL FROM, RCPT TO: commands!</p></li></ul></li><li><p>Body: the “ message ” </p><ul><li>ASCII characters only</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327104353861.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327104353861.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327104353861" style="zoom:50%;"><h4 id="2-3-4-Mail-access-protocols"><a href="#2-3-4-Mail-access-protocols" class="headerlink" title="2.3.4 Mail access protocols"></a>2.3.4 Mail access protocols</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327104429481.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327104429481.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327104429481" style="zoom:50%;"><ul><li>SMTP: delivery&#x2F;storage to receiver’ s server</li><li>mail access protocol: retrieval from server<ul><li>POP: Post Office Protocol [RFC 1939]: authorization, download  </li><li>IMAP: Internet Mail Access Protocol [RFC 1730]: more features, including manipulation of stored messages on  server </li><li>HTTP: gmail, Hotmail, Yahoo! Mail, etc.</li></ul></li></ul><h4 id="2-3-5-POP3-protocol"><a href="#2-3-5-POP3-protocol" class="headerlink" title="2.3.5 POP3 protocol"></a>2.3.5 POP3 protocol</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327104621649.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327104621649.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327104621649" style="zoom:50%;"><h5 id="POP3-more-and-IMAP"><a href="#POP3-more-and-IMAP" class="headerlink" title="POP3 (more) and IMAP"></a>POP3 (more) and IMAP</h5><p>more about POP3 </p><ul><li>previous example uses POP3 “download and delete” mode </li><li>Bob cannot re-read e-mail if he changes client </li><li>POP3 “download-and-keep”: copies of messages on different clients </li><li>POP3 is stateless across sessions</li></ul><p>IMAP </p><ul><li>keeps all messages in one place: at server </li><li>allows user to organize messages in folders </li><li>keeps user state across sessions: <ul><li>names of folders and mappings between message IDs and folder name</li></ul></li></ul><h3 id="2-4-DNS"><a href="#2-4-DNS" class="headerlink" title="2.4 DNS"></a>2.4 DNS</h3><h4 id="2-4-1-preview"><a href="#2-4-1-preview" class="headerlink" title="2.4.1 preview"></a>2.4.1 preview</h4><p>people: many identifiers: </p><ul><li>SSN, name, passport</li></ul><p>Internet hosts, routers: </p><ul><li>IP address (32 bit) - used for addressing datagrams </li><li>“ name ” , e.g.,  <a href="http://www.yahoo.com/">www.yahoo.com</a> - used by humans</li></ul><p>Question: how to map between IP address and name, and vice versa ?</p><p><strong>Domain Name System:</strong></p><ul><li>distributed database implemented in hierarchy of many name servers </li><li>application-layer protocol: hosts, name servers communicate to resolve names (address&#x2F;name  translation) <ul><li>note: core Internet function, implemented as applicationlayer protocol </li><li>complexity at network’ s “edge”</li></ul></li></ul><h4 id="2-4-2-services-structure"><a href="#2-4-2-services-structure" class="headerlink" title="2.4.2 services, structure"></a>2.4.2 services, structure</h4><p>DNS services </p><ul><li>hostname to IP address translation </li><li>host aliasing <ul><li>canonical, alias names</li></ul></li><li>mail server aliasing </li><li>load distribution <ul><li>replicated Web servers: many IP addresses correspond to one name</li></ul></li></ul><p>why not centralize DNS? </p><ul><li>single point of failure </li><li>traffic volume </li><li>distant centralized database </li><li>maintenance</li></ul><h4 id="2-4-3-hierarchical-database"><a href="#2-4-3-hierarchical-database" class="headerlink" title="2.4.3 hierarchical database"></a>2.4.3 hierarchical database</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327105738764.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327105738764.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327105738764" style="zoom:50%;"><p>client wants IP for <a href="http://www.amazon.com/">www.amazon.com</a>; 1st approximation: </p><ul><li>client queries root server to find com DNS server </li><li>client queries .com DNS server to get amazon.com DNS server </li><li>client queries amazon.com DNS server to get IP address for <a href="http://www.amazon.com/">www.amazon.com</a></li></ul><h5 id="root-name-servers"><a href="#root-name-servers" class="headerlink" title="root name servers"></a>root name servers</h5><ul><li>contacted by local name server that can not resolve name</li><li>root name server: <ul><li>contacts authoritative name server if name mapping not known </li><li>gets mapping </li><li>returns mapping to local name server</li></ul></li></ul><h5 id="TLD-and-authoritative-servers"><a href="#TLD-and-authoritative-servers" class="headerlink" title="TLD and authoritative servers"></a>TLD and authoritative servers</h5><p>top-level domain (TLD) servers: </p><ul><li>responsible for com, org, net, edu, aero, jobs, museums, and all top-level country domains, e.g.: uk, fr, ca, jp </li><li>Network Solutions maintains servers for .com TLD </li><li>Educate for .edu TLD</li></ul><p>authoritative DNS servers: </p><ul><li>organization’s own DNS server(s), providing authoritative hostname to IP mappings for organization’ s named hosts  </li><li>can be maintained by organization or service provider</li></ul><h5 id="Local-DNS-name-server"><a href="#Local-DNS-name-server" class="headerlink" title="Local DNS name server"></a>Local DNS name server</h5><ul><li>does not strictly belong to hierarchy </li><li>each ISP (residential ISP, company, university) has one <ul><li>also called “default name server”</li></ul></li><li>when host makes DNS query, query is sent to its  local DNS server <ul><li>has local cache of recent name-to-address translation pairs (but may be out of date!) </li><li>acts as proxy, forwards query into hierarchy</li></ul></li></ul><h5 id="DNS-name-resolution-example"><a href="#DNS-name-resolution-example" class="headerlink" title="DNS name  resolution example"></a>DNS name  resolution example</h5><p>host at cis.poly.edu  wants IP address for  gaia.cs.umass.edu</p><p>Type 1: iterated query</p><ul><li>contacted server replies with name of server to contact </li><li>“I don’t know this name, but ask this server ”</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327110905696.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327110905696.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327110905696" style="zoom: 33%;"><p>Type 2: recursive query</p><ul><li>puts burden of name resolution on contacted name server </li><li>heavy load at upper levels of hierarchy?</li></ul><h4 id="2-4-5-caching-updating-records"><a href="#2-4-5-caching-updating-records" class="headerlink" title="2.4.5 caching, updating records"></a>2.4.5 caching, updating records</h4><ul><li>once (any) name server learns mapping, it caches mapping<ul><li>cache entries timeout (disappear) after some time (TTL)</li><li>TLD servers typically cached in local name servers<ul><li><strong>thus root name servers not often visited</strong></li></ul></li></ul></li><li>cached entries may be out-of-date (best effort name-to-address translation!)<ul><li>if name host changes IP address, may not be known Internet-wide until all TTLs expire</li></ul></li><li>update&#x2F;notify mechanisms proposed IETF standard <ul><li>RFC 2136</li></ul></li></ul><h4 id="2-4-6-DNS-records"><a href="#2-4-6-DNS-records" class="headerlink" title="2.4.6 DNS records"></a>2.4.6 DNS records</h4><p>DNS: distributed database storing <u>resource records (RR)</u></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327111423967.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327111423967.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327111423967" style="zoom:50%;"><p>type &#x3D; A </p><ul><li>name is hostname </li><li>value is IP address</li></ul><p>type &#x3D; NS</p><ul><li>name is domain (e.g.,  foo.com) </li><li>value is hostname of authoritative name server for this domain</li></ul><p>type &#x3D; CNAME</p><ul><li>name is alias name for some “canonical” (the real) name </li><li><a href="http://www.ibm.com/">www.ibm.com</a> is really servereast.backup2.ibm.com </li><li>value is canonical name</li></ul><p>type &#x3D; MX</p><ul><li>value is name of mail server associated with name</li></ul><h4 id="2-4-7-protocol-messages"><a href="#2-4-7-protocol-messages" class="headerlink" title="2.4.7 protocol, messages"></a>2.4.7 protocol, messages</h4><ul><li>query and reply messages, both with same message  format</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327111823333.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327111823333.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327111823333" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327111912135.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327111912135.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327111912135" style="zoom:50%;"><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="2-4-8-Inserting-records-into-DNS"><a href="#2-4-8-Inserting-records-into-DNS" class="headerlink" title="2.4.8 Inserting records into DNS"></a>2.4.8 Inserting records into DNS</h4><ul><li><p>example: new startup “Network Utopia” </p></li><li><p>register name networkuptopia.com at DNS registrar (e.g., Network Solutions)</p><ul><li>provide names, IP addresses of authoritative name server (primary and secondary) </li><li>registrar inserts two RRs into .com TLD server: (networkutopia.com, dns1.networkutopia.com, NS) (dns1.networkutopia.com, 212.212.212.1, A)</li></ul></li><li><p>create authoritative server type A record for  <a href="http://www.networkuptopia.com/">www.networkuptopia.com</a>; type MX record for  networkutopia.com</p></li></ul><h4 id="2-4-9-Attacking-DNS"><a href="#2-4-9-Attacking-DNS" class="headerlink" title="2.4.9 Attacking DNS"></a>2.4.9 Attacking DNS</h4><p>DDoS attacks</p><ul><li>bombard root servers with traffic <ul><li>not successful to date</li><li>traffic filtering </li><li>local DNS servers cache IPs of TLD servers, allowing root server bypass</li></ul></li><li>bombard TLD servers <ul><li>potentially more dangerous</li></ul></li></ul><p>redirect attacks</p><ul><li><p>man-in-middle </p><ul><li>Intercept queries</li></ul></li><li><p>DNS poisoning </p><ul><li>Send bogus relies to DNS server, which caches</li></ul></li></ul><p>exploit DNS for DDoS </p><ul><li>send queries with spoofed source address: target IP </li><li>requires amplification</li></ul><h3 id="2-5-P2P-applications"><a href="#2-5-P2P-applications" class="headerlink" title="2.5 P2P applications"></a>2.5 P2P applications</h3><h4 id="2-5-1-Pure-P2P-architecture"><a href="#2-5-1-Pure-P2P-architecture" class="headerlink" title="2.5.1 Pure P2P architecture"></a>2.5.1 Pure P2P architecture</h4><ul><li>no always-on server </li><li>arbitrary end systems directly communicate </li><li>peers are intermittently connected and change IP addresses</li></ul><p>examples:</p><ul><li>file distribution (Bit Torrent) </li><li>Streaming (KanKan) </li><li>sVoIP (Skype)</li></ul><h4 id="2-5-2-File-distribution-client-server-vs-P2P"><a href="#2-5-2-File-distribution-client-server-vs-P2P" class="headerlink" title="2.5.2 File distribution: client-server vs P2P"></a>2.5.2 File distribution: client-server vs P2P</h4><p><strong><u>Question: how much time to distribute file (size F) from one server to N peers?</u></strong></p><ul><li>peer upload&#x2F;download capacity is limited resource</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327112951097.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327112951097.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327112951097" style="zoom:50%;"><h5 id="File-distribution-time-client-server"><a href="#File-distribution-time-client-server" class="headerlink" title="File distribution time: client-server"></a>File distribution time: client-server</h5><ul><li><p>server transmission: must sequentially send (upload) N  file copies: </p><ul><li>time to send one copy: F&#x2F;us </li><li>time to send N copies: NF&#x2F;us</li></ul></li><li><p>client: each client must download file copy </p><ul><li>dmin &#x3D; min client download rate </li><li>min client download time: F&#x2F;dmin</li></ul></li><li><p>Time to distribute F to N clients using client-server approach:</p></li></ul><p>$$<br>D_{c-s} \ge max(\frac{NF}{u_s},\frac{F}{d_{min}})<br>$$</p><p><strong>The coefficient of the NF increases linearly in N</strong></p><h5 id="File-distribution-time-P2P"><a href="#File-distribution-time-P2P" class="headerlink" title="File distribution time: P2P"></a>File distribution time: P2P</h5><ul><li><p>server transmission: must upload at least one copy</p><ul><li>time to send one copy: F&#x2F;u</li></ul></li><li><p>client: each client must download file copy </p><ul><li>min client download time: F&#x2F;dmin</li></ul></li><li><p>clients: as aggregate must download NF bits</p><ul><li>max upload rate (limiting max download rate) is us + Sui</li></ul></li><li><p>time to distribute F to N clients using P2P approach<br>$$<br>D_{P2P} \ge max(\frac{F}{u_s},\frac{F}{d_{min}},\frac{NF}{u_s + \sum{u_i}})<br>$$</p></li></ul><p><strong>The coefficient of the NF increases linearly also in N, but so does, as each peer brings service capacity</strong></p><p> Comparison:</p><p>Hypothesize: client upload rate &#x3D; u, F&#x2F;u &#x3D; 1 hour, us &#x3D; 10u, dmin ≥ us</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327114828901.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327114828901.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327114828901" style="zoom:50%;"><h4 id="2-5-3-BitTorrent"><a href="#2-5-3-BitTorrent" class="headerlink" title="2.5.3  BitTorrent"></a>2.5.3  BitTorrent</h4><ul><li>file divided into 256Kb chunks </li><li>peers in torrent send&#x2F;receive file chunks</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327114927703.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327114927703.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327114927703" style="zoom: 33%;"><ul><li><p>peer joining torrent: </p><ul><li>has no chunks, but will accumulate them over time from other peers </li><li>registers with tracker to get list of peers, connects to subset of peers (“neighbors”)</li></ul></li><li><p>while downloading, peer uploads chunks to other peers </p></li><li><p>peer may change peers with whom it exchanges chunks </p></li><li><p>churn: peers may come and go </p></li><li><p>once peer has entire file, it may (selfishly) leave or (altruistically) remain in torrent</p></li></ul><h5 id="requesting-sending-file-chunks"><a href="#requesting-sending-file-chunks" class="headerlink" title="requesting, sending file chunks"></a>requesting, sending file chunks</h5><p>requesting chunks:</p><ul><li>at any given time, different peers have different subsets of file chunks </li><li>periodically, Alice asks each peer for list of chunks that they have </li><li>Alice requests missing chunks from peers, rarest first</li></ul><p>sending chunks: tit-for-tat</p><ul><li>Alice sends chunks to those four peers currently sending her chunks at highest rate<ul><li>other peers are choked by Alice (do not receive chunks from her) </li><li>re-evaluate top 4 every 10 secs</li></ul></li><li>every 30 secs: randomly select another peer, starts sending  chunks </li><li>“optimistically unchoke” this peer </li><li>newly chosen peer may join top 4</li></ul><h5 id="tit-for-tat"><a href="#tit-for-tat" class="headerlink" title="tit-for-tat"></a>tit-for-tat</h5><ol><li>Alice “optimistically unchokes” Bob </li><li>Alice becomes one of Bob’ s top-four providers; Bob reciprocates </li><li>Bob becomes one of Alice’ s top-four providers</li></ol><h3 id="2-6-video-streaming-and-content-delivery-networks-CDNs"><a href="#2-6-video-streaming-and-content-delivery-networks-CDNs" class="headerlink" title="2.6 video streaming and content delivery networks (CDNs)"></a>2.6 video streaming and content delivery networks (CDNs)</h3><h4 id="2-6-1-Video-Streaming-and-CDNs-context"><a href="#2-6-1-Video-Streaming-and-CDNs-context" class="headerlink" title="2.6.1 Video Streaming and CDNs: context"></a>2.6.1 Video Streaming and CDNs: context</h4><ul><li>video traffic: major consumer of Internet bandwidth <ul><li>Netflix, YouTube: 37%, 16% of downstream residential ISP traffic</li><li>~1B YouTube users, ~75M Netflix users</li></ul></li><li>challenge: scale - how to reach ~1B  users? <ul><li>single mega-video server won’t work (why?)</li></ul></li><li>challenge: </li><li>heterogeneity <ul><li>different users have different capabilities (e.g.,  wired versus mobile; bandwidth rich versus  bandwidth poor)</li></ul></li><li>solution: distributed, application-level  infrastructure</li></ul><h4 id="2-6-2-Multimedia-video"><a href="#2-6-2-Multimedia-video" class="headerlink" title="2.6.2 Multimedia: video"></a>2.6.2 Multimedia: video</h4><ul><li><p>video: sequence of images displayed at constant rate </p><ul><li>e.g., 24 images&#x2F;sec</li></ul></li><li><p>digital image: array of pixels </p><ul><li>each pixel represented  by bits</li></ul></li><li><p>coding: use redundancy within and between images to decrease # bits used to encode image </p><ul><li>spatial (within image) </li><li>temporal (from one image to next)</li></ul></li></ul><p>CBR: (constant bit rate):  video encoding rate fixed</p><p>VBR: (variable bit rate):  video encoding rate changes as amount of spatial, temporal coding changes </p><p>examples: </p><ul><li>MPEG1 (CD-ROM) 1.5  Mbps </li><li>MPEG2 (DVD) 3-6 Mbps </li><li>MPEG4 (often used in  Internet, &lt; 1 Mbps)</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327134304886.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327134304886.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327134304886" style="zoom: 50%;"><h4 id="2-6-3-Streaming-multimedia-DASH"><a href="#2-6-3-Streaming-multimedia-DASH" class="headerlink" title="2.6.3 Streaming multimedia: DASH"></a>2.6.3 Streaming multimedia: DASH</h4><ul><li><p>DASH: Dynamic, Adaptive Streaming over HTTPs</p></li><li><p>server: </p><ul><li>divides video file into multiple chunks </li><li>each chunk stored, encoded at different rates  </li><li>manifest file: provides URLs for different chunks</li></ul></li><li><p>client: </p><ul><li>periodically measures server-to-client bandwidth </li><li>consulting manifest, requests one chunk at a time  </li><li>chooses maximum coding rate sustainable given current bandwidth </li><li>can choose different coding rates at different points in time (depending on available bandwidth at time)</li></ul></li><li><p>“intelligence” at client: client determines </p><ul><li>when to request chunk (so that buffer starvation, or overflow does not occur) </li><li>what encoding rate to request (higher quality when more bandwidth available) </li><li>where to request chunk (can request from URL server that is “close” to client or has high available bandwidth)</li></ul></li></ul><h4 id="2-6-4-Content-distribution-networks-CDNs"><a href="#2-6-4-Content-distribution-networks-CDNs" class="headerlink" title="2.6.4 Content distribution networks(CDNs)"></a>2.6.4 Content distribution networks(CDNs)</h4><ul><li><p>challenge: how to stream content (selected from millions of videos) to hundreds of thousands of simultaneous users?</p></li><li><p>option 1: single, large “mega-server”</p><ul><li>single point of failure </li><li>point of network congestion </li><li>long path to distant clients </li><li>multiple copies of video sent over outgoing link</li></ul></li><li><p>option 2: store&#x2F;serve multiple copies of videos at multiple geographically distributed sites (CDN)</p><ul><li>enter deep: push CDN servers deep into many access  networks <ul><li>close to users </li><li>used by Akamai, 1700 locations</li></ul></li><li>bring home: smaller number (10’s) of larger clusters in POPs near (but not within) access networks<ul><li>used by Limelight</li></ul></li></ul></li><li><p>CDN: stores copies of content at CDN nodes </p><ul><li>e.g. Netflix stores copies of MadMen</li></ul></li><li><p>subscriber requests content from CDN:</p><ul><li>directed to nearby copy, retrieves content </li><li>may choose different copy if network path congested</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327135820577.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327135820577.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327135820577" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327135927172.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327135927172.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327135927172" style="zoom:50%;"><ul><li>OTT challenges: coping with a congested Internet<ul><li>from which CDN node to retrieve content?</li><li>viewer behavior in presence of congestion? </li><li>what content to place in which CDN node?</li></ul></li></ul><h5 id="closer-look"><a href="#closer-look" class="headerlink" title="closer look"></a>closer look</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327140133656.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327140133656.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327140133656" style="zoom:50%;"><p>case: Netflix</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327140216236.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327140216236.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327140216236" style="zoom:50%;"><h3 id="2-7-socket-programming-with-UDP-and-TCP"><a href="#2-7-socket-programming-with-UDP-and-TCP" class="headerlink" title="2.7 socket programming  with UDP and TCP"></a>2.7 socket programming  with UDP and TCP</h3><h4 id="2-7-1-Socket-programming"><a href="#2-7-1-Socket-programming" class="headerlink" title="2.7.1 Socket programming"></a>2.7.1 Socket programming</h4><p>goal: learn how to build client&#x2F;server applications that communicate using sockets、</p><p>socket: door between application process and end-end-transport protocol</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327140604126.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327140604126.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327140604126" style="zoom:50%;"><p>Two socket types for two transport services: </p><ul><li>UDP: unreliable datagram </li><li>TCP: reliable, byte stream-oriented</li></ul><p>Application Example:</p><ol><li>client reads a line of characters (data) from its keyboard and sends data to server </li><li>server receives the data and converts characters to uppercase </li><li>server sends modified data to client </li><li>client receives modified data and displays line on its screen</li></ol><h4 id="2-7-2-UDP"><a href="#2-7-2-UDP" class="headerlink" title="2.7.2  UDP"></a>2.7.2  UDP</h4><p>UDP: no “connection” between client &amp; server</p><ul><li>no handshaking before sending data </li><li>sender explicitly attaches IP destination address and port # to each packet </li><li>receiver extracts sender IP address and port# from received packet</li></ul><p>UDP: transmitted data may be lost or received out-of-order</p><p>Application viewpoint:</p><ul><li>UDP provides unreliable transfer of groups of bytes (“datagrams”) between client and server</li></ul><p>Client&#x2F;server socket interaction: UDP</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327141318253.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327141318253.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327141318253" style="zoom: 50%;"><p>Example app: UDP client</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327141437609.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327141437609.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327141437609" style="zoom: 33%;"><p>Example app: UDP server</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327141551327.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327141551327.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327141551327" style="zoom: 33%;"><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><h4 id="2-7-3-TCP"><a href="#2-7-3-TCP" class="headerlink" title="2.7.3  TCP"></a>2.7.3  TCP</h4><ul><li><p>client must contact server </p><ul><li><p>server process must first be running </p></li><li><p>server must have created socket (door) that welcomes client’s contact</p></li></ul></li><li><p>client contacts server by:</p><ul><li>Creating TCP socket, specifying IP address, port number of server process </li><li>when client creates socket: client TCP establishes connection to server TCP</li><li>when contacted by client, server TCP creates new socket for server process to communicate with that particular client <ul><li>allows server to talk with multiple clients </li><li>source port numbers used to distinguish clients (more in Chap 3)</li></ul></li></ul></li><li><p>application viewpoint:</p><ul><li>TCP provides reliable, in-order byte-stream transfer (“pipe”)  between client and server</li></ul></li></ul><p>Client&#x2F;server socket interaction: TCP</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327142056192.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327142056192.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327142056192" style="zoom: 50%;"><p>Example app: TCP client</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327142231464.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327142231464.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327142231464" style="zoom: 33%;"><p>Example app: TCP server</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327142258946.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220327142258946.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220327142258946" style="zoom: 33%;"><h2 id="Homework2-supplements-extension-and-correct"><a href="#Homework2-supplements-extension-and-correct" class="headerlink" title="Homework2 supplements (extension and correct)"></a>Homework2 supplements (extension and correct)</h2><ul><li>DNS use UDP to transfer data</li><li>The default mode of HTTP uses persistent connection with pipelining</li><li>If the header line Connection is close, it means that the client wants non-persistent connection</li><li></li></ul><h2 id="3-chapter3-Transport-layer"><a href="#3-chapter3-Transport-layer" class="headerlink" title="3. chapter3 Transport layer"></a>3. chapter3 Transport layer</h2><h3 id="prevew"><a href="#prevew" class="headerlink" title="prevew:"></a>prevew:</h3><ul><li>understand principles behind transport layer services:<ul><li>multiplexing, demultiplexing </li><li>reliable data transfer </li><li>flow control </li><li>congestion control</li></ul></li><li>learn about Internet transport layer protocols: <ul><li>UDP: connectionless transport </li><li>TCP: connection-oriented  reliable transport </li><li>TCP congestion control</li></ul></li></ul><h3 id="3-1-transport-layer-service"><a href="#3-1-transport-layer-service" class="headerlink" title="3.1 transport-layer service"></a>3.1 transport-layer service</h3><h4 id="3-1-1-Transport-services-and-protocols"><a href="#3-1-1-Transport-services-and-protocols" class="headerlink" title="3.1.1 Transport services and protocols"></a>3.1.1 Transport services and protocols</h4><ul><li>provide logical communication between app processes running on different hosts</li><li>transport protocols run in end systems <ul><li>send side: breaks app messages into segments, passes to network layer </li><li>rcv side: reassembles segments into messages, passes to app layer</li></ul></li></ul><h4 id="3-1-2-Transport-vs-network-layer"><a href="#3-1-2-Transport-vs-network-layer" class="headerlink" title="3.1.2 Transport vs. network layer"></a>3.1.2 Transport vs. network layer</h4><ul><li>network layer: logical  communication  between hosts</li><li>transport layer: logical communication between processes <ul><li>relies on, enhances,  network layer  services</li></ul></li></ul><h4 id="3-1-3-Internet-transport-layer-protocols"><a href="#3-1-3-Internet-transport-layer-protocols" class="headerlink" title="3.1.3 Internet transport-layer protocols"></a>3.1.3 Internet transport-layer protocols</h4><ul><li><p>reliable, in-order  delivery (TCP)</p><ul><li>congestion control </li><li>flow control</li><li>connection setup</li></ul></li><li><p>unreliable, unordered  delivery: UDP </p><ul><li>no-frills extension of “best-effort” IP</li></ul></li><li><p>services not available:</p><ul><li>delay guarantees</li><li>bandwidth guarantees</li></ul></li></ul><h3 id="3-2-multiplexing-and-demultiplexing"><a href="#3-2-multiplexing-and-demultiplexing" class="headerlink" title="3.2 multiplexing and demultiplexing"></a>3.2 multiplexing and demultiplexing</h3><h4 id="3-2-1-Multiplexing-x2F-demultiplexing"><a href="#3-2-1-Multiplexing-x2F-demultiplexing" class="headerlink" title="3.2.1 Multiplexing&#x2F;demultiplexing"></a>3.2.1 Multiplexing&#x2F;demultiplexing</h4><ul><li><p>multiplexing at sender:</p><p>handle data from multiple sockets, add transport header  (later used for demultiplexing)</p></li><li><p>demultiplexing at receiver:</p><p>use header info to deliver received segments to correct  socket</p></li></ul><h4 id="3-2-2-How-demultiplexing-works"><a href="#3-2-2-How-demultiplexing-works" class="headerlink" title="3.2.2 How demultiplexing works"></a>3.2.2 How demultiplexing works</h4><ul><li><p>host receives IP datagrams</p><ul><li>each datagram has source IP address, destination IP address</li><li>each datagram carries one transport-layer segment</li><li>each segment has source, destination port number</li></ul></li><li><p>host uses IP addresses &amp; port numbers to direct segment to appropriate socket</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413205144831.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413205144831.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413205144831" style="zoom:50%;"></li></ul><h4 id="3-2-3-Connectionless-demultiplexing"><a href="#3-2-3-Connectionless-demultiplexing" class="headerlink" title="3.2.3 Connectionless demultiplexing"></a>3.2.3 Connectionless demultiplexing</h4><ul><li><p>recall: created socket has host-local port #: </p><p>DatagramSocket mySocket1  &#x3D; new DatagramSocket(12534);</p></li><li><p>recall: when creating datagram to send into UDP socket, must specify </p><ul><li>destination IP address </li><li>destination port #</li></ul></li><li><p>when host receives UDP  segment:</p><ul><li>checks destination port #  in segment</li><li>directs UDP segment to  socket with that port # IP datagrams with same dest. port #</li></ul></li></ul><p>example：</p><h4 id="3-2-4-Connection-oriented-demux"><a href="#3-2-4-Connection-oriented-demux" class="headerlink" title="3.2.4 Connection-oriented demux"></a>3.2.4 Connection-oriented demux</h4><ul><li><p>TCP socket identified by 4-tuple: </p><ul><li>source IP address</li><li>source port number </li><li>dest IP address</li><li>dest port number</li></ul></li><li><p>demux: receiver uses all four values to direct segment to appropriate socket</p></li><li><p>server host may support  many simultaneous TCP  sockets: </p><ul><li>each socket identified by its own 4-tuple</li></ul></li><li><p>web servers have different sockets for each connecting client</p><ul><li>non-persistent HTTP will have different socket for each request</li></ul></li></ul><p>example：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413205909578.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413205909578.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413205909578" style="zoom: 50%;"><h3 id="3-3-connectionless-transport-UDP"><a href="#3-3-connectionless-transport-UDP" class="headerlink" title="3.3 connectionless transport: UDP"></a>3.3 connectionless transport: UDP</h3><h4 id="3-3-1-UDP-User-Datagram-Protocol"><a href="#3-3-1-UDP-User-Datagram-Protocol" class="headerlink" title="3.3.1 UDP: User Datagram Protocol"></a>3.3.1 UDP: User Datagram Protocol</h4><ul><li><p>“no frills,” “bare bones” Internet transport  protocol</p></li><li><p>“best effort” service, UDP  segments may be:</p><ul><li>lost</li><li>delivered out-of-order to app</li></ul></li><li><p><strong>connectionless</strong>:</p><ul><li>no handshaking between UDP sender, receiver</li><li>each UDP segment handled independently of others</li></ul></li><li><p>UDP use: </p><ul><li>streaming multimedia apps (loss tolerant, rate sensitive) </li><li>DNS</li><li>SNMP</li></ul></li><li><p>reliable transfer over UDP:</p><ul><li>add reliability at application layer</li><li>application-specific error recovery!</li></ul></li></ul><h4 id="3-3-2-UDP-segment-header"><a href="#3-3-2-UDP-segment-header" class="headerlink" title="3.3.2 UDP: segment header"></a>3.3.2 UDP: segment header</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413210352750.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413210352750.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413210352750" style="zoom:50%;"><ul><li>why is there a UDP?<ul><li>no connection establishment (which can add delay)</li><li>simple: no connection state at sender, receiver</li><li>small header size</li><li>no congestion control: UDP can blast away as fast as desired</li></ul></li></ul><h4 id="3-3-3-UDP-checksum"><a href="#3-3-3-UDP-checksum" class="headerlink" title="3.3.3 UDP checksum"></a>3.3.3 UDP checksum</h4><p>Goal: detect “ errors ” (e.g., flipped bits) in transmitted segment.</p><ul><li>sender:<ul><li>treat segment contents, including header fields, as sequence of 16-bit integers</li><li>checksum: addition (one’s complement sum) of segment contents</li><li>sender puts checksum value into UDP checksum field</li></ul></li><li>receiver:<ul><li>compute checksum of received segment </li><li>check if computed checksum equals checksum field value: </li><li>NO - error detected </li><li>YES - no error detected.  But maybe errors  nonetheless? More later</li></ul></li></ul><h5 id="Internet-checksum-example"><a href="#Internet-checksum-example" class="headerlink" title="Internet checksum: example"></a>Internet checksum: example</h5><p>example: add two 16-bit integers：</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413210745184.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413210745184.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413210744966" style="zoom:50%;"><p><strong>Note: when adding numbers, a carryout from the most  significant bit needs to be added to the result</strong></p><h3 id="3-4-principles-of-reliable-data-transfer"><a href="#3-4-principles-of-reliable-data-transfer" class="headerlink" title="3.4 principles of reliable data transfer"></a>3.4 principles of reliable data transfer</h3><h4 id="3-4-1-reliable-data-transfer"><a href="#3-4-1-reliable-data-transfer" class="headerlink" title="3.4.1 reliable data transfer"></a>3.4.1 reliable data transfer</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413211157155.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413211157155.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413211157155" style="zoom:50%;"><ul><li>important in application, transport, link layers<ul><li>top-10 list of important networking topics</li></ul></li><li>characteristics of unreliable channel will determine  complexity of reliable data transfer protocol (rdt)</li></ul><h4 id="3-4-2-getting-started"><a href="#3-4-2-getting-started" class="headerlink" title="3.4.2 getting started"></a>3.4.2 getting started</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413211303235.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413211303235.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413211303235" style="zoom: 50%;"><p>we will:</p><ul><li>incrementally develop sender, receiver sides of reliable data transfer protocol (rdt)</li><li>consider only unidirectional data transfer<ul><li>but control info will flow on both directions!</li><li>use finite state machines (FSM) to specify sender, receiver</li></ul></li></ul><h4 id="3-4-3-rdt1-0"><a href="#3-4-3-rdt1-0" class="headerlink" title="3.4.3 rdt1.0"></a>3.4.3 rdt1.0</h4><p>rdt1.0: reliable transfer over a reliable channel</p><ul><li><p>underlying channel perfectly reliable </p><ul><li>no bit errors </li><li>no loss of packets</li></ul></li><li><p>separate FSMs for sender, receiver:</p><ul><li>sender sends data into underlying channel </li><li>receiver reads data from underlying channel</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413211816243.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413211816243.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413211816243" style="zoom:50%;"><h4 id="3-4-4-rdt2-0"><a href="#3-4-4-rdt2-0" class="headerlink" title="3.4.4 rdt2.0"></a>3.4.4 rdt2.0</h4><p>rdt2.0: channel with bit errors</p><ul><li><p>underlying channel may flip bits in packet</p><ul><li>checksum to detect bit errors</li></ul></li><li><p>the question: how to recover from errors:</p><ul><li>acknowledgements (ACKs): receiver explicitly tells sender that pkt received OK</li><li>negative acknowledgements (NAKs): receiver explicitly tells sender that pkt had errors</li><li>sender retransmits pkt on receipt of NAK</li></ul></li><li><p>new mechanisms in rdt2.0 (beyond rdt1.0):</p><ul><li>error detection</li><li>feedback: control msgs (ACK,NAK) from receiver to sender</li></ul></li></ul><h5 id="FSM-specification"><a href="#FSM-specification" class="headerlink" title="FSM specification"></a>FSM specification</h5><p>sender:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413212225692.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413212225692.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413212225692" style="zoom:50%;"><p>receiver:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413212245813.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413212245813.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413212245813" style="zoom:50%;"><h5 id="A-fatal-flaw"><a href="#A-fatal-flaw" class="headerlink" title="A fatal flaw"></a>A fatal flaw</h5><p>what happens if ACK&#x2F;NAK corrupted?</p><ul><li>sender doesn’t know what happened at receiver!</li><li>can ’t just retransmit: possible duplicate</li></ul><p>handling duplicates:</p><ul><li>sender retransmits current pkt if ACK&#x2F;NAK corrupted</li><li>sender adds sequence number to each pkt </li><li>receiver discards (doesn’t deliver up) duplicate pkt</li></ul><p>stop and wait:</p><ul><li>sender sends one packet, then waits for receiver response</li></ul><h4 id="3-4-5-rdt2-1"><a href="#3-4-5-rdt2-1" class="headerlink" title="3.4.5 rdt2.1"></a>3.4.5 rdt2.1</h4><ul><li>sender, handles garbled ACK&#x2F;NAKs</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413212721018.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413212721018.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413212721018" style="zoom:50%;"><ul><li>receiver, handles garbled ACK&#x2F;NAKs</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413212909502.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413212909502.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413212909502" style="zoom:50%;"><h5 id="discussion"><a href="#discussion" class="headerlink" title="discussion"></a>discussion</h5><ul><li>sender:<ul><li>sequence number added to pkt</li><li>two sequence number(0,1) will suffice. Why?</li><li>must check if received ACK&#x2F;NAK corrupted</li><li>twice as many states<ul><li>state must “remember” whether “expected” pkt should have sequence number of 0 or 1</li></ul></li></ul></li><li>receiver:<ul><li>must check if received packet is duplicate</li><li>state indicates whether 0 or 1 is expected pkt sequence number</li></ul></li><li>note: receiver can not know if its last ACK&#x2F;NAK received OK at sender</li></ul><h4 id="3-4-6-rdt2-2"><a href="#3-4-6-rdt2-2" class="headerlink" title="3.4.6 rdt2.2"></a>3.4.6 rdt2.2</h4><p>rdt2.2: a NAK-free protocol</p><ul><li>same functionality as rdt2.1, using ACKs only</li><li>instead of NAK, receiver sends ACK for last pkt received OK</li><li>receiver must explicitly include sequence number of pkt being ACKed</li><li>duplicate ACK at sender results in same action as NAK: retransmit current pkt</li></ul><p>sender, receiver fragments:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413213639475.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413213639475.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413213639475" style="zoom: 50%;"><h4 id="3-4-7-rdt3-0"><a href="#3-4-7-rdt3-0" class="headerlink" title="3.4.7 rdt3.0"></a>3.4.7 rdt3.0</h4><p>new assumption:</p><ul><li>underlying channel can also lose packets (data, ACKs)<ul><li>checksum, sequence number, ACKs, retransmissions  will be of help … but not enough</li></ul></li></ul><p>approach:</p><ul><li>sender waits “reasonable” amount of time for ACK<ul><li>retransmits if no ACK  received in this time</li><li>if pkt (or ACK) just delayed (not lost):<ul><li>retransmission will be duplicate, but sequence number has already handles this</li><li>receiver must specify sequence number of pkt being ACKed</li></ul></li><li>requires countdown timer</li></ul></li></ul><p>sender:</p><p><u><strong>timer was set up at the same time  when the packet was sent.</strong></u></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413214103878.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413214103878.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413214103878" style="zoom:50%;"><h5 id="action"><a href="#action" class="headerlink" title="action"></a>action</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413214447682.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413214447682.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413214447682" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413214509954.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413214509954.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413214509954" style="zoom:50%;"><h5 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h5><ul><li><p>rdt3.0 is correct, but performance stinks</p></li><li><p>example: 1 Gbps link, 15 ms prop. delay, 8000 bit packet:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413215044881.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413215044881.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413215044881" style="zoom:50%;"><ul><li>U sender: utilization – fraction of time sender busy sending</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413215224086.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413215224086.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413215224086" style="zoom:50%;"><ul><li>if RTT&#x3D;30 msec, 1KB pkt every 30 msec: 33kB&#x2F;sec thruput  over 1 Gbps link</li></ul></li><li><p>network protocol limits use of physical resources!</p></li></ul><h5 id="stop-and-wait-operation"><a href="#stop-and-wait-operation" class="headerlink" title="stop-and-wait operation"></a>stop-and-wait operation</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413215341953.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413215341953.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413215341953" style="zoom:50%;"><h4 id="3-4-8-Pipelined-protocols"><a href="#3-4-8-Pipelined-protocols" class="headerlink" title="3.4.8 Pipelined protocols"></a>3.4.8 Pipelined protocols</h4><p>pipelining: sender allows multiple, “in-flight”, yet-to-be-acknowledged pkt</p><ul><li>range of sequence numbers must be increased</li><li>buffering at sender and&#x2F;or receiver</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413215628683.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413215628683.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413215628683" style="zoom:50%;"><ul><li>two generic forms of pipelined protocols: go-Back-N, selective repeat</li></ul><h5 id="increased-utilization"><a href="#increased-utilization" class="headerlink" title="increased utilization"></a>increased utilization</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413215715205.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220413215715205.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220413215715205" style="zoom:50%;"><h5 id="overview"><a href="#overview" class="headerlink" title="overview:"></a>overview:</h5><p>Go-back-N:</p><ul><li>sender can have up to N unacked packets in pipeline</li><li>receiver only sends cumulative ack<ul><li>doesn’t ack packet if  there’ s a gap</li></ul></li><li>sender has timer for oldest unacked packet<ul><li>when timer expires, retransmit all unacked packets</li></ul></li></ul><p>Selective Repeat:</p><ul><li>sender can have up to N unack’ed packets in pipeline</li><li>receiver sends individual ack for each packet</li><li>sender maintains timer for each unacked packet<ul><li>when timer expires,  retransmit only that unacked packet</li></ul></li></ul><h5 id="Go-Back-N"><a href="#Go-Back-N" class="headerlink" title="Go-Back-N:"></a>Go-Back-N:</h5><p>sender:</p><ul><li>k-bit sequence number in pkt header</li><li>“window” of up to N, consecutive unack’ed pkts allowed</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416150337516.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416150337516.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416150337516" style="zoom:50%;"><ul><li>ACK(n): ACKs all pkts up to, including seq # n - “cumulative  ACK”<ul><li>may receive duplicate ACKs (see receiver)</li></ul></li><li><strong>timer for oldest in-flight pkt</strong></li><li>timeout(n): retransmit packet n and all higher seq # pkts in window</li></ul><p>sender extended FSM:</p><p>The timer was set at the same time the oldest packet was sent</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416150606898.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416150606898.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416150606898" style="zoom:50%;"><p>receiver extended FSM: </p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416151306662.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416151306662.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416151306662" style="zoom:50%;"><p>ACK-only: always send ACK for correctly-received packet with highest in-order sequence</p><ul><li>may generate duplicate ACKs</li><li>need only remember expectedseqnum</li></ul><p> out-of-order pkt: </p><ul><li>discard (don’t buffer): no receiver buffering!</li><li>re-ACK pkt with highest in-order seq #</li></ul><p>GBN in action:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416151601258.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416151601258.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416151601258" style="zoom:50%;"><h5 id="Selective-repeat"><a href="#Selective-repeat" class="headerlink" title="Selective repeat"></a>Selective repeat</h5><ul><li>receiver individually acknowledges all correctly received pkts<ul><li>buffers pkts, as needed, for eventual in-order delivery  to upper layer</li></ul></li><li>sender only resends pkts for which ACK not received<ul><li>sender timer for each unACKed pkt</li></ul></li><li>sender window<ul><li>N consecutive seq #’ s </li><li>limits seq #s of sent, unACKed pkts</li></ul></li></ul><p>sender, receiver windows:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416152017690.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416152017690.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416152017690" style="zoom:50%;"><ul><li><p>sender</p><p>data from above:</p><ul><li>if next available seq # in window, send pkt</li><li>timeout(n):  resend pkt n, restart timers</li></ul><p>ACK(n) in [sendbase,sendbase+N]:</p><ul><li>mark pkt n as received</li><li>if n smallest unACKed pkt, advance window base to next unACKed seq #</li></ul></li><li><p>receiver</p><p>pkt n in [rcvbase, rcvbase+N-1]</p><ul><li>send ACK(n)</li><li>out-of-order: buffer</li><li>in-order: deliver (also deliver buffered, in-order pkts), advance window to next not-yet-received pkt</li></ul><p>pkt n in [rcvbase-N,rcvbase-1]</p><ul><li>ACK(n)</li></ul><p>otherwise:</p><ul><li>ignore</li></ul></li></ul><p>Selective repeat in action:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416152624877.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416152624877.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416152624877" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416152720926.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416152720926.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416152720926" style="zoom:50%;"><h3 id="3-5-connection-oriented-transport-TCP"><a href="#3-5-connection-oriented-transport-TCP" class="headerlink" title="3.5 connection-oriented transport: TCP"></a>3.5 connection-oriented transport: TCP</h3><h4 id="3-5-1-Overview"><a href="#3-5-1-Overview" class="headerlink" title="3.5.1 Overview"></a>3.5.1 Overview</h4><ul><li>point-to-point:<ul><li>one sender, one receiver</li></ul></li><li>reliable, in-order byte steam:<ul><li>no “message boundaries”</li></ul></li><li>pipelined:<ul><li>TCP congestion and flow control set window size</li></ul></li><li>full duplex data<ul><li>bi-directional data flow in same connection</li><li>MSS: maximum segment size</li></ul></li><li>connection-oriented:<ul><li>handshaking (exchange of control messages) initiates sender, receiver state before data exchange</li></ul></li><li>flow controlled:<ul><li>sender will not overwhelm receiver</li></ul></li></ul><h4 id="3-5-2-segment-structure"><a href="#3-5-2-segment-structure" class="headerlink" title="3.5.2  segment structure"></a>3.5.2  segment structure</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416153436606.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416153436606.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416153436606" style="zoom: 33%;"><h5 id="TCP-seq-numbers-ACKs"><a href="#TCP-seq-numbers-ACKs" class="headerlink" title="TCP seq. numbers, ACKs"></a>TCP seq. numbers, ACKs</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416153840516.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416153840516.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416153840516" style="zoom:50%;"><ul><li>sequence numbers:<ul><li>byte stream “number” of first byte in segment’ s data</li></ul></li><li>acknowledgements:<ul><li>sequence number of next byte expected from other sides</li><li>cumulative ACK</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416153915735.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416153915735.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416153915735" style="zoom:50%;"><h5 id="round-trip-time-timeout"><a href="#round-trip-time-timeout" class="headerlink" title="round trip time, timeout"></a>round trip time, timeout</h5><p>how to set TCP timeout value?</p><ul><li>longer than RTT<ul><li>but RTT varies</li></ul></li><li>Too short: premature timeout, unnecessary retransmissions</li><li>Too long: slow reaction to segment loss</li></ul><p>how to estimate RTT?</p><ul><li><p>SampleRTT: measured time from segment transmission until ACK receipt</p><ul><li>ignore retransmissions</li></ul></li><li><p>SampleRTT will vary, want estimated RTT “smoother”</p><ul><li>average several recent measurements, not just current SampleRTT</li></ul></li><li><p>EstimatedRTT &#x3D; (1- a)<em>EstimatedRTT + a</em>SampleRTT</p><ul><li>exponential weighted moving average</li><li>influence of past sample decreases exponentially fast</li><li>typical value: a &#x3D; 0.125</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416154606769.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416154606769.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416154606769" style="zoom: 50%;"></li><li><p>timeout interval: EstimatedRTT plus “safety margin”</p><ul><li>large variation in EstimatedRTT -&gt; larger safety margin</li></ul></li><li><p>estimate SampleRTT deviate from EstimatedRTT:</p><ul><li>DevRTT &#x3D; (1-B)<em>DevRTT + B</em>|SampleRTT-EstimatedRTT|(typically, B &#x3D; 0.25)</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416154853734.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416154853734.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416154853734" style="zoom:50%;"><h4 id="3-5-3-reliable-data-transfer"><a href="#3-5-3-reliable-data-transfer" class="headerlink" title="3.5.3 reliable data transfer"></a>3.5.3 reliable data transfer</h4><ul><li>TCP creates rdt service on top of IP’s unreliable service<ul><li>pipelined segments</li><li>cumulative acks</li><li>single retransmission timer</li></ul></li><li>retransmissions triggered by:<ul><li>timeout events </li><li>duplicate acks</li></ul></li></ul><h5 id="sender-events"><a href="#sender-events" class="headerlink" title="sender events:"></a>sender events:</h5><p>data rcvd from app:</p><ul><li>create segment with sequence #</li><li>sequence # is byte-stream number of first data byte in segment</li><li>start timer if not already running<ul><li>think of timer as for oldest unacked segment</li><li>expiration interval: TimeOutInterval</li></ul></li></ul><p>timeout:</p><ul><li>retransmit segment that caused timeout</li><li>restart timer</li></ul><p>ack rcvd:</p><ul><li>if ack acknowledges previously unacked segments<ul><li>update what is known  to be ACKed</li><li>start timer if there are still unacked segments</li></ul></li></ul><p>sender (simplified):</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416155622599.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220416155622599.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220416155622216" style="zoom:50%;"><h5 id="Three-retransmission-scenarios"><a href="#Three-retransmission-scenarios" class="headerlink" title="Three retransmission scenarios"></a>Three retransmission scenarios</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420190211041.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420190211041.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220420190211041" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420190229132.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420190229132.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220420190229132" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420190243034.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420190243034.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220420190243034" style="zoom:50%;"><h5 id="ACK-generation"><a href="#ACK-generation" class="headerlink" title="ACK generation"></a>ACK generation</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420190427513.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420190427513.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220420190427513" style="zoom:50%;"><h5 id="fast-retransmit"><a href="#fast-retransmit" class="headerlink" title="fast retransmit"></a>fast retransmit</h5><ul><li>time-out period often relatively long:<ul><li>long delay before  resending lost packet</li></ul></li><li>detect lost segments via duplicate ACKs.<ul><li>sender often sends many segments back-to-back</li><li>if segment is lost, there will likely be many duplicate ACKs.</li></ul></li></ul><p>TCP fast retransmit</p><p>if sender receives 3 ACKs for same data (“triple duplicate ACKs”), resend unacked segment with smallest sequence number</p><ul><li>likely that unacked segment lost, so don’ t wait for timeout</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420190705325.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420190705325.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220420190705325" style="zoom:50%;"><h4 id="3-5-4-flow-control"><a href="#3-5-4-flow-control" class="headerlink" title="3.5.4 flow control"></a>3.5.4 flow control</h4><ul><li><p>flow control</p><p>receiver controls sender, so sender won’t overflow receiver’s buffer by transmitting too much, too fast</p></li><li><p>receiver “advertises” free buffer space by including rwnd value in TCP header of receiver-to-sender segments</p><ul><li>RcvBuffer size set via socket options (typical default  is 4096 bytes)</li><li>many operating systems autoadjust RcvBuffer</li></ul></li><li><p>sender limits amount of unacked (“in-flight”) data to receiver’ s rwnd value</p></li><li><p>guarantees receive buffer will not overflow</p></li></ul><h4 id="3-5-5-Connection-Management"><a href="#3-5-5-Connection-Management" class="headerlink" title="3.5.5 Connection Management"></a>3.5.5 Connection Management</h4><p>before exchanging data, sender&#x2F;receiver “<strong>handshake</strong>” :</p><ul><li><p>agree to establish connection (each knowing the other willing  to establish connection)</p></li><li><p>agree on connection parameters</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420191422292.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420191422292.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220420191422292" style="zoom:50%;"></li></ul><h5 id="Handshake"><a href="#Handshake" class="headerlink" title="Handshake"></a>Handshake</h5><h6 id="2-way-handshake"><a href="#2-way-handshake" class="headerlink" title="2-way handshake:"></a>2-way handshake:</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420191522523.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420191522523.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220420191522523" style="zoom:50%;"><p>Q: will 2-way handshake always work in network?</p><ul><li>variable delays</li><li>retransmitted messages (e.g.  req_conn(x)) due to message loss</li><li>message reordering</li><li>can’t “see” other side</li></ul><p>2-way handshake failure scenarios:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420191727771.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420191727771.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220420191727771" style="zoom:50%;"><h6 id="3-way-handshake"><a href="#3-way-handshake" class="headerlink" title="3-way handshake"></a>3-way handshake</h6><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420191929314.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420191929314.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220420191929314" style="zoom:50%;"><p>3-way handshake: FSM</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420192010094.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420192010094.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220420192010094" style="zoom:50%;"><h5 id="closing-a-connection"><a href="#closing-a-connection" class="headerlink" title="closing a connection"></a>closing a connection</h5><ul><li>client, server each close their side of connection<ul><li>send TCP segment with FIN bit &#x3D; 1</li></ul></li><li>respond to received FIN with ACK<ul><li>on receiving FIN, ACK can be combined with own FIN</li></ul></li><li>simultaneous FIN exchanges can be handled</li><li><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420192224668.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220420192224668.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220420192224668" style="zoom:50%;"></li></ul><h3 id="3-6-principles-of-congestion-control"><a href="#3-6-principles-of-congestion-control" class="headerlink" title="3.6 principles of congestion control"></a>3.6 principles of congestion control</h3><p>congestion:</p><ul><li>informally: “too many sources sending too much data too fast for network to handle”</li><li>different from flow control!</li><li>manifestations:<ul><li>lost packets (buffer overflow at routers) </li><li>long delays (queueing in router buffers)</li></ul></li></ul><h4 id="3-6-1-Causes-x2F-costs-of-congestion"><a href="#3-6-1-Causes-x2F-costs-of-congestion" class="headerlink" title="3.6.1 Causes&#x2F;costs of congestion"></a>3.6.1 Causes&#x2F;costs of congestion</h4><h5 id="scenario-1："><a href="#scenario-1：" class="headerlink" title="scenario 1："></a>scenario 1：</h5><ul><li>two senders, two receivers</li><li>one router, infinite buffers</li><li>output link capacity: R</li><li>no retransmission</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421174933277.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421174933277.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421174933277" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421174951886.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421174951886.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421174951886" style="zoom:50%;"><h5 id="scenario-2："><a href="#scenario-2：" class="headerlink" title="scenario 2："></a>scenario 2：</h5><ul><li><p>one router, finite buffers</p></li><li><p>sender retransmission of timed-out packet</p><ul><li>application-layer input &#x3D; application-layer output: in &#x3D;  out</li><li>transport-layer input includes retransmissions : in’ &gt;&#x3D; in</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421175211464.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421175211464.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421175211464" style="zoom:50%;"></li><li><p>idealization: perfect knowledge</p><ul><li>sender sends only when router buffers available</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421175518944.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421175518944.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421175518944" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421175539551.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421175539551.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421175539551" style="zoom:50%;"><ul><li>Idealization: known loss packets can be lost, dropped at router due to full buffers<ul><li>sender only resends if packet known to be lost</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421175706509.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421175706509.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421175706509" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421175734693.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421175734693.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421175734693" style="zoom:50%;"><p>Realistic: duplicates：</p><ul><li>packets can be lost, dropped at  router due to full buffers</li><li>sender times out prematurely, sending two copies, both of which are delivered</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421180007942.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421180007942.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421180007942" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421180029759.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421180029759.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421180029759" style="zoom: 33%;"><p>“costs” of congestion:</p><ul><li>more work (retrans) for given “goodput”</li><li>unneeded retransmissions: link carries multiple copies of pkt<ul><li>decreasing goodput</li></ul></li></ul><h5 id="scenario-3"><a href="#scenario-3" class="headerlink" title="scenario 3:"></a>scenario 3:</h5><ul><li>four senders</li><li>multiple paths</li><li>timeout&#x2F;retransmit</li></ul><p>Q: what happens as in and in’ increase ?</p><p>A: as red in’ increases, all arriving  blue pkts at upper queue are dropped, blue throughput&#x3D;0</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421180609262.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421180609262.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421180609262" style="zoom:50%;"><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421180628190.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421180628190.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421180628190" style="zoom:50%;"><p>another “cost” of congestion:</p><p>when packet dropped, any “ upstream transmission capacity used for that packet was wasted!</p><h3 id="3-7-TCP-congestion-control"><a href="#3-7-TCP-congestion-control" class="headerlink" title="3.7 TCP congestion control"></a>3.7 TCP congestion control</h3><h4 id="3-7-1-additive-increase-multiplicative-decrease"><a href="#3-7-1-additive-increase-multiplicative-decrease" class="headerlink" title="3.7.1 additive increase multiplicative decrease"></a>3.7.1 additive increase multiplicative decrease</h4><ul><li>approach:sender increases transmission rate (window  size), probing for usable bandwidth, until loss occurs<ul><li>additive increase: increase cwnd by 1 MSS every RTT until loss detected</li><li>multiplicative decrease: cut cwnd in half after loss</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421181142072.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421181142072.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421181142072" style="zoom:50%;"><h4 id="3-7-2-details"><a href="#3-7-2-details" class="headerlink" title="3.7.2 details"></a>3.7.2 details</h4><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421181303242.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421181303242.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421181303242" style="zoom:50%;"><ul><li><p>sender limits transmission:</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421181353780.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421181353780.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421181353780" style="zoom:50%;"></li><li><p>cwnd is dynamic, function of perceived network congestion</p></li></ul><p>TCP sending rate:</p><ul><li><p>roughly: send cwnd bytes, wait RTT for ACKS, then send more bytes</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421181504644.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421181504644.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421181504644" style="zoom:50%;"></li></ul><h4 id="3-7-3-Slow-Start"><a href="#3-7-3-Slow-Start" class="headerlink" title="3.7.3 Slow Start"></a>3.7.3 Slow Start</h4><ul><li>when connection begins, increase rate exponentially until first loss event<ul><li>initially cwnd &#x3D; 1 MSS</li><li>double cwnd every RTT</li><li>done by incrementing</li><li>cwnd for every ACK received</li></ul></li><li>summary: initial rate is slow but ramps up exponentially fast</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421181739650.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421181739650.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421181739650" style="zoom:50%;"><h5 id="Detecting-reacting-to-loss"><a href="#Detecting-reacting-to-loss" class="headerlink" title="Detecting, reacting to loss"></a>Detecting, reacting to loss</h5><ul><li>loss indicated by timeout:<ul><li>cwnd set to 1 MSS</li><li>window then grows exponentially (as in slow start) to threshold, then grows linearly</li></ul></li><li>loss indicated by 3 duplicate ACKs: TCP RENO<ul><li>dup ACKs indicate network capable of delivering  some segments</li><li>cwnd is cut in half window then grows linearly</li></ul></li><li>TCP Tahoe always sets cwnd to 1 (timeout or 3  duplicate acks)</li></ul><h5 id="switching-from-slow-start-to-CA"><a href="#switching-from-slow-start-to-CA" class="headerlink" title="switching from slow start to CA"></a>switching from slow start to CA</h5><p>Q: when should the exponential increase switch to linear?</p><p>A: when cwnd gets to 1&#x2F;2 of its value before timeout.</p><p>Implementation:</p><ul><li>variable ssthresh </li><li>on loss event, ssthresh is set to 1&#x2F;2 of cwnd just before loss event</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421182340610.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421182340610.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421182340610" style="zoom:50%;"><h5 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h5><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421182803514.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421182803514.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421182803514" style="zoom:50%;"><h4 id="3-7-4-throughput"><a href="#3-7-4-throughput" class="headerlink" title="3.7.4 throughput"></a>3.7.4 throughput</h4><ul><li><p>avg. TCP thruput as function of window size, RTT?</p><ul><li>ignore slow start, assume always data to send</li></ul></li><li><p>W: window size (measured in bytes) where loss occurs</p><ul><li><p>avg. window size (# in-flight bytes) is ¾ W</p></li><li><p>avg. thruput is 3&#x2F;4W per RTT</p></li></ul></li></ul><p>avg TCP thruput &#x3D; 3&#x2F;4*(W&#x2F;RTT) bytes&#x2F;sec</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421183126830.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421183126830.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421183126830" style="zoom:50%;"><p>TCP over “long, fat pipes”</p><ul><li><p>example: 1500 byte segments, 100ms RTT, want 10 Gbps throughput</p></li><li><p>requires W &#x3D; 83,333 in-flight segments</p></li><li><p>requires W &#x3D; 83,333 in-flight segments</p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421183517456.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421183517456.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421183517456" style="zoom:50%;"></li><li><p>to achieve 10 Gbps throughput, need a loss rate of L  &#x3D; 2·10^(-10) – a very small loss rate!</p></li></ul><h3 id="3-8-Fairness"><a href="#3-8-Fairness" class="headerlink" title="3.8 Fairness"></a>3.8 Fairness</h3><ul><li>fairness goal: if K TCP sessions share same bottleneck link of bandwidth R, each should have average rate of R&#x2F;K</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421183714886.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421183714886.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421183714886" style="zoom:50%;"><h4 id="3-8-1-Why-is-TCP-fair"><a href="#3-8-1-Why-is-TCP-fair" class="headerlink" title="3.8.1 Why is TCP fair"></a>3.8.1 Why is TCP fair</h4><p>two competing sessions:</p><ul><li>additive increase gives slope of 1, as throughout increases</li><li>multiplicative decrease decreases throughput proportionally</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421183838551.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421183838551.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421183838551" style="zoom:50%;"><h4 id="3-8-2-More-about-Fairness"><a href="#3-8-2-More-about-Fairness" class="headerlink" title="3.8.2 More about Fairness"></a>3.8.2 More about Fairness</h4><p>Fairness and UDP</p><ul><li><p>multimedia apps often do not use TCP </p><ul><li>do not want rate throttled by congestion control</li></ul></li><li><p>instead use UDP:</p><ul><li>send audio&#x2F;video at constant rate, tolerate packet loss</li></ul></li></ul><p>Fairness, parallel TCP connections</p><ul><li>application can open multiple parallel connections between two hosts</li><li>web browsers do this</li><li>link of rate R with 9 existing connections:<ul><li>new app asks for 1 TCP, gets rate R&#x2F;10</li><li>new app asks for 11 TCPs, gets R&#x2F;2</li></ul></li></ul><p>3.9 ECN</p><p>Explicit Congestion Notification (ECN)</p><ul><li>network-assisted congestion control:</li><li>congestion indication carried to receiving host</li><li>receiver (seeing congestion indication in IP datagram) sets ECE bit on receiver-to-sender ACK segment to notify sender of congestion</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421184548650.png" class="lazyload placeholder" data-srcset="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220421184548650.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220421184548650" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> computer network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servelet学习</title>
      <link href="/2022/02/23/servelet/"/>
      <url>/2022/02/23/servelet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="javaweb"><a href="#javaweb" class="headerlink" title="javaweb"></a>javaweb</h1><p>Tomcat: web 应用服务器</p><h2 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h2><p>web开发基石，与平台无关的服务器组件，负责与客户端进行通信</p><p>servlet本身是一堆接口，自定义一个类，并实现servlet</p><p>客户端无法直接访问servlet，只能在服务器端添加映射才能访问</p><p>映射需要开发者手动配置，有两种：</p><ul><li><p>基于xml的配置方式，直接手写映射</p></li><li><p>基于注解的方式，在需要映射的类名上方使用@添加注释</p><p>上述两种配置方法结果一致</p></li></ul><h3 id="1-servlet功能"><a href="#1-servlet功能" class="headerlink" title="1.servlet功能"></a>1.servlet功能</h3><ul><li>创建并返回给予客户请求的动态页面</li><li>与数据库进行通信</li></ul><h3 id="2-servlet生命周期"><a href="#2-servlet生命周期" class="headerlink" title="2.servlet生命周期"></a>2.servlet生命周期</h3><ol><li><p>当浏览器访问servle的时候，Tomcat会查询当前servlet的实例化对象是否存在，<u>若不存在，则通过反射机制动态创建对象（运行时类，获取类名-》获取构造器-》调用构造器创建对象， 若存在则直接执行第三步操作）</u></p></li><li><p>调用init方法完成初始化操作</p></li><li><p>调用service方法完成业务逻辑操作</p></li><li><p>关闭Tomcat时，调用destroy方法，释放当前占用资源</p><p>​    servlet生命周期方法：无参构造函数，init，service，destroy</p></li></ol><h3 id="3-servletconfig"><a href="#3-servletconfig" class="headerlink" title="3.servletconfig"></a>3.servletconfig</h3><p>该接口用来描述servlet的基本信息</p><ul><li>getservletname()  获取全类名</li><li>getinitparameter(string key)  过去init参数值(web.xml)</li><li>getinitparametername() 返回所有的initparameter的name值，用于遍历所有初始化值</li><li>getservletcontent 返回servletcontext，它是servlet的上下文，整个servlet的管理者</li></ul><h4 id="servletconfig与servletcontext的区别："><a href="#servletconfig与servletcontext的区别：" class="headerlink" title="servletconfig与servletcontext的区别："></a>servletconfig与servletcontext的区别：</h4><p>config作用于某个servlet对象，context作用于整个web应用</p><p>config具体实例，context全局</p><h3 id="4-servlet的层次结构"><a href="#4-servlet的层次结构" class="headerlink" title="4.servlet的层次结构"></a>4.servlet的层次结构</h3><p>servlet-》genericservlet（屏蔽常用方法）-》Httpservlet（处理HTTP请求）</p><ul><li>Genericservlet实现了servlet接口，同时为它的子类屏蔽不常用方法，子类只需要重写service方法，HTTPservice方法即可</li><li>HTTPservlet继承Genericservlet，根据请求类型进行分发处理，GET进入doGET方法等</li></ul><p>开发者自定义servlet只需继承HTTPservlet即可</p><h4 id="HTTP请求类型："><a href="#HTTP请求类型：" class="headerlink" title="HTTP请求类型："></a>HTTP请求类型：</h4><ul><li>Get 读</li><li>post 存</li><li>put 放</li><li>delete 删</li></ul><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>PS：jsp会将写入的代码转化为servlet，在调用write（）方法将HTML内容逐行输出</p><p> JSP本质上就是一个servlet，jsp主要负责于用户交互，将最终的界面全部呈现给用户，即HTML+CSS+JS混合文件</p><p> Tomcat会将jsp转化为servlet，将代码逐行输出，所有信息组合成完整的HTML代码</p><h3 id="1-转换流程"><a href="#1-转换流程" class="headerlink" title="1.转换流程"></a>1.转换流程</h3><p>​              <img src="/2022/02/23/servelet/Users/khdiu\AppData\Roaming\Typora\typora-user-images\image-20211126203817591.png" class="lazyload placeholder" data-srcset="/2022/02/23/servelet/Users/khdiu\AppData\Roaming\Typora\typora-user-images\image-20211126203817591.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20211126203817591" style="zoom: 50%;"></p><h3 id="2-HTML中嵌入JAVA程序"><a href="#2-HTML中嵌入JAVA程序" class="headerlink" title="2.HTML中嵌入JAVA程序"></a>2.HTML中嵌入JAVA程序</h3><ol><li>jsp脚本：执行JAVA代码用&lt;% code %&gt;单标签</li><li>jsp声明：定义JAVA方法用&lt;%! code%&gt;单标签</li><li>jsp表达式：把JAVA对象直接输出到HTML页中&lt;%&#x3D; java变量%&gt;</li></ol><h3 id="3-jsp内置对象"><a href="#3-jsp内置对象" class="headerlink" title="3.jsp内置对象"></a>3.jsp内置对象</h3><ul><li>request 表示一次请求 Httpservletservice</li><li>response 表示一次响应 Httpservletresponse</li><li>pagecontext 页面上下文 获取页面信息 </li><li>session 表示一次会话 保存用户信息 Httpsession</li><li>applocation 表示当前web应用，全局对象，保存所有用户共享信息 servletcontext</li><li>config 当前就jsp对应servlet的servletconfig对象，获取当前的servlet信息</li><li>out 向浏览器输出数据 jspwriter</li><li>page 当前jsp对应的servlet对象 servlet</li><li>exception 表示jsp页面发生的异常</li></ul><h3 id="4-request常用方法"><a href="#4-request常用方法" class="headerlink" title="4.request常用方法"></a>4.request常用方法</h3><ol><li>string getparameter(string key)获取从客户端传来的参数</li><li>void setAttribute(string key,objerct value) 通过键值对</li><li>string getAttribute(string key) 源JSP调用getrequestDispatcher(jsp名).forward(request,response)将对象传递给其他的JSP，之后由其他JSP处理请求</li><li>requestDispatcher ，getrequestdispatcher(string path)返回一个requestdispatcher对象</li><li>string[] getparametervalues()获取客户端传来的多个同名参数</li><li>void setcharacterEncoding(string charset)指定每个请求的编码</li></ol><h3 id="5-response常用方法"><a href="#5-response常用方法" class="headerlink" title="5.response常用方法"></a>5.response常用方法</h3><p>senddirect(string path)重定向，页面之间的跳转</p><p><u>转发是将同请求传递给下个页面，重定向是创建一个新的请求给下一个页面，之前的请求结束生命周期</u></p><ul><li>转发：同一个请求在服务器之间的传毒，地址栏不变，也叫服务器跳转</li><li>重定向：由客户端发送一个新的请求来访问跳转后的目标资源，地址栏改变，也叫客户端跳转</li></ul><p><strong>如果两个页面之间需要通过request来传值，则必须使用转发，不能使用重定向</strong></p><p>如：用户名登录，则需要将用户名传递给下一个页面</p><h2 id="session会话"><a href="#session会话" class="headerlink" title="session会话"></a>session会话</h2><p><u>服务器无法识别每一次HTTP请求的出处(<strong>无法识别来自哪个终端</strong>)，它只会接受到一个请求信号，必须有一种技术让服务器知道请求来自哪，这就是会话技术</u></p><h3 id="会话："><a href="#会话：" class="headerlink" title="会话："></a>会话：</h3><p>​      就是客户端与服务器之间发生的一系列连续的请求和响应的过程，<strong>打开浏览器到关闭浏览器进行的过程操作</strong></p><h3 id="会话状态："><a href="#会话状态：" class="headerlink" title="会话状态："></a>会话状态：</h3><p>指服务器和浏览器在会话过程中产生的状态信息，借助于会话状态，服务器能够把属于同一次会话的一系列请求和响应关联起来</p><p>属于同一次会话的请求共用一个标识符，即session id（同一浏览器多个窗口属于同一会话，即共用同一id，关闭浏览器后再次打开，id刷新）</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>string getid() 获取session id</li><li>vodi setmaxnactiveinterval（） 设置session失效时间，单位秒</li><li>int getmaxinactiveinterval 获取当前session的失效时间</li><li>void invalidate 设置session失效时间</li><li>void setattribute（string key，object value） 通过键值对存储数据</li><li>object getattribute(string key) 通过键值对获取对应数据</li><li>object removeattribute(string key) 通过键值对删除对应数据</li></ul><p><strong>session生命周期比request长，故用session存储用户名与密码</strong></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>针对浏览器，不同浏览器使用不同的cookie</p><p>cookie是服务端在HTTP响应中附带传给浏览器的一个小文本文件，一旦浏览器保存了某个cookie，在之后的请求与响应过程中，会将此cookie来回传递，这样就可以通过cookie这个载体完成客户端与服务端的交互</p><p><strong>cookie本身也是javax.servlet中的类</strong></p><ul><li><p>创建cookie</p><p>调用responseaddcookie()将cookie写入客户端</p></li><li><p>读取cookie</p><p>request.getcookies()</p></li></ul><h3 id="cookie常用方法"><a href="#cookie常用方法" class="headerlink" title="cookie常用方法"></a>cookie常用方法</h3><p>void setmaxage(int age) 设置cookie的有效时间，单位秒</p><p>int getmaxage() 获取cookie的有效时间</p><p>string getName() 获取cookie的name</p><p>string getvalue() 获取cookie的value</p><h3 id="cookie与session的区别"><a href="#cookie与session的区别" class="headerlink" title="cookie与session的区别"></a>cookie与session的区别</h3><p>session：存在服务器 保存object类型</p><p>cookie：存在浏览器，保存的数据是string类型</p><p>安全： <strong>session保存重要内容，cookie保存不重要信息</strong></p>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
