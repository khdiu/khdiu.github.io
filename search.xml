<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>introduction to software engineer(C2)</title>
      <link href="/2022/02/28/introduction%20to%20software%20engineer(c2)/"/>
      <url>/2022/02/28/introduction%20to%20software%20engineer(c2)/</url>
      
        <content type="html"><![CDATA[<h1 id="chapter2-Process-models"><a href="#chapter2-Process-models" class="headerlink" title="chapter2 Process models"></a>chapter2 Process models</h1><h2 id="preview"><a href="#preview" class="headerlink" title="preview"></a>preview</h2><p><strong>“Software Process”</strong> Definition: A series of predictable steps (a road map) that helps you deliver a high-quality product on time</p><p>A process providers stability, control, and organization to an activity so that it does not become chaotic</p><p>The process that you adopt depends on the software that you are building.</p><h2 id="2-1-A-generic-process-model"><a href="#2-1-A-generic-process-model" class="headerlink" title="2.1 A generic process model"></a>2.1 A generic process model</h2>]]></content>
      
      
      <categories>
          
          <category> introduction to software engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>introduction to software engineer(C1)</title>
      <link href="/2022/02/28/introduction%20to%20software%20engineer(c1)/"/>
      <url>/2022/02/28/introduction%20to%20software%20engineer(c1)/</url>
      
        <content type="html"><![CDATA[<h1 id="introduction-to-software-engineer-C1"><a href="#introduction-to-software-engineer-C1" class="headerlink" title="introduction to software engineer(C1)"></a>introduction to software engineer(C1)</h1><h2 id="1-1The-Nature-of-Software"><a href="#1-1The-Nature-of-Software" class="headerlink" title="1.1The Nature of Software"></a>1.1The Nature of Software</h2><h3 id="defining-software"><a href="#defining-software" class="headerlink" title="defining software"></a>defining software</h3><p>software is :</p><ol><li>instructions that when executed provide desired features, function and performance</li><li>data structures that enable the programs to adequately manipulate information</li><li>descriptive information in both hard copy and virtual forms that describes the operation and use of the program</li></ol><p><strong>software has one fundamental characteristics that makes it considerably different from hardware: <u>software doesn’t wear out</u></strong></p><p><strong>bathtub curve</strong></p><h3 id="software-Application-Domain"><a href="#software-Application-Domain" class="headerlink" title="software Application Domain"></a>software Application Domain</h3><ul><li>System software</li><li>Application software</li><li>Engineering&#x2F;scientific software</li><li>Embedded software</li><li>Product-line software</li><li>Web&#x2F;mobile applications</li><li>artificial intelligence software</li></ul><h3 id="The-legacy-Software"><a href="#The-legacy-Software" class="headerlink" title="The legacy Software"></a>The legacy Software</h3><p>The legacy software can be described in the following way:</p><p><strong>Legacy software systems were developed decades ago and have been continually modified to meet changes in business requirements and computing platforms</strong></p><p><strong>The proliferation of such systems is causing headaches for large organizations who find them costly to maintain and risky to evolve</strong></p><p>The reason for the legacy software to be fixed only include:</p><ul><li>The software must be adapted to meet the needs of new computing environments of technology</li><li>The software must be enhanced tp implement new business requirements</li><li>The software must be enhanced to make it work with other more modern systems of databases</li><li>The software must be re-architected to make it viable within an evolving computing environment</li></ul><h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h3>]]></content>
      
      
      <categories>
          
          <category> introduction to software engineer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>computer network(chapter 1)-1</title>
      <link href="/2022/02/24/computer-network(chapter1)/"/>
      <url>/2022/02/24/computer-network(chapter1)/</url>
      
        <content type="html"><![CDATA[<h1 id="computer-network-chapter-1-1"><a href="#computer-network-chapter-1-1" class="headerlink" title="computer network(chapter 1)-1"></a>computer network(chapter 1)-1</h1><h2 id="preview"><a href="#preview" class="headerlink" title="preview"></a>preview</h2><h3 id="Internet"><a href="#Internet" class="headerlink" title="Internet"></a>Internet</h3><ul><li>Internet: “network of networks” Interconnected ISPs</li><li>protocols: control sending , receiving of message. TCP,IP,HTTP,Skype</li><li>Internet standards:<ul><li>RFC: Request for comments</li><li>IETF: Internet Engineering task force</li></ul></li><li>Internet: a serve view<ul><li>infrastructure that provides services to applications: Web,VoIP,email,games,ecommerce,social nets</li></ul></li></ul><h3 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h3><p>protocol define format, order of message sent and received among network entities , and actions taken on message transmission ,receipt</p><h2 id="1-1network-structure"><a href="#1-1network-structure" class="headerlink" title="1.1network structure"></a>1.1network structure</h2><ul><li><p>network edge: </p><ul><li>hosts: clients and servers </li><li>servers often in data centers</li></ul></li><li><p>access networks,physical media:</p><p>wired,wireless,communication links</p></li><li><p>network core :</p><ul><li>interconnected routers</li><li>networl of networks</li></ul></li></ul><h2 id="1-2network-edge"><a href="#1-2network-edge" class="headerlink" title="1.2network edge"></a>1.2network edge</h2><h3 id="Access-networks"><a href="#Access-networks" class="headerlink" title="Access networks"></a>Access networks</h3><ul><li>serveral connect methods<ul><li>ressidential access nets</li><li>institutional nets wnetworks</li><li>mobile access networks</li></ul></li></ul><ol><li><p><strong>DSL(digitl subscriber line)</strong></p><ul><li>use existing telephone line to central office DSLAM<ul><li>data over DSL phone line goes to internet</li><li>voice over DSL phone line goes to telephone net</li></ul></li><li><u>&lt;2.5Mbps Upstream rtansmission rate (typically &lt; 1Mbps)</u></li><li><u>&lt;24Mbps downstream transmission rate (typically &lt; 10Mbps)</u></li></ul></li><li><p>Cable network</p><p>frequency division multiplexing : different channels transmitted in different frequency bands</p><ul><li><p>HFC: hybrid fiber coax</p><p>asymmetric network: <u>30Mbps downstream transmission rate, 2Mbps upstream transmission rate</u></p></li><li><p>network of cable,fiber attaches homes to ISP router</p><ul><li>home share access network to cable headend</li><li>unlike DSL, which has dedicated access to central office</li></ul></li></ul></li><li><p>home network: various devices </p></li><li><p>Ethernet (Enterprise access networks)</p><ul><li>typically used in companies,universities etc.</li><li>10Mbps,100Mbps,1Gbps,10Gbps transmission rates</li><li>today,end system typcally connect into Ethernet switch</li></ul></li><li><p>wireless access networks</p><ul><li>shared wireless access network connects end system to router : via base station aka “access point”</li><li><u>Wireless LANs</u><ol><li>within building (100ft.)</li><li>wifi: 1,54,450Mbps transimission rate</li></ol></li><li><u>wide area wireless access</u><ol><li>provided by telco(cellular) operator</li><li>between 1 and 10Mbps</li><li>3G,4G:LTE</li></ol></li></ul></li></ol><h3 id="sending-message"><a href="#sending-message" class="headerlink" title="sending message"></a>sending message</h3><p>link transmission rate, aka link capacity , aka link bandwidth</p><p>packet transmission delay &#x3D; L(bits)&#x2F;R(bits&#x2F;sec)</p><h3 id="Physical-media"><a href="#Physical-media" class="headerlink" title="Physical media"></a>Physical media</h3><ul><li><p>bit: propagates between transmitter&#x2F;receiver pairs</p></li><li><p>physical link: what lies between transmitter&amp;receiver</p></li><li><p>guide media: </p><p>signals propagate in solid media: copper,fiber,coax</p></li><li><p>unguided media</p><p>signals propagate freely,ratio</p></li><li><p>Twisted pair(TP)</p><p>two insulated copper wires</p><p>category5: 100Mbps,1Gbps Ethernet</p><p>category6: 10Gbps</p></li><li><p><u>coaxial cable</u></p><ul><li>two concentric copper conductors</li><li>bidirectional</li><li>broadband<ul><li>Mutiple channels on cable</li><li>HFC</li></ul></li></ul></li><li><p>fiber optic cable</p><ul><li>glass fiber carrying light pulses , each pulse a bit</li><li>high-speed operation: high-speed point-to-point ransmission(10’s-100’sGbps transmission rate)</li></ul></li><li><p>lowrer error rate</p><ul><li>repeaters spaced far apart </li><li>immune to electronmagnetic noise</li></ul></li><li><p>radio</p><ul><li><p>no phsical “wire”  bidirectional </p></li><li><p>radio link types:</p><ol><li><p>terrestrial microwave </p><p>up to 45Mbps channels</p></li><li><p>LAN(wifi)</p><p>54Mbps</p></li><li><p>wide area</p><p>4G cellular:~10 Mbps</p></li><li><p>satellite</p><ul><li>Kbps to 45Mbps channel(or mutiple smaller channels)</li><li>270 msec end-to-end delays</li><li>geosynchronous versus low altitude</li></ul></li></ol></li></ul></li></ul><h2 id="1-3network-core"><a href="#1-3network-core" class="headerlink" title="1.3network core"></a>1.3network core</h2><ul><li>mesh of interconnected router</li><li>packet-switching: hosts break application-layer message into packets<ul><li>forward packets form one router to the next ,across links on path from source to destination</li><li>each packet transmitted at full link capacity</li></ul></li></ul><h3 id="Packet-switch-store-and-forward"><a href="#Packet-switch-store-and-forward" class="headerlink" title="Packet-switch: store-and-forward"></a>Packet-switch: store-and-forward</h3><ul><li>It takes L&#x2F;R seconds to transmit L-bit packet into link at R bps</li><li>store and forward: entire packet must arrive at router before it can be transmitted on next link</li><li>end-end delay &#x3D;2L&#x2F;R(assuming zero propagation delay)</li></ul><h3 id="Packet-switching-queueing-delaying-loss"><a href="#Packet-switching-queueing-delaying-loss" class="headerlink" title="Packet-switching: queueing delaying,loss"></a>Packet-switching: queueing delaying,loss</h3><p>if arrival rate(in bits)to link exceeds transmission rate of link for a period of time:</p><ul><li>packets will queue, wait to be transimitted on link </li><li>packets can be dropped(lost) if memory(buffers) fills up</li></ul><h3 id="Tow-key-network-core-functions"><a href="#Tow-key-network-core-functions" class="headerlink" title="Tow key network-core functions"></a>Tow key network-core functions</h3><ul><li>routing: determines source-destination route taken by packets</li><li>forwarding: move packets from router’ input to appropriate router ouput</li></ul><h3 id="Alternative-core-circuit-switching"><a href="#Alternative-core-circuit-switching" class="headerlink" title="Alternative core: circuit switching"></a>Alternative core: circuit switching</h3><p>end-end resources allocated to,reserved for “call” between source&amp;destination</p><ul><li><p>in diagram, each links has four circuits </p><p>call gets 2nd circuit in top link and 1st circuit in right link</p></li><li><p>dedicated resources: no sharing</p><p>circuit-like(guaranteed) performance</p></li><li><p>circuit segment idle if not used by call(no sharing)</p></li><li><p>commonly used in traditional telephone networks</p></li></ul><h3 id="FDM-versus-TDM"><a href="#FDM-versus-TDM" class="headerlink" title="FDM versus TDM"></a>FDM versus TDM</h3><p>FDM: frequency-division multiplexing</p><p>TDM: time-division multiplexing</p><ul><li>With FDM each circuit continuously gets a fraction of the bandwidth</li><li>With TDM each circuit gets all of the bandwidth periodically during brief of time</li></ul><h3 id="Packet-switching-versus-circuit-switching"><a href="#Packet-switching-versus-circuit-switching" class="headerlink" title="Packet switching versus circuit switching"></a>Packet switching versus circuit switching</h3><ul><li><p>Packet switching </p><p>Advantages:</p><ul><li>great for bursty data</li><li>resource sharing</li><li>simpler, no call set up</li></ul><p>excessive congestion possible: </p><ul><li>packet delay and loss</li><li>protocols needed for reliable data transfer, congestion control</li></ul></li><li><p>circuit switching </p><ul><li>bandwidth guarantees needed for audio&#x2F;video apps</li><li>still an unsolved problem(chapter 7)</li></ul></li></ul><h3 id="Internet-structure-network-of-neworks"><a href="#Internet-structure-network-of-neworks" class="headerlink" title="Internet structure: network of neworks"></a>Internet structure: network of neworks</h3><ul><li>End-system connect to the access ISP</li><li>access ISP connect to the regional ISP </li><li>regional access connect to tier ISP</li></ul><h2 id="1-4Delay-loss-and-throughput-in-packet-switched-Networks"><a href="#1-4Delay-loss-and-throughput-in-packet-switched-Networks" class="headerlink" title="1.4Delay,loss,and throughput in packet-switched Networks"></a>1.4Delay,loss,and throughput in packet-switched Networks</h2><h3 id="Delay"><a href="#Delay" class="headerlink" title="Delay:"></a>Delay:</h3><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228233531690.png" style="zoom:50%;"><ul><li><p>Processing delay (<u>this relates to router’s cycle of instruction</u>) (constant)</p><p>The time required to examine the packet’s header and determine where to direct the part</p><p>Processing delays in high-speed routers are typically on the order of microseconds or less</p><p><u>After this nodal processing, the router directs the packet to the queue that precedes the links to router B</u> </p></li><li><p>Queuing delay (variable)</p><p>The time it waits to be transmitted onto the link.</p><p>This can be on the order of microseconds to milliseconds in practice</p></li><li><p>Transmission delay (constant)</p><p>This can be different in various TCP </p><p>Typically , the first-come-first-served manner, the delay formula is</p><p><strong>D(delay)&#x3D;L(Packet length)&#x2F;R(link bandwidth)</strong></p><p>Transmission delays are typically on the order of microseconds to milliseconds in practice</p></li><li><p>Propagation delay (constant)</p><p>The time required to propagate from the beginning of the link to router B </p><p>This propagation speed is the range of </p><p><strong>2<em>10^8 meter&#x2F;sec to 3</em>10^8 meters&#x2F;sec</strong></p><p>The formula is</p><p><strong>D(delay)&#x3D;d(length of physical link)&#x2F;s(propagation speed)</strong></p></li></ul><p>**link : the device transform the digital signal to the analog signal **</p><p><strong>relay device: the intermedium device transmit the analog signal</strong>  </p><h3 id="Queuing-delay-and-packet-loss"><a href="#Queuing-delay-and-packet-loss" class="headerlink" title="Queuing delay and packet loss"></a>Queuing delay and packet loss</h3><ul><li><p>Queuing delay:</p><p>traffic intensity: terminology to describe the congestion of the queue</p><p>The fofmula:</p><p><strong>Traffic intensity &#x3D; L*a&#x2F;R</strong></p><p>L:Per packet consists of L bits data</p><p>a:Average rate of link packets arrive the queue (packets&#x2F;sec)</p><p>R:The rate at witch bits are pushed out the queue (bits&#x2F;sec)</p></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228233646419.png" alt="image-20220228233646419" style="zoom:50%;"><ul><li><p>Packet loss</p><p>Queue preceding link n buffer has finite capacity</p><p>packet arriving to full queue dropped </p><p>lost packet may be retransmitted by previous node, by source end system, or not at all</p></li></ul><h3 id="Throughput"><a href="#Throughput" class="headerlink" title="Throughput"></a>Throughput</h3><p>The rate(bits&#x2F;time unit) at witch bits transferred between sender and receiver</p><ul><li><p>instantaneous: rate at given point in time</p></li><li><p>average: rate over longer period of time</p></li><li><p>The formula for throughput</p><p><strong>The bottleneck link: The minimal transmission rate of witch router has in the entire network</strong></p><ul><li>throughput &#x3D; min{Rs,Rc} only client and server</li><li>throughut &#x3D; min {R1,R2,…,Rn,Rs,Rc} include other routers</li><li>throughput &#x3D; min{R1,R2,…,Rn,Rs,Rc,R(<u>bottleneck&#x2F;users</u>)} multiple users sharing one network</li></ul></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228233249932.png" style="zoom:50%;"><h2 id="1-5Protocol-layers-service-models"><a href="#1-5Protocol-layers-service-models" class="headerlink" title="1.5Protocol layers, service models"></a>1.5Protocol layers, service models</h2><h3 id="Layers"><a href="#Layers" class="headerlink" title="Layers:"></a>Layers:</h3><p> Each layer implements a service</p><ul><li>via its own internal-layer actions</li><li>relying on services provides by layer below</li></ul><p>dealing with complex systems:</p><ul><li>explicit structure allows identification, relationship of complex system’s pieces<ul><li>layered reference model for discussion</li></ul></li><li>modularization eases maintenance, updating of system<ul><li>change of implementation of layers’ service transparent to rest of system</li><li>change in gate procedure doesn’t affect rest of system</li></ul></li></ul><p><strong>Internet protocol stack</strong></p><ul><li><p>Application: supporting network applications</p><p>FTP,SMTP,HTTP</p></li><li><p>Transport: process-process data transfer</p><p>TCP(typical),UDP(no-frills)</p></li><li><p>Network: the routing of datagrams from source to destination</p><p>IP,routing protocol</p></li><li><p>link: data transfer between neighboring network elements</p><p>Ethernet,Wifi,PPP</p></li><li><p>physical: bits “on the wire”</p></li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228231507652.png" style="zoom: 33%;"><h3 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation:"></a>Encapsulation:</h3><ul><li>Application: append message</li><li>transport: append segment</li><li>network: append datagram</li><li>link: append frame</li></ul><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228231927492.png" style="zoom: 50%;"><p>Typically, switch only has link and physical layers, no network layer ,witch means it doesn’t have IP address and cannot be found by uesers </p><p><strong>PDU: Each layer in protocol stack, except layer-1(application), has its PDU(protocol data unit)</strong></p><p><strong>Data + header &#x3D; PDU</strong></p><img src="https://blogpicture01.oss-cn-beijing.aliyuncs.com/img/image-20220228232827461.png" style="zoom: 50%;">]]></content>
      
      
      <categories>
          
          <category> computer network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servelet学习</title>
      <link href="/2022/02/23/servelet/"/>
      <url>/2022/02/23/servelet/</url>
      
        <content type="html"><![CDATA[<h1 id="javaweb"><a href="#javaweb" class="headerlink" title="javaweb"></a>javaweb</h1><p>Tomcat: web 应用服务器</p><h2 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h2><p>web开发基石，与平台无关的服务器组件，负责与客户端进行通信</p><p>servlet本身是一堆接口，自定义一个类，并实现servlet</p><p>客户端无法直接访问servlet，只能在服务器端添加映射才能访问</p><p>映射需要开发者手动配置，有两种：</p><ul><li><p>基于xml的配置方式，直接手写映射</p></li><li><p>基于注解的方式，在需要映射的类名上方使用@添加注释</p><p>上述两种配置方法结果一致</p></li></ul><h3 id="1-servlet功能"><a href="#1-servlet功能" class="headerlink" title="1.servlet功能"></a>1.servlet功能</h3><ul><li>创建并返回给予客户请求的动态页面</li><li>与数据库进行通信</li></ul><h3 id="2-servlet生命周期"><a href="#2-servlet生命周期" class="headerlink" title="2.servlet生命周期"></a>2.servlet生命周期</h3><ol><li><p>当浏览器访问servle的时候，Tomcat会查询当前servlet的实例化对象是否存在，<u>若不存在，则通过反射机制动态创建对象（运行时类，获取类名-》获取构造器-》调用构造器创建对象， 若存在则直接执行第三步操作）</u></p></li><li><p>调用init方法完成初始化操作</p></li><li><p>调用service方法完成业务逻辑操作</p></li><li><p>关闭Tomcat时，调用destroy方法，释放当前占用资源</p><p>​    servlet生命周期方法：无参构造函数，init，service，destroy</p></li></ol><h3 id="3-servletconfig"><a href="#3-servletconfig" class="headerlink" title="3.servletconfig"></a>3.servletconfig</h3><p>该接口用来描述servlet的基本信息</p><ul><li>getservletname()  获取全类名</li><li>getinitparameter(string key)  过去init参数值(web.xml)</li><li>getinitparametername() 返回所有的initparameter的name值，用于遍历所有初始化值</li><li>getservletcontent 返回servletcontext，它是servlet的上下文，整个servlet的管理者</li></ul><h4 id="servletconfig与servletcontext的区别："><a href="#servletconfig与servletcontext的区别：" class="headerlink" title="servletconfig与servletcontext的区别："></a>servletconfig与servletcontext的区别：</h4><p>config作用于某个servlet对象，context作用于整个web应用</p><p>config具体实例，context全局</p><h3 id="4-servlet的层次结构"><a href="#4-servlet的层次结构" class="headerlink" title="4.servlet的层次结构"></a>4.servlet的层次结构</h3><p>servlet-》genericservlet（屏蔽常用方法）-》Httpservlet（处理HTTP请求）</p><ul><li>Genericservlet实现了servlet接口，同时为它的子类屏蔽不常用方法，子类只需要重写service方法，HTTPservice方法即可</li><li>HTTPservlet继承Genericservlet，根据请求类型进行分发处理，GET进入doGET方法等</li></ul><p>开发者自定义servlet只需继承HTTPservlet即可</p><h4 id="HTTP请求类型："><a href="#HTTP请求类型：" class="headerlink" title="HTTP请求类型："></a>HTTP请求类型：</h4><ul><li>Get 读</li><li>post 存</li><li>put 放</li><li>delete 删</li></ul><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>PS：jsp会将写入的代码转化为servlet，在调用write（）方法将HTML内容逐行输出</p><p> JSP本质上就是一个servlet，jsp主要负责于用户交互，将最终的界面全部呈现给用户，即HTML+CSS+JS混合文件</p><p> Tomcat会将jsp转化为servlet，将代码逐行输出，所有信息组合成完整的HTML代码</p><h3 id="1-转换流程"><a href="#1-转换流程" class="headerlink" title="1.转换流程"></a>1.转换流程</h3><p>​              <img src="/2022/02/23/servelet/Users/khdiu\AppData\Roaming\Typora\typora-user-images\image-20211126203817591.png" alt="image-20211126203817591" style="zoom: 50%;"></p><h3 id="2-HTML中嵌入JAVA程序"><a href="#2-HTML中嵌入JAVA程序" class="headerlink" title="2.HTML中嵌入JAVA程序"></a>2.HTML中嵌入JAVA程序</h3><ol><li>jsp脚本：执行JAVA代码用&lt;% code %&gt;单标签</li><li>jsp声明：定义JAVA方法用&lt;%! code%&gt;单标签</li><li>jsp表达式：把JAVA对象直接输出到HTML页中&lt;%&#x3D; java变量%&gt;</li></ol><h3 id="3-jsp内置对象"><a href="#3-jsp内置对象" class="headerlink" title="3.jsp内置对象"></a>3.jsp内置对象</h3><ul><li>request 表示一次请求 Httpservletservice</li><li>response 表示一次响应 Httpservletresponse</li><li>pagecontext 页面上下文 获取页面信息 </li><li>session 表示一次会话 保存用户信息 Httpsession</li><li>applocation 表示当前web应用，全局对象，保存所有用户共享信息 servletcontext</li><li>config 当前就jsp对应servlet的servletconfig对象，获取当前的servlet信息</li><li>out 向浏览器输出数据 jspwriter</li><li>page 当前jsp对应的servlet对象 servlet</li><li>exception 表示jsp页面发生的异常</li></ul><h3 id="4-request常用方法"><a href="#4-request常用方法" class="headerlink" title="4.request常用方法"></a>4.request常用方法</h3><ol><li>string getparameter(string key)获取从客户端传来的参数</li><li>void setAttribute(string key,objerct value) 通过键值对</li><li>string getAttribute(string key) 源JSP调用getrequestDispatcher(jsp名).forward(request,response)将对象传递给其他的JSP，之后由其他JSP处理请求</li><li>requestDispatcher ，getrequestdispatcher(string path)返回一个requestdispatcher对象</li><li>string[] getparametervalues()获取客户端传来的多个同名参数</li><li>void setcharacterEncoding(string charset)指定每个请求的编码</li></ol><h3 id="5-response常用方法"><a href="#5-response常用方法" class="headerlink" title="5.response常用方法"></a>5.response常用方法</h3><p>senddirect(string path)重定向，页面之间的跳转</p><p><u>转发是将同请求传递给下个页面，重定向是创建一个新的请求给下一个页面，之前的请求结束生命周期</u></p><ul><li>转发：同一个请求在服务器之间的传毒，地址栏不变，也叫服务器跳转</li><li>重定向：由客户端发送一个新的请求来访问跳转后的目标资源，地址栏改变，也叫客户端跳转</li></ul><p><strong>如果两个页面之间需要通过request来传值，则必须使用转发，不能使用重定向</strong></p><p>如：用户名登录，则需要将用户名传递给下一个页面</p><h2 id="session会话"><a href="#session会话" class="headerlink" title="session会话"></a>session会话</h2><p><u>服务器无法识别每一次HTTP请求的出处(<strong>无法识别来自哪个终端</strong>)，它只会接受到一个请求信号，必须有一种技术让服务器知道请求来自哪，这就是会话技术</u></p><h3 id="会话："><a href="#会话：" class="headerlink" title="会话："></a>会话：</h3><p>​      就是客户端与服务器之间发生的一系列连续的请求和响应的过程，<strong>打开浏览器到关闭浏览器进行的过程操作</strong></p><h3 id="会话状态："><a href="#会话状态：" class="headerlink" title="会话状态："></a>会话状态：</h3><p>指服务器和浏览器在会话过程中产生的状态信息，借助于会话状态，服务器能够把属于同一次会话的一系列请求和响应关联起来</p><p>属于同一次会话的请求共用一个标识符，即session id（同一浏览器多个窗口属于同一会话，即共用同一id，关闭浏览器后再次打开，id刷新）</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>string getid() 获取session id</li><li>vodi setmaxnactiveinterval（） 设置session失效时间，单位秒</li><li>int getmaxinactiveinterval 获取当前session的失效时间</li><li>void invalidate 设置session失效时间</li><li>void setattribute（string key，object value） 通过键值对存储数据</li><li>object getattribute(string key) 通过键值对获取对应数据</li><li>object removeattribute(string key) 通过键值对删除对应数据</li></ul><p><strong>session生命周期比request长，故用session存储用户名与密码</strong></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>针对浏览器，不同浏览器使用不同的cookie</p><p>cookie是服务端在HTTP响应中附带传给浏览器的一个小文本文件，一旦浏览器保存了某个cookie，在之后的请求与响应过程中，会将此cookie来回传递，这样就可以通过cookie这个载体完成客户端与服务端的交互</p><p><strong>cookie本身也是javax.servlet中的类</strong></p><ul><li><p>创建cookie</p><p>调用responseaddcookie()将cookie写入客户端</p></li><li><p>读取cookie</p><p>request.getcookies()</p></li></ul><h3 id="cookie常用方法"><a href="#cookie常用方法" class="headerlink" title="cookie常用方法"></a>cookie常用方法</h3><p>void setmaxage(int age) 设置cookie的有效时间，单位秒</p><p>int getmaxage() 获取cookie的有效时间</p><p>string getName() 获取cookie的name</p><p>string getvalue() 获取cookie的value</p><h3 id="cookie与session的区别"><a href="#cookie与session的区别" class="headerlink" title="cookie与session的区别"></a>cookie与session的区别</h3><p>session：存在服务器 保存object类型</p><p>cookie：存在浏览器，保存的数据是string类型</p><p>安全： <strong>session保存重要内容，cookie保存不重要信息</strong></p>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/22/hello-world/"/>
      <url>/2022/02/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> common </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
